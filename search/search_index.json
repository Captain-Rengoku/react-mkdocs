{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Frontend Guide (  )","text":"<p>This guide will walk you through everything you need to know to build modern, scalable, and type-safe web applications using React, TypeScript, and Next.js.</p> <p></p>"},{"location":"#what-youll-learn","title":"\ud83d\udcd8 What You\u2019ll Learn","text":"<p>You'll explore:</p> <ul> <li>\u2705 Core React principles, history, and why it\u2019s the UI library of choice.</li> <li>\ud83e\uddf1 How to build reusable components with JSX, props, state, and hooks.</li> <li>\ud83d\udd04 The Virtual DOM and how React efficiently handles UI updates.</li> <li>\u2699\ufe0f Modern features like React Fiber, Concurrent Rendering, and Suspense.</li> <li>\ud83e\udde0 TypeScript fundamentals and how it improves developer productivity.</li> <li>\u2705 Typing React props, context, hooks, and reducers using TypeScript.</li> <li>\ud83e\udde9 Combining React with TypeScript for scalable, bug-resistant code.</li> <li>\ud83d\ude80 Building full-stack React apps with Next.js.</li> <li>\ud83e\udded Mastering Next.js features: file-based routing, SSR, SSG, ISR, and Server Components.</li> <li>\ud83d\uddc3\ufe0f Using API routes, database integration, and deploying with Vercel.</li> <li>\ud83d\udd01 Comparing React to other frameworks (Vue, Angular, Svelte).</li> </ul>"},{"location":"#react-the-ui-library","title":"React: The UI Library","text":"<p>React is a powerful JavaScript library for building user interfaces, focusing on component-based architecture and a declarative approach.</p> <p>In this section, you\u2019ll learn:</p> <ul> <li>What React is and how it differs from other frameworks.</li> <li>Creating components with JSX.</li> <li>Using state and props to manage dynamic data.</li> <li>The power of hooks: <code>useState</code>, <code>useEffect</code>, <code>useContext</code>, and more.</li> <li>One-way data flow and how it simplifies app logic.</li> <li>The Virtual DOM and performance benefits.</li> </ul>"},{"location":"#typescript-static-typing-for-javascript","title":"TypeScript: Static Typing for JavaScript","text":"<p>TypeScript adds type safety to JavaScript, helping you catch errors early and refactor confidently.</p> <p>You\u2019ll learn:</p> <ul> <li>TypeScript syntax: types, interfaces, enums, and generics.</li> <li>Type checking functions, arrays, objects, and more.</li> <li>Writing reusable, type-safe utilities and components.</li> <li>Working with external libraries and <code>@types</code>.</li> <li>Using <code>tsconfig.json</code> to customize your build settings.</li> <li>Setting up React + TypeScript projects.</li> <li>Typing props, state, refs, and context.</li> <li>Strongly typing <code>useReducer</code> and custom hooks.</li> <li>Handling form validation and API calls with TypeScript.</li> <li>Creating scalable patterns with reusable types.</li> </ul>"},{"location":"#nextjs-the-react-framework","title":"Next.js: The React Framework","text":"<p>Next.js builds on React by adding routing, data fetching, API routes, and full-stack capabilities\u2014all with great defaults and performance.</p> <p>With Next.js, you\u2019ll learn:</p> <ul> <li>App routing: pages vs App Router, dynamic and nested routes.</li> <li>Static Generation (SSG), Server-Side Rendering (SSR), and Incremental Static Regeneration (ISR).</li> <li>Server Components and client hydration in the new App directory.</li> <li>Creating API routes and integrating databases (e.g., Prisma).</li> <li>Authentication with NextAuth.js and using middleware.</li> <li>Optimizing and deploying to Vercel.</li> </ul> <p>Whether you're just starting out or leveling up, this guide gives you a solid foundation for building high-performance front-end applications.</p>"},{"location":"#get-in-touch","title":"\ud83d\udcec Get in touch","text":"<ul> <li>Email: souravkumardash183@gmail.com</li> <li>Portfolio: My Portfolio</li> <li>LinkedIn: S.Kumar</li> <li>GitHub: Captain-Rengoku</li> </ul>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tag:mkdocs","title":"MKDocs","text":"<ul> <li>            \ud83d\udc4b Welcome to My MkDocs Site          </li> </ul>"},{"location":"blog/","title":"Welcome to My Blog","text":"<p>Hi there! \ud83d\udc4b Welcome to my collection of blog posts. Here, I share my thoughts, tutorials, experiments, and anything else that sparks my interest. Whether you're here to learn something new or just explore, I hope you find something valuable.</p>"},{"location":"blog/#these-are-my-blog-posts-feel-free-to-explore","title":"These are my blog posts \u2014 feel free to explore","text":""},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/","title":"\ud83d\udc4b Welcome to My MkDocs Site","text":"<p>Fast, simple, and beautiful documentation \u2014 powered by MkDocs + Material.</p>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#hero-image","title":"\ud83d\uddbc\ufe0f Hero Image","text":"","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#light-and-dark-mode-images","title":"\ud83c\udf17 Light and Dark Mode Images","text":"","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#image-with-caption","title":"\ud83d\udcdd Image with Caption","text":"<p>A simple caption for the image, using Material for MkDocs syntax.</p>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#features","title":"\ud83d\udca1 Features","text":"<ul> <li>\u2705 Built using MkDocs</li> <li>\ud83c\udfa8 Styled with Material for MkDocs</li> <li>\ud83c\udf13 Dark mode &amp; light mode support</li> <li>\ud83d\udcc4 Markdown-based content</li> <li>\ud83d\uddbc Responsive image rendering</li> <li>\ud83e\udde0 Tooltips and references</li> </ul>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#tooltip-examples","title":"\ud83d\udd17 Tooltip Examples","text":"<ul> <li> <p>Hover over me</p> </li> <li> <p>Reference style link</p> </li> </ul>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#image-gallery","title":"\ud83d\uddbc\ufe0f Image Gallery","text":"<ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> <li></li> <li></li> <li></li> <li></li> </ul>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#stay-connected","title":"\ud83d\udcec Stay Connected","text":"<ul> <li>\ud83d\udce7 Email: [your@email.com]</li> <li>\ud83d\udc19 GitHub: yourusername</li> <li>\ud83c\udf10 Website: yourwebsite.com</li> </ul> <p>_Made with \u2764\ufe0f using MkDocs and Material for MkDocs</p>","tags":["MKDocs"]},{"location":"react/1.Introduction%20to%20React/","title":"Introduction to React","text":""},{"location":"react/1.Introduction%20to%20React/#1-what-is-react","title":"1. What is React?","text":"<p>React is a JavaScript library used for building user interfaces, particularly single-page applications (SPAs) where a fast, interactive, and dynamic user experience is required. Developed and maintained by Meta (formerly Facebook), React allows developers to create reusable UI components and efficiently update the DOM using a virtual DOM.</p>"},{"location":"react/1.Introduction%20to%20React/#history-and-evolution-of-react","title":"History and Evolution of React","text":"<p>React was created by Jordan Walke, a software engineer at Facebook, in 2011. It was first used in Facebook\u2019s News Feed and later in Instagram. The library was officially open-sourced in 2013, allowing developers worldwide to use and contribute to it.</p> <p>Key Milestones in React\u2019s Evolution:</p> <ul> <li>2013: React is open-sourced at JSConf US.</li> <li>2015: React Native is released, enabling React development for mobile apps.</li> <li>2016: Introduction of React Fiber, improving rendering performance.</li> <li>2017: React 16 is launched, bringing features like error boundaries and portals.</li> <li>2018: Introduction of React Hooks, enabling state management in functional components.</li> <li>2020: React 17 introduces gradual upgrades for better backward compatibility.</li> <li>2022-Present: React continues to evolve with improved Concurrent Rendering, React Server Components(RSC), and Suspense.</li> </ul> <p>Concurrent Rendering in React: Concurrent Rendering is a React feature that allows the UI to remain responsive by rendering updates asynchronously. Instead of blocking the main thread, React can pause, prioritize, or abandon rendering tasks based on user interactions and system workload.</p> <p>Traditional React rendering is synchronous, meaning that once a render starts, it cannot be interrupted. If a heavy computation or large UI update happens, it can cause lag or freeze the UI.</p> <p>Concurrent rendering solves this by:</p> <ul> <li>\u2705 Interrupting non-urgent renders when a high-priority update (like user input) occurs.</li> <li>\u2705 Scheduling renders based on priority to enhance responsiveness.</li> <li>\u2705 Avoiding UI freezes by spreading rendering work over multiple frames.</li> </ul> <p>React Server Components (RSC) Explained: React Server Components (RSC) are a new feature that allows React components to be rendered on the server instead of the client. This helps reduce the JavaScript bundle size and improves performance by delivering pre-rendered HTML from the server to the browser.</p> <p>What is Suspense? Suspense is a React feature that lets components \"wait\" for some asynchronous operation (like data fetching) before rendering. It helps manage loading states efficiently and improves the user experience by displaying fallback UI while waiting for data.</p>"},{"location":"react/1.Introduction%20to%20React/#core-philosophy-of-react","title":"Core Philosophy of React","text":"<p>React is built around a few key principles that make it powerful and efficient:</p> <ul> <li>Declarative UI: React components describe what the UI should look like, and React efficiently updates the DOM to match this description.</li> </ul> <pre><code>function Greeting() {\n  return &lt;h1&gt;Hello, World!&lt;/h1&gt;;\n}\n</code></pre> <ul> <li>Component-Based Architecture: React applications are made up of independent, reusable components that manage their own state and behavior.</li> </ul> <pre><code>function Button() {\n  return &lt;button&gt;Click me&lt;/button&gt;;\n}\n</code></pre> <ul> <li>Virtual DOM for Performance: Instead of updating the real DOM directly, React uses a Virtual DOM to minimize performance bottlenecks.</li> </ul> <p>When a change occurs, React compares the Virtual DOM with the previous version and updates only the necessary parts.</p> <ul> <li>Unidirectional Data Flow: React follows a top-down (one-way) data flow, making it easier to track and manage state changes.</li> </ul> <p>Data is passed via props from parent to child components.</p> <ul> <li>React Hooks for State Management: With Hooks (introduced in React 16.8), functional components can handle state and lifecycle methods.</li> </ul> <pre><code>import { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/1.Introduction%20to%20React/#open-source-community-and-contributions","title":"Open-Source Community and Contributions","text":"<p>React has a thriving open-source ecosystem, with active contributors from Facebook, individual developers, and large companies.</p> <p>Key Contributions and Community Initiatives:</p> <ul> <li> <p>React Repository on GitHub: One of the most starred repositories on GitHub.</p> </li> <li> <p>React DevTools: A browser extension for debugging React applications.</p> </li> <li> <p>Third-Party Libraries: Popular libraries like Redux, React Router, and Next.js enhance React\u2019s capabilities.</p> </li> <li> <p>Conferences &amp; Meetups: Events like React Conf bring the global developer community together.</p> </li> <li> <p>Meta\u2019s Role: Facebook (Meta) maintains React and regularly releases updates, ensuring long-term support.</p> </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#2-features-and-benefits-of-react","title":"2. Features and Benefits of React","text":"<p>React is a powerful JavaScript library that offers several key features, making it an excellent choice for building modern web applications. Below are some of the core features and benefits of React:</p>"},{"location":"react/1.Introduction%20to%20React/#declarative-ui","title":"Declarative UI","text":"<p>React uses a declarative programming approach, meaning developers describe what the UI should look like, and React efficiently updates the DOM to match that state.</p> <p>Benefits:</p> <ul> <li>Simplifies UI development by focusing on \"what\" should happen rather than \"how.\"</li> <li>Improves readability and maintainability of code.</li> <li>Automatic updates when state changes, reducing manual DOM manipulations.</li> </ul> <pre><code>function Greeting() {\n  return &lt;h1&gt;Hello, World!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"react/1.Introduction%20to%20React/#component-based-architecture","title":"Component-Based Architecture","text":"<p>React applications are built using reusable and independent components. Each component manages its own logic and can be composed to build complex UIs.</p> <p>Benefits:</p> <ul> <li>Encourages reusability, reducing redundant code.</li> <li>Enhances maintainability by keeping UI elements modular.</li> <li>Allows for easier debugging and testing.</li> </ul> <pre><code>function Button() {\n  return &lt;button&gt;Click me&lt;/button&gt;;\n}\n</code></pre> <p>Components like &lt; Button /&gt; can be reused throughout the application.</p>"},{"location":"react/1.Introduction%20to%20React/#unidirectional-data-flow","title":"Unidirectional Data Flow","text":"<p>React enforces a one-way data flow, meaning data is passed from parent to child components via props. This ensures a predictable state management system.</p> <p>Benefits:</p> <ul> <li>Easier to track changes and debug issues.</li> <li>Improves application stability and predictability.</li> <li>Simplifies state management when combined with tools like Redux or Context API.</li> </ul> <pre><code>function WelcomeMessage(props) {\n  return &lt;h2&gt;Welcome, {props.name}!&lt;/h2&gt;;\n}\n\nfunction App() {\n  return &lt;WelcomeMessage name=\"Alice\" /&gt;;\n}\n</code></pre> <p>Here, name is passed as a prop from the App component to WelcomeMessage.</p>"},{"location":"react/1.Introduction%20to%20React/#react-fiber-architecture","title":"React Fiber Architecture","text":"<p>React Fiber (introduced in React 16) is a reimplementation of React\u2019s core reconciliation algorithm. It improves rendering performance and responsiveness.</p> <p>Benefits:</p> <ul> <li>Asynchronous rendering for smoother UI updates.</li> <li>Better concurrency handling, enabling features like Suspense and Concurrent Mode.</li> <li>Improved performance for large applications by breaking rendering into smaller units.</li> </ul> <p>Example of Fiber\u2019s Benefits: Supports time slicing, which prioritizes important UI updates over less urgent ones.</p> <p>Enables Suspense for data fetching, allowing parts of the UI to load progressively.</p>"},{"location":"react/1.Introduction%20to%20React/#jsx-for-templating","title":"JSX for Templating","text":"<p>JSX (JavaScript XML) is a syntax extension for JavaScript that allows developers to write UI templates directly within JavaScript code.</p> <p>Benefits:</p> <ul> <li>Makes UI development more intuitive and readable.</li> <li>Allows JavaScript expressions within HTML-like syntax.</li> <li>Enables compile-time optimization, improving performance.</li> </ul> <pre><code>function UserInfo({ name }) {\n  return &lt;p&gt;Hello, {name}!&lt;/p&gt;;\n}\n</code></pre> <p>JSX allows embedding JavaScript ({name}) within HTML-like syntax.</p>"},{"location":"react/1.Introduction%20to%20React/#3-react-vs-other-javascript-frameworks","title":"3. React vs Other JavaScript Frameworks","text":"<p>React is one of the most popular JavaScript libraries, but it is often compared with other frameworks like Angular, Vue, and Svelte. Below is a detailed comparison to help understand how React stands against these alternatives.</p>"},{"location":"react/1.Introduction%20to%20React/#comparison-react-angular-vue-svelte","title":"Comparison: React, Angular, Vue, Svelte","text":"<ul> <li>React: A UI-focused library by Meta with a Virtual DOM for fast rendering. Great for SPAs and mobile apps.</li> <li>Angular: A full-fledged framework by Google with built-in features. Best for large enterprise apps.</li> <li>Vue: A progressive framework with an easy learning curve and two-way data binding. Good for small to medium projects.</li> <li>Svelte: A compiler-based framework with no Virtual DOM, offering the best performance but a smaller ecosystem.</li> </ul>"},{"location":"react/1.Introduction%20to%20React/#4-pros-and-cons-of-react-vs-others","title":"4. Pros and Cons of React vs Others","text":""},{"location":"react/1.Introduction%20to%20React/#react","title":"React","text":"<p>\u2705 Large ecosystem, reusable components, Virtual DOM for speed, React Native for mobile. \u274c JSX has a learning curve, requires additional libraries for routing and state management.  </p>"},{"location":"react/1.Introduction%20to%20React/#angular","title":"Angular","text":"<p>\u2705 Full framework, TypeScript support, scalable. \u274c Steeper learning curve, larger bundle size.  </p>"},{"location":"react/1.Introduction%20to%20React/#vuejs","title":"Vue.js","text":"<p>\u2705 Simple syntax, lightweight, two-way data binding. \u274c Smaller ecosystem, less corporate backing.  </p>"},{"location":"react/1.Introduction%20to%20React/#svelte","title":"Svelte","text":"<p>\u2705 No Virtual DOM, fast performance, small bundle size. \u274c Smaller community, fewer third-party libraries.  </p>"},{"location":"react/1.Introduction%20to%20React/#when-to-choose-react-over-others","title":"When to Choose React Over Others?","text":"<ul> <li>Use React for SPAs, scalable applications, and strong community support.  </li> <li>Choose Angular for large enterprise apps.  </li> <li>Use Vue for small to medium projects with a simple structure.  </li> <li>Opt for Svelte when performance and small bundle size are top priorities.  </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#5-understanding-virtual-dom-vs-real-dom","title":"5. Understanding Virtual DOM vs Real DOM","text":"<p>The Document Object Model (DOM) is a programming interface that represents the structure of a web page as a tree of objects. JavaScript can manipulate the DOM to update content dynamically. However, direct manipulation of the Real DOM is slow and inefficient, which is where the Virtual DOM (VDOM) comes into play.</p>"},{"location":"react/1.Introduction%20to%20React/#how-virtual-dom-works","title":"How Virtual DOM Works","text":"<ul> <li> <p>The Virtual DOM is an in-memory representation of the Real DOM. Instead of modifying the Real DOM directly, React first updates the Virtual DOM, then determines the minimal changes needed and applies those changes efficiently to the Real DOM.</p> </li> <li> <p>When the state of a component changes, React creates a new Virtual DOM tree.</p> </li> <li> <p>React then compares this new tree with the previous Virtual DOM tree using the diffing algorithm.</p> </li> <li> <p>After identifying the changes, React updates only the necessary parts of the Real DOM, minimizing performance costs.</p> </li> <li> <p>Different component types are assumed to generate substantially different trees. React will not attempt to diff them, but rather replace the old tree completely.</p> </li> <li> <p>Diffing of lists is performed using keys. Keys should be \"stable, predictable, and unique.\"</p> </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#the-key-points-are","title":"The key points are","text":"<ul> <li>When building a user interface (UI), not every change needs to happen right away.</li> <li> <p>If we try to update everything instantly, it can make the app slow and laggy, especially during animations.</p> </li> <li> <p><code>Think of it like this:</code> Animations need to run very smoothly \u2014 like 60 times per second \u2014 so they should happen quickly.</p> </li> <li> <p>But other things \u2014 like loading some data or updating a list \u2014 can wait a bit longer.</p> </li> </ul> <p>There are two ways to handle this:</p> <ol> <li> <p>Push-based (you control everything):</p> <ul> <li>You (the programmer) decide when and how things should update.</li> <li>It's more work and easy to make mistakes that slow things down.</li> </ul> </li> <li> <p>Pull-based (React's way):</p> <ul> <li>React looks at all the changes and decides which ones are most important.</li> <li>It chooses what to do first and can even pause or delay some updates.</li> <li>This helps keep the app fast and smooth, especially during animations.</li> </ul> </li> </ol>"},{"location":"react/1.Introduction%20to%20React/#performance-benefits","title":"Performance Benefits","text":"<p>Minimized Repaints and Reflows (colors and sizes changes)</p> <ul> <li>Direct Real DOM updates cause multiple repaints and reflows, leading to poor performance. Virtual DOM minimizes these updates by batching changes.</li> </ul> <p>Efficient Updates via Reconciliation</p> <ul> <li>Instead of updating the entire Real DOM, React selectively updates only the changed elements.</li> </ul> <p>Asynchronous Batch Updates</p> <ul> <li>React batches multiple state updates and processes them efficiently to avoid unnecessary re-renders.</li> </ul>"},{"location":"react/1.Introduction%20to%20React/#diffing-algorithm-in-react","title":"Diffing Algorithm in React","text":"<p>The diffing algorithm, also known as Reconciliation, is used to determine the difference between the new Virtual DOM and the previous one. Key aspects of this algorithm include:</p> <ul> <li>Element Type Comparison</li> </ul> <p>If elements are of different types (e.g., &lt; div&gt; \u2192 &lt; span&gt;), React destroys the old element and creates a new one.</p> <ul> <li>Reordering Optimization with Keys</li> </ul> <p>React uses keys (unique identifiers) to track elements efficiently in lists, preventing unnecessary re-renders.</p> <ul> <li>Component Tree Optimization</li> </ul> <p>React recursively compares subtrees and updates only the necessary branches.</p>"},{"location":"react/1.Introduction%20to%20React/#6-react-ecosystem-overview","title":"6. React Ecosystem Overview","text":"<p>React is a powerful JavaScript library for building interactive user interfaces. The React ecosystem includes various frameworks, libraries, and tools that enhance development efficiency and flexibility.</p>"},{"location":"react/1.Introduction%20to%20React/#core-technologies-in-the-react-ecosystem","title":"Core Technologies in the React Ecosystem","text":"<ul> <li> <p>React A JavaScript library for building UI components with a declarative approach. Uses a Virtual DOM to optimize rendering. Based on component-based architecture.</p> </li> <li> <p>ReactDOM Provides the necessary APIs to render React components in the browser. Bridges the gap between React and the Real DOM. Handles event delegation and component mounting/unmounting.</p> </li> <li> <p>React Native Enables React development for mobile applications (iOS &amp; Android). Uses native components instead of web-based elements. Bridges JavaScript code with native APIs.</p> </li> <li> <p>Next.js A React framework that enables server-side rendering (SSR), static site generation (SSG), and hybrid rendering. Enhances SEO and performance. Includes API routes, file-based routing, and built-in optimizations.</p> </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#key-libraries-and-tools-in-the-react-ecosystem","title":"Key Libraries and Tools in the React Ecosystem","text":"<ul> <li> <p>State Management Redux \u2013 A centralized state management library based on the Flux architecture. Recoil \u2013 Simplifies state management with atom-based state sharing. Zustand \u2013 A lightweight alternative to Redux with minimal boilerplate.</p> </li> <li> <p>Routing React Router \u2013 Enables client-side routing for React applications with dynamic URLs.</p> </li> <li> <p>UI Component Libraries Material UI \u2013 A popular component library based on Google\u2019s Material Design. Chakra UI \u2013 A customizable and accessible UI library. Ant Design \u2013 A UI library with enterprise-level components.</p> </li> <li> <p>Other Tools React Query \u2013 Manages data fetching, caching, and synchronization. Storybook \u2013 A tool for building and testing UI components in isolation. Jest &amp; React Testing Library \u2013 Used for unit and integration testing.</p> </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#server-components-vs-client-components","title":"Server Components vs Client Components","text":"<ul> <li>React introduced Server Components to improve performance by reducing JavaScript bundle sizes.</li> </ul> <p>Server Components</p> <ul> <li>Rendered on the server and sent as static HTML to the client.</li> <li>Do not include client-side JavaScript, reducing the bundle size.</li> <li>Ideal for fetching data before sending content to the client.</li> </ul> <p>Client Components</p> <ul> <li>Rendered entirely in the browser.</li> <li>Necessary for interactive elements (e.g., buttons, forms).</li> <li>Can use hooks like useState and useEffect.</li> </ul>"},{"location":"react/10.State%20Management%20in%20React/","title":"State Management in React","text":""},{"location":"react/14.API%20Calls%20in%20React/","title":"API Calls in React","text":""},{"location":"react/14.API%20Calls%20in%20React/#1-fetch-api-vs-axios-for-http-requests","title":"1. Fetch API vs Axios for HTTP Requests","text":""},{"location":"react/14.API%20Calls%20in%20React/#introduction-to-fetch-api","title":"\ud83d\udd39 Introduction to Fetch API","text":"<pre><code>useEffect(() =&gt; {\n  fetch('https://api.example.com/data')\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error(error));\n}, []);\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#using-axios-for-api-requests","title":"\ud83d\udd39 Using Axios for API Requests","text":"<pre><code>npm install axios\n</code></pre> <pre><code>import axios from 'axios';\n\nuseEffect(() =&gt; {\n  axios.get('https://api.example.com/data')\n    .then(response =&gt; console.log(response.data))\n    .catch(error =&gt; console.error(error));\n}, []);\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#pros-and-cons-of-fetch-api-vs-axios","title":"\ud83d\udd39 Pros and Cons of Fetch API vs Axios","text":"Feature Fetch API Axios Default in browser \u2705 Yes \u274c No Interceptors \u274c No \u2705 Yes JSON auto transform \u274c No \u2705 Yes Error handling Manual Built-in"},{"location":"react/14.API%20Calls%20in%20React/#setting-up-axios-interceptors","title":"\ud83d\udd39 Setting Up Axios Interceptors","text":"<pre><code>axios.interceptors.request.use(config =&gt; {\n  config.headers.Authorization = `Bearer token`;\n  return config;\n});\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#2-handling-promises-asyncawait","title":"2. Handling Promises &amp; Async/Await","text":""},{"location":"react/14.API%20Calls%20in%20React/#using-promises-with-then","title":"\ud83d\udd39 Using Promises with <code>.then()</code>","text":"<pre><code>fetch(url)\n  .then(res =&gt; res.json())\n  .then(data =&gt; console.log(data))\n  .catch(err =&gt; console.error(err));\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#writing-asynchronous-code-with-asyncawait","title":"\ud83d\udd39 Writing Asynchronous Code with <code>async/await</code>","text":"<pre><code>const fetchData = async () =&gt; {\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n};\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#error-handling-in-async-functions","title":"\ud83d\udd39 Error Handling in Async Functions","text":"<pre><code>try {\n  // code\n} catch (error) {\n  console.error('API error:', error);\n}\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#best-practices","title":"\ud83d\udd39 Best Practices","text":"<ul> <li>Always handle errors</li> <li>Use <code>try/catch</code> inside async functions</li> <li>Keep async logic out of render</li> </ul>"},{"location":"react/14.API%20Calls%20in%20React/#3-useeffect-with-api-calls","title":"3. useEffect with API Calls","text":""},{"location":"react/14.API%20Calls%20in%20React/#fetching-data-inside-useeffect","title":"\ud83d\udd39 Fetching Data Inside <code>useEffect</code>","text":"<pre><code>useEffect(() =&gt; {\n  async function loadData() {\n    const res = await fetch(url);\n    const data = await res.json();\n    setData(data);\n  }\n  loadData();\n}, []);\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#dependency-array-and-performance","title":"\ud83d\udd39 Dependency Array and Performance","text":"<ul> <li>Use dependencies wisely to avoid infinite loops</li> <li>Avoid unnecessary re-renders</li> </ul>"},{"location":"react/14.API%20Calls%20in%20React/#cleanup-functions","title":"\ud83d\udd39 Cleanup Functions","text":"<pre><code>useEffect(() =&gt; {\n  const controller = new AbortController();\n  fetch(url, { signal: controller.signal });\n  return () =&gt; controller.abort();\n}, []);\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#preventing-memory-leaks","title":"\ud83d\udd39 Preventing Memory Leaks","text":"<ul> <li>Use <code>AbortController</code></li> <li>Track component mounted state with <code>let isMounted = true</code></li> </ul>"},{"location":"react/14.API%20Calls%20in%20React/#4-handling-api-errors-and-loading-states","title":"4. Handling API Errors and Loading States","text":""},{"location":"react/14.API%20Calls%20in%20React/#error-handling-best-practices","title":"\ud83d\udd39 Error Handling Best Practices","text":"<ul> <li>Graceful fallbacks</li> <li>Display user-friendly messages</li> </ul>"},{"location":"react/14.API%20Calls%20in%20React/#showing-loading-spinners","title":"\ud83d\udd39 Showing Loading Spinners","text":"<pre><code>{loading ? &lt;Spinner /&gt; : &lt;DataView data={data} /&gt;}\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#retry-logic","title":"\ud83d\udd39 Retry Logic","text":"<ul> <li>Use exponential backoff strategy</li> <li>Retry with a maximum count</li> </ul>"},{"location":"react/14.API%20Calls%20in%20React/#handling-rate-limits","title":"\ud83d\udd39 Handling Rate Limits","text":"<ul> <li>Respect API rate limits</li> <li>Use headers like <code>Retry-After</code></li> </ul>"},{"location":"react/14.API%20Calls%20in%20React/#5-caching-api-responses-with-swr-and-react-query","title":"5. Caching API Responses with SWR and React Query","text":""},{"location":"react/14.API%20Calls%20in%20React/#what-is-swr","title":"\ud83d\udd39 What is SWR?","text":"<p>SWR = Stale While Revalidate \u2014 fetch fast, revalidate in background.</p>"},{"location":"react/14.API%20Calls%20in%20React/#swr-example","title":"\ud83d\udd39 SWR Example","text":"<pre><code>npm install swr\n</code></pre> <pre><code>import useSWR from 'swr';\nconst fetcher = url =&gt; fetch(url).then(res =&gt; res.json());\n\nconst { data, error } = useSWR('/api/data', fetcher);\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#react-query-example","title":"\ud83d\udd39 React Query Example","text":"<pre><code>npm install @tanstack/react-query\n</code></pre> <pre><code>import { useQuery } from '@tanstack/react-query';\n\nconst { data, isLoading, error } = useQuery(['todos'], fetchTodos);\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#optimistic-ui-updates","title":"\ud83d\udd39 Optimistic UI Updates","text":"<pre><code>mutate({ id, completed: true }, {\n  optimisticData: { ...todo, completed: true },\n  rollbackOnError: true\n});\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#swr-vs-react-query","title":"\ud83d\udd39 SWR vs React Query","text":"Feature SWR React Query Caching \u2705 \u2705 Mutation support \u274c \u2705 Devtools \u274c \u2705 Optimistic updates \u274c \u2705"},{"location":"react/14.API%20Calls%20in%20React/#6-working-with-graphql-apis-in-react-apollo-client","title":"6. Working with GraphQL APIs in React (Apollo Client)","text":""},{"location":"react/14.API%20Calls%20in%20React/#introduction-to-graphql","title":"\ud83d\udd39 Introduction to GraphQL","text":"<ul> <li>Declarative data fetching</li> <li>Reduces over-fetching</li> </ul>"},{"location":"react/14.API%20Calls%20in%20React/#setting-up-apollo-client","title":"\ud83d\udd39 Setting Up Apollo Client","text":"<pre><code>npm install @apollo/client graphql\n</code></pre> <pre><code>import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://example.com/graphql',\n  cache: new InMemoryCache()\n});\n\n&lt;ApolloProvider client={client}&gt;\n  &lt;App /&gt;\n&lt;/ApolloProvider&gt;\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#fetching-with-usequery","title":"\ud83d\udd39 Fetching with <code>useQuery</code>","text":"<pre><code>import { useQuery, gql } from '@apollo/client';\n\nconst GET_USERS = gql`\n  query GetUsers {\n    users {\n      id\n      name\n    }\n  }\n`;\n\nconst { loading, error, data } = useQuery(GET_USERS);\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#mutations-with-usemutation","title":"\ud83d\udd39 Mutations with <code>useMutation</code>","text":"<pre><code>import { useMutation, gql } from '@apollo/client';\n\nconst ADD_USER = gql`\n  mutation AddUser($name: String!) {\n    addUser(name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nconst [addUser] = useMutation(ADD_USER);\n</code></pre>"},{"location":"react/14.API%20Calls%20in%20React/#apollo-cache-for-state-management","title":"\ud83d\udd39 Apollo Cache for State Management","text":"<ul> <li>Automatically caches queries</li> <li>Update cache manually using <code>cache.writeQuery</code></li> </ul>"},{"location":"react/14.API%20Calls%20in%20React/#subscriptions-with-apollo-client","title":"\ud83d\udd39 Subscriptions with Apollo Client","text":"<ul> <li>Use <code>WebSocketLink</code> to enable real-time updates</li> <li>Requires Apollo Server with subscriptions</li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/","title":"Setting Up the Environment","text":""},{"location":"react/2.Setting%20Up%20the%20Environment/#1-installing-nodejs-npm","title":"1. Installing Node.js &amp; npm","text":"<ul> <li> <p>Downloading and Installing Node.js</p> </li> <li> <p>Node.js is a JavaScript runtime that enables running JavaScript outside the browser It is essential for React development. Follow these steps to install it:</p> </li> <li>Go to the official Node.js website: <code>https://nodejs.org/</code></li> <li>Download the latest LTS (Long-Term Support) version for stability.</li> <li>Run the installer and follow the setup instructions.</li> <li> <p>Ensure you check the option to install npm (Node Package Manager).</p> </li> <li> <p>Verifying Installation</p> <ul> <li>Once installed, open the terminal and run: node -v</li> <li>This should return the installed Node.js version.</li> <li>To verify npm installation, run: npm -v</li> <li>This should return the installed npm version.</li> </ul> </li> <li> <p>Understanding Node.js Package Manager (npm)</p> <ul> <li>npm is a package manager that comes with Node.js, used to install and manage JavaScript packages and dependencies for projects.</li> <li>Common npm commands:<ul> <li><code>npm init</code> - Initializes a new project.</li> <li><code>npm install &lt;package&gt;</code> - Installs a package.</li> <li><code>npm install -g &lt;package&gt;</code> - Installs a package globally.</li> <li><code>npm update</code> - Updates all packages.</li> </ul> </li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/#2-setting-up-a-react-project-with-vite","title":"2. Setting Up a React Project with Vite","text":"<ul> <li>Creating and Running a New Project</li> <li> <p>Vite is a modern frontend build tool that offers a fast and optimized development experience.</p> </li> <li> <p>To create a new React project using Vite, run:</p> <ul> <li>npm create vite@latest my-vite-app --template react</li> </ul> </li> <li>Navigate to the project directory:<ul> <li>cd my-vite-app</li> </ul> </li> <li>Install dependencies:<ul> <li>npm install</li> </ul> </li> <li> <p>Then start the development server:</p> <ul> <li>npm run dev</li> </ul> <p>By default, the app runs on <code>http://localhost:5173/</code></p> </li> <li> <p>Understanding Default Folder Structure <code>Folder Structure</code></p> </li> </ul> <pre><code>my-vite-app/\n\u2502-- node_modules/\n\u2502-- public/\n\u2502-- src/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 main.jsx\n\u2502-- .gitignore\n\u2502-- index.html\n\u2502-- package.json\n\u2502-- vite.config.js\n</code></pre> <p><code>Key files and folders:</code></p> <ul> <li>src/: Main source code for components and logic.</li> <li>public/: Static assets such as images and index.html.</li> <li>vite.config.js: Configuration file for Vite.</li> <li>index.html: The main HTML entry point.</li> </ul> <p><code>Customizing Vite Configuration</code></p> <ul> <li>Vite provides flexibility through vite.config.js.</li> <li>You can modify settings like aliasing, plugins, and environment variables.</li> </ul> <p>Example of aliasing paths in vite.config.js:</p> <pre><code>import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@components': '/src/components',\n    },\n  },\n});\n</code></pre>"},{"location":"react/2.Setting%20Up%20the%20Environment/#3-project-structure-of-a-react-app","title":"3. Project Structure of a React App","text":"<ul> <li>src, public, node_modules, package.json Explained</li> <li>src/: Contains React components, hooks, styles, and utility functions.</li> <li>public/: Stores static files like images and fonts.</li> <li>node_modules/: Installed dependencies.</li> <li> <p>package.json: Defines project metadata and dependencies.</p> </li> <li> <p>Organizing Components, Hooks, and Utilities     Recommended folder structure:</p> </li> </ul> <pre><code>my-vite-app/\n\u2502-- src/\n\u2502   \u2502-- components/\n\u2502   \u2502-- hooks/\n\u2502   \u2502-- utils/\n\u2502   \u2502-- styles/\n\u2502   \u2514\u2500\u2500 App.jsx\n</code></pre> <ul> <li>Best Practices for Folder Structure</li> <li>A modular and reusable component refers to a self-contained, independent unit of code that can be used across different parts of a project or in multiple  projects without modification.</li> <li>Use separate folders for utilities and hooks.<ul> <li>Utilities are general helper functions used for tasks like formatting, calculations, or API calls. They work in any JavaScript project.</li> <li>Hooks are special functions in React that let functional components manage state and side effects.</li> <li>Utilities are stateless and reusable across different projects.</li> <li>Hooks are React-specific and used inside functional components to handle things like state (useState) or side effects (useEffect).</li> <li>Example: A utility might format a date, while a hook manages a counter\u2019s state in a React component.</li> <li>Maintain styles in a dedicated folder.</li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/#4-understanding-packagejson-node_modules","title":"4. Understanding package.json &amp; node_modules","text":"<ul> <li> <p>Managing Dependencies</p> <p>Dependencies are listed in package.json:</p> <pre><code>\"dependencies\": {\n  \"react\": \"^18.0.0\",\n  \"react-dom\": \"^18.0.0\"\n}\n</code></pre> <p>Install dependencies with: <code>npm install</code></p> </li> <li> <p>npm Scripts Overview</p> <p>Common scripts in package.json:</p> <pre><code>\"scripts\": {\n  \"dev\": \"vite\",\n  \"build\": \"vite build\",\n  \"preview\": \"vite preview\"\n}\n</code></pre> <p>Run a script with: npm run dev , npm run build , npm run preview</p> </li> <li> <p>Peer Dependencies and Dev Dependencies</p> <ul> <li><code>Dependencies</code> - Required for production.</li> <li><code>Dev Dependencies</code> - Required for development (--save-dev).</li> <li><code>Peer Dependencies</code> - Must be installed manually by the consuming project.</li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/#5-running-and-building-a-react-application","title":"5. Running and Building a React Application","text":"<ul> <li> <p>Development Server and Build Process</p> <ul> <li>To start the development server: npm run dev</li> <li>To build for production: npm run build</li> </ul> </li> <li> <p>This generates an optimized dist/ folder.</p> </li> </ul> <p>Using Environment Variables in React</p> <ul> <li>Vite uses .env files for environment variables:<ul> <li>VITE_API_URL=<code>https://api.example.com</code></li> </ul> </li> <li>Access it in your app:<ul> <li>const apiUrl = <code>import.meta.env.VITE_API_URL;</code></li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/#6-comparing-vite-over-cra","title":"6. Comparing Vite over CRA","text":"<ul> <li>Benefits of Vite<ul> <li>Faster startup due to esbuild pre-bundling.</li> <li>Optimized builds with efficient tree-shaking.</li> <li>Hot Module Replacement (HMR) for instant updates.</li> <li>Smaller bundle sizes due to optimized dependency handling.</li> </ul> </li> </ul>"},{"location":"react/3.Understanding%20jsx/","title":"Understanding JSX (JavaScript XML)","text":""},{"location":"react/3.Understanding%20jsx/#1-what-is-jsx","title":"1. What is JSX?","text":"<p>JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to HTML. It is used with React to describe the structure of the user interface in a declarative manner. JSX is not a requirement for using React, but it makes the code more readable and expressive.</p> <ul> <li> <p>Why JSX Exists</p> <ul> <li>JSX simplifies the process of writing UI components by providing a syntax that resembles HTML, making it easier to visualize the structure of the UI. Under the hood, JSX is compiled to JavaScript calls to <code>React.createElement()</code>, which ultimately generates the virtual DOM elements.</li> </ul> </li> <li> <p>Writing JSX Syntax</p> <ul> <li>JSX allows developers to write HTML-like structures directly within JavaScript. A basic JSX snippet looks like this:</li> </ul> <pre><code>const element = &lt;h1&gt;Hello, JSX!&lt;/h1&gt;;\n</code></pre> <p>It can also include nested elements:</p> nested elements<pre><code>const element = (\n  &lt;div&gt;\n    &lt;h1&gt;Welcome to JSX&lt;/h1&gt;\n    &lt;p&gt;JSX makes writing UI code easier!&lt;/p&gt;\n  &lt;/div&gt;\n);\n</code></pre> </li> <li> <p>JSX Compilation Process     JSX is not valid JavaScript, so it must be compiled before it can be executed by the browser. Babel, a popular JavaScript compiler, transpiles JSX into JavaScript functions that create React elements:</p> <pre><code>const element = React.createElement(\"h1\", null, \"Hello, JSX!\");\n</code></pre> <p>Babel automatically transforms JSX into these function calls, ensuring compatibility with JavaScript environments.</p> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#2-jsx-syntax-and-expressions","title":"2. JSX Syntax and Expressions","text":"<ul> <li> <p>Embedding JavaScript Expressions     JSX allows embedding JavaScript expressions within curly braces {}:</p> <pre><code>const name = \"Alice\";\nconst element = &lt;h1&gt;Hello, {name}!&lt;/h1&gt;;\n</code></pre> </li> <li> <p>Conditional Rendering with JSX     JSX supports conditional rendering using JavaScript expressions. The simplest way is by using an if statement outside of JSX:</p> <pre><code>let message;\nif (isLoggedIn) {\n  message = &lt;h1&gt;Welcome back!&lt;/h1&gt;;\n} else {\n  message = &lt;h1&gt;Please log in.&lt;/h1&gt;;\n}\n</code></pre> </li> <li> <p>Using Ternary Operators and Logical &amp;&amp;     For inline conditions, the ternary operator is commonly used:</p> <pre><code>const message = isLoggedIn ? &lt;h1&gt;Welcome back!&lt;/h1&gt; : &lt;h1&gt;Please log in.&lt;/h1&gt;;\n</code></pre> <p>For simple conditions, the logical &amp;&amp; operator can be used:</p> <pre><code>const showMessage = isLoggedIn &amp;&amp; &lt;h1&gt;Welcome back!&lt;/h1&gt;;\n</code></pre> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#3-embedding-javascript-in-jsx","title":"3. Embedding JavaScript in JSX","text":"<ul> <li> <p>Using Variables Inside JSX     You can directly use JavaScript variables inside JSX expressions:</p> <pre><code>const title = \"React Guide\";\nconst header = &lt;h1&gt;{title}&lt;/h1&gt;;\n</code></pre> </li> <li> <p>Inline Functions and Events     JSX allows defining event handlers directly within elements:</p> <pre><code>&lt;button onClick={() =&gt; alert(\"Button clicked!\")}&gt;Click Me&lt;/button&gt;\n</code></pre> </li> <li> <p>Template Literals in JSX     You can use template literals to dynamically construct strings inside JSX:</p> <pre><code>const user = \"Alice\";\nconst greeting = &lt;h1&gt;{`Hello, ${user}!`}&lt;/h1&gt;;\n</code></pre> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#4-jsx-vs-html-differences","title":"4. JSX vs HTML Differences","text":"<ul> <li> <p>Self-Closing Tags, ClassName, and Attributes     JSX requires self-closing tags for elements that don\u2019t have children:</p> <pre><code>&lt;input type=\"text\" /&gt;\n&lt;img src=\"image.jpg\" alt=\"Image\" /&gt;\n</code></pre> <p>Since class is a reserved keyword in JavaScript, JSX uses className instead:</p> <pre><code>&lt;div className=\"container\"&gt;Content&lt;/div&gt;\n</code></pre> <p>Attributes in JSX follow camelCase convention:</p> <pre><code>&lt;button onClick={handleClick}&gt;Click&lt;/button&gt;\n</code></pre> </li> <li> <p>Using Fragments in JSX     JSX requires a single parent element, which can be cumbersome. Fragments help avoid unnecessary &lt; div&gt; wrappers:</p> <pre><code>&lt;&gt;\n  &lt;h1&gt;Title&lt;/h1&gt;\n  &lt;p&gt;Paragraph&lt;/p&gt;\n&lt;/&gt;\n</code></pre> <p>Alternatively, use : <pre><code>&lt;React.Fragment&gt;\n  &lt;h1&gt;Title&lt;/h1&gt;\n  &lt;p&gt;Paragraph&lt;/p&gt;\n&lt;/React.Fragment&gt;\n</code></pre>"},{"location":"react/3.Understanding%20jsx/#5-reactcreateelement-behind-the-scenes","title":"5. React.createElement() Behind the Scenes","text":"<ul> <li> <p>JSX Transpilation     JSX is syntactic sugar for React.createElement(). The JSX code:</p> <pre><code>const element = &lt;h1&gt;Hello, JSX!&lt;/h1&gt;;\n</code></pre> <p>is transpiled into:</p> <pre><code>const element = React.createElement(\"h1\", null, \"Hello, JSX!\");\n</code></pre> </li> <li> <p>Babel and Compilation Process     Babel transforms JSX into valid JavaScript code using the React library. This ensures JSX can run in any JavaScript environment.</p> </li> <li> <p>How JSX Converts to React Elements     Each JSX element is turned into a call to <code>React.createElement()</code>, which produces a React element that is used to update the virtual DOM and render components efficiently.</p> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#summary","title":"Summary","text":"<ul> <li>JSX - JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to HTML.</li> <li>Babel - JavaScript compiler, transpiles JSX into JavaScript functions that create React elements:<ul> <li>JSX allows embedding JavaScript expressions within curly braces {}:</li> <li>JSX supports conditional rendering using JavaScript expressions.</li> <li>inline conditions -- ternary operator</li> <li>simple conditions -- logical &amp;&amp; operator</li> <li>selfclosing tags, className, camelCase Attributes</li> </ul> </li> </ul> <p>Fragments</p> <pre><code>&lt;&gt;&lt;/&gt;\n// or \n&lt;React.Fragment&gt;&lt;/React.Fragment&gt;\n</code></pre> <p>wrappers</p> <p>JSX Transpilation -- JSX is syntactic sugar for React.createElement()</p> <pre><code>const element = &lt;h1&gt;Hello, JSX!&lt;/h1&gt;;\n</code></pre> <p>is transpiled into:</p> <pre><code>const element = React.createElement(\"h1\", null, \"Hello, JSX!\");\n</code></pre>"},{"location":"react/4.React%20Components/","title":"React Components","text":""},{"location":"react/4.React%20Components/#1-functional-components","title":"1. Functional Components","text":"<p>Functional components are simple JavaScript functions that return JSX. They are often used for stateless components.</p>"},{"location":"react/4.React%20Components/#stateless-components","title":"Stateless Components","text":"<p>Stateless components do not manage their own state. They only receive props and render UI accordingly.</p> <pre><code>const Greeting = ({ name }) =&gt; {\n  return &lt;h1&gt;Hello, {name}!&lt;/h1&gt;;\n};\n\nexport default Greeting;\n</code></pre>"},{"location":"react/4.React%20Components/#writing-function-based-components","title":"Writing Function-Based Components","text":"<p>Functional components are concise and easier to read compared to class components.</p> <pre><code>function Welcome(props) {\n  return &lt;h1&gt;Welcome, {props.user}!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"react/4.React%20Components/#arrow-functions-vs-regular-functions-in-components","title":"Arrow Functions vs Regular Functions in Components","text":"<p>Arrow functions provide a more concise syntax, but both approaches work similarly.</p> <pre><code>const ArrowComponent = () =&gt; &lt;p&gt;Using an arrow function&lt;/p&gt;;\n\nfunction RegularComponent() {\n  return &lt;p&gt;Using a regular function&lt;/p&gt;;\n}\n</code></pre>"},{"location":"react/4.React%20Components/#2-class-components","title":"2. Class Components","text":"<p>Class components were the primary way to manage state before React Hooks were introduced.</p>"},{"location":"react/4.React%20Components/#understanding-component-classes","title":"Understanding Component Classes","text":"<pre><code>import React, { Component } from 'react';\n\nclass Hello extends Component {\n  render() {\n    return &lt;h1&gt;Hello, {this.props.name}!&lt;/h1&gt;;\n  }\n}\n</code></pre>"},{"location":"react/4.React%20Components/#lifecycle-methods-in-class-components","title":"Lifecycle Methods in Class Components","text":"<p>Lifecycle methods allow components to run code at specific points in their lifecycle.</p> <pre><code>class LifecycleDemo extends Component {\n  componentDidMount() {\n    console.log('Component mounted');\n  }\n\n  render() {\n    return &lt;p&gt;Lifecycle methods example&lt;/p&gt;;\n  }\n}\n</code></pre>"},{"location":"react/4.React%20Components/#3-props-and-prop-drilling","title":"3. Props and Prop Drilling","text":"<p>Props allow components to pass data to each other.</p>"},{"location":"react/4.React%20Components/#passing-data-between-components","title":"Passing Data Between Components","text":"<pre><code>const Child = ({ message }) =&gt; &lt;p&gt;{message}&lt;/p&gt;;\n\nconst Parent = () =&gt; &lt;Child message=\"Hello from Parent!\" /&gt;;\n</code></pre>"},{"location":"react/4.React%20Components/#avoiding-prop-drilling-with-context-api","title":"Avoiding Prop Drilling with Context API","text":"<pre><code>import { createContext, useContext } from 'react';\n\nconst MyContext = createContext();\n\nconst Parent = () =&gt; {\n  return (\n    &lt;MyContext.Provider value=\"Hello from Context\"&gt;\n      &lt;Child /&gt;\n    &lt;/MyContext.Provider&gt;\n  );\n};\n\nconst Child = () =&gt; {\n  const value = useContext(MyContext);\n  return &lt;p&gt;{value}&lt;/p&gt;;\n};\n</code></pre>"},{"location":"react/4.React%20Components/#default-props-and-proptypes","title":"Default Props and PropTypes","text":"<pre><code>import PropTypes from 'prop-types';\n\nconst Welcome = ({ name }) =&gt; &lt;h1&gt;Welcome, {name}!&lt;/h1&gt;;\n\nWelcome.defaultProps = {\n  name: 'Guest',\n};\n\nWelcome.propTypes = {\n  name: PropTypes.string,\n};\n</code></pre>"},{"location":"react/4.React%20Components/#4-component-reusability-and-composition","title":"4. Component Reusability and Composition","text":""},{"location":"react/4.React%20Components/#best-practices-for-reusable-components","title":"Best Practices for Reusable Components","text":"<ul> <li>Keep components small and focused</li> <li>Use props for configuration</li> <li>Separate logic from UI</li> </ul>"},{"location":"react/4.React%20Components/#composing-components","title":"Composing Components","text":"<pre><code>const Header = () =&gt; &lt;h1&gt;Header&lt;/h1&gt;;\nconst Footer = () =&gt; &lt;h1&gt;Footer&lt;/h1&gt;;\n\nconst Page = () =&gt; (\n  &lt;div&gt;\n    &lt;Header /&gt;\n    &lt;p&gt;Page content&lt;/p&gt;\n    &lt;Footer /&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"react/4.React%20Components/#smart-container-vs-dumb-presentational-components","title":"Smart (Container) vs Dumb (Presentational) Components","text":"<ul> <li>Smart Components: Handle logic and state</li> <li>Dumb Components: Only render UI</li> </ul> <pre><code>const DumbComponent = ({ text }) =&gt; &lt;p&gt;{text}&lt;/p&gt;;\n\nclass SmartComponent extends Component {\n  state = { text: 'Hello World' };\n\n  render() {\n    return &lt;DumbComponent text={this.state.text} /&gt;;\n  }\n}\n</code></pre> <pre><code>import React, { useState } from 'react';\n\nconst DumbComponent = ({ text }) =&gt; &lt;p&gt;{text}&lt;/p&gt;;\n\nconst SmartComponent = () =&gt; {\n  const [text, setText] = useState('Hello World');\n\n  return &lt;DumbComponent text={text} /&gt;;\n};\n</code></pre>"},{"location":"react/4.React%20Components/#5-stateless-vs-stateful-components","title":"5. Stateless vs Stateful Components","text":""},{"location":"react/4.React%20Components/#when-to-use-state-in-components","title":"When to Use State in Components","text":"<p>Use state when the component needs to track changes over time.</p>"},{"location":"react/4.React%20Components/#converting-class-components-to-functional-components","title":"Converting Class Components to Functional Components","text":"<pre><code>const FunctionalComponent = () =&gt; {\n  const [count, setCount] = React.useState(0);\n  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Count: {count}&lt;/button&gt;;\n};\n</code></pre>"},{"location":"react/4.React%20Components/#state-driven-ui-rendering","title":"State-driven UI Rendering","text":"<pre><code>const Toggle = () =&gt; {\n  const [isOn, setIsOn] = React.useState(false);\n  return &lt;button onClick={() =&gt; setIsOn(!isOn)}&gt;{isOn ? 'ON' : 'OFF'}&lt;/button&gt;;\n};\n</code></pre>"},{"location":"react/4.React%20Components/#6-default-and-named-exports-in-components","title":"6. Default and Named Exports in Components","text":""},{"location":"react/4.React%20Components/#exporting-and-importing-components-correctly","title":"Exporting and Importing Components Correctly","text":"<pre><code>// Default Export\nexport default function MyComponent() {}\n\n// Named Export\nexport function AnotherComponent() {}\nexport const ExtraComponent = () =&gt; &lt;div&gt;Extra&lt;/div&gt;;\n</code></pre> <pre><code>// Correct\n// default import\nimport MyComponent from './MyComponent'; \n// named imports\nimport { AnotherComponent, ExtraComponent } from './AnotherComponent'; \n</code></pre>"},{"location":"react/4.React%20Components/#tips","title":"Tips","text":"<ul> <li>Use default exports for main components per file.</li> <li>Use named exports when you have multiple exports in a file.</li> <li>Use an index.js file to re-export and simplify imports.</li> </ul>"},{"location":"react/4.React%20Components/#indexjs-for-all-the-import-and-export","title":"index.js for all the import and export","text":"<pre><code>// index.js\nexport { default as MyComponent } from './MyComponent';\nexport { AnotherComponent } from './AnotherComponent';\n\n// Usage\nimport { MyComponent, AnotherComponent } from './components';\n</code></pre>"},{"location":"react/4.React%20Components/#7-dynamic-rendering-with-props","title":"7. Dynamic Rendering with Props","text":""},{"location":"react/4.React%20Components/#using-props-to-change-component-behavior","title":"Using Props to Change Component Behavior","text":"<pre><code>const Button = ({ type, label }) =&gt; {\n  const className =\n    type === 'primary'\n      ? 'bg-blue-500 text-white'\n      : type === 'danger'\n      ? 'bg-red-500 text-white'\n      : 'bg-gray-300 text-black';\n\n  return &lt;button className={`px-4 py-2 rounded ${className}`}&gt;{label}&lt;/button&gt;;\n};\n</code></pre> <p>usage:</p> <pre><code>&lt;Button type=\"primary\" label=\"Submit\" /&gt;\n&lt;Button type=\"danger\" label=\"Delete\" /&gt;\n&lt;Button type=\"default\" label=\"Cancel\" /&gt;\n</code></pre>"},{"location":"react/4.React%20Components/#conditional-rendering-based-on-props","title":"Conditional Rendering Based on Props","text":"<pre><code>const MessageBox = ({ status }) =&gt; {\n  if (status === 'loading') {\n    return &lt;p&gt;Loading, please wait...&lt;/p&gt;;\n  } else if (status === 'error') {\n    return &lt;p className=\"text-red-500\"&gt;An error occurred.&lt;/p&gt;;\n  } else if (status === 'success') {\n    return &lt;p className=\"text-green-500\"&gt;Action completed successfully!&lt;/p&gt;;\n  } else {\n    return null;\n  }\n};\n</code></pre> <p>usage:</p> <pre><code>&lt;MessageBox status=\"loading\" /&gt;\n&lt;MessageBox status=\"error\" /&gt;\n&lt;MessageBox status=\"success\" /&gt;\n</code></pre>"},{"location":"react/4.React%20Components/#8-higher-order-components-hoc","title":"8. Higher-Order Components (HOC)","text":""},{"location":"react/4.React%20Components/#what-are-hocs","title":"What are HOCs?","text":"<p>A higher-order component (HOC) is a function that takes a component and returns a new component.</p>"},{"location":"react/4.React%20Components/#implementing-an-hoc","title":"Implementing an HOC","text":"<pre><code>const withSomething = (WrappedComponent) =&gt; {\n  return function EnhancedComponent(props) {\n    // Add logic, data, or side effects here\n    return &lt;WrappedComponent {...props} /&gt;;\n  };\n};\n</code></pre> <pre><code>const withLoading = (Component) =&gt; {\n  return function WrappedWithLoading({ isLoading, ...props }) {\n    if (isLoading) {\n      return &lt;p&gt;Loading...&lt;/p&gt;;\n    }\n    return &lt;Component {...props} /&gt;;\n  };\n};\n\n// usage\nconst UserList = ({ users }) =&gt; (\n  &lt;ul&gt;{users.map((user) =&gt; &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;)}&lt;/ul&gt;\n);\nconst UserListWithLoading = withLoading(UserList);\n\n// use\n&lt;UserListWithLoading isLoading={true} users={[]} /&gt;\n</code></pre>"},{"location":"react/4.React%20Components/#common-use-cases-for-hocs","title":"Common Use Cases for HOCs","text":"<ul> <li>Authentication</li> <li>Logging</li> <li>Conditional rendering</li> </ul>"},{"location":"react/4.React%20Components/#alternatives-to-hocs-render-props-hooks","title":"Alternatives to HOCs (Render Props, Hooks)","text":"<p>Instead of HOCs, you can use hooks like <code>useEffect</code> or render props.</p> <pre><code>const RenderPropComponent = ({ render }) =&gt; render();\n\nconst App = () =&gt; (\n  &lt;RenderPropComponent render={() =&gt; &lt;p&gt;Rendered via render prop&lt;/p&gt;} /&gt;\n);\n</code></pre> <p>This provides a comprehensive overview of React components and their usage.</p>"},{"location":"react/5.React%20State%20and%20Data%20Management/","title":"React State and Data Management","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#1understanding-state-in-react","title":"1.Understanding State in React","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#what-is-state","title":"What is State?","text":"<ul> <li>State is a built-in object in React that allows components to maintain and manage dynamic data.</li> <li>Unlike props, which are read-only and passed down from parent components, state is internal to a component and can be modified over time.</li> <li>Changes in state trigger re-renders, ensuring the UI stays in sync with the data.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#state-vs-props","title":"State vs Props","text":"<ul> <li>State:<ul> <li>Holds dynamic data within a component and can change over time.</li> <li>Can be modified using setState or useState</li> <li>Local to the component</li> <li>Trigger Rerenders.</li> </ul> </li> <li>Props:<ul> <li>Data passed from parent to child and cannot be modified by the receiving component.</li> <li>Read-only (immutable)</li> <li>Passed from parent to child.</li> <li>Trigger Rerenders only if parent re-renders</li> </ul> </li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#why-state-is-immutable","title":"Why State is Immutable","text":"<ul> <li>State should never be modified directly in React.</li> <li>Instead, updates should be made using setState in class components or the useState hook in functional components.</li> <li>Directly mutating state can cause unpredictable UI behavior and may prevent React from properly detecting changes, leading to inefficient re-renders.</li> </ul> <pre><code>const [count, setCount] = useState(0);\n\nconst increment = () =&gt; {\n  count++; // \u274c Direct mutation\n};\n</code></pre> <pre><code>const [count, setCount] = useState(0);\n\nconst increment = () =&gt; {\n  setCount(count + 1); // \u2705 Proper way to update state\n};\n</code></pre>"},{"location":"react/5.React%20State%20and%20Data%20Management/#2usestate-hook-for-state-management","title":"2.useState Hook for State Management","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#using-usestate-to-handle-local-state","title":"Using useState to Handle Local State","text":"<ul> <li><code>useState</code> is a React hook that allows functional components to manage local state. It returns an array with two elements: the current state value and a function to update it.</li> </ul> <pre><code>import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Count: {count}&lt;/button&gt;\n  );\n}\n</code></pre> <ul> <li>Key Points:</li> <li>useState(0) initializes count with 0.</li> <li>setCount is used to update count.</li> <li>Always use the setter function rather than modifying state directly.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#functional-updates-in-usestate","title":"Functional Updates in useState","text":"<ul> <li>Understanding Stale State Issue</li> <li>React does not update state immediately. Instead, it schedules updates and re-renders the component asynchronously.</li> <li>If you update state using the current state value without considering the latest changes, you might end up with stale or incorrect values.</li> </ul> <pre><code>import { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const handleIncrement = () =&gt; {\n  // stale value - a stale value is an outdated or old value of a variable\n  // All the setCount calls below use the same stale value of `count`\n  // because state updates in React are asynchronous and done by batched.\n  // React batches these updates and only the last one takes effect \u2014 which is still `count + 1`\n  setCount(count + 1);\n  setCount(count + 1); // \u274c Doesn't work as expected    \n  setCount(count + 1);\n  setCount(count + 1);\n  setCount(count + 1);\n  // These 5 setCount will be one batch\n  // To increment multiple times properly, use the functional form: setCount(prev =&gt; prev + 1)\n  // also called updater function\n  setCount(prev =&gt; prev + 1);\n  // And this will be one batch\n  setCount(count =&gt; count + 1);\n  // And this will be one batch and should set the count as 3 from 0\n  setCount(count + 1);\n  // And this will overwrite all the previous setCounts and only the last setCount will be updated\n  // so it will only add one and 0 will become 1\n  };\n\n  return &lt;button onClick={handleIncrement}&gt;Count: {count}&lt;/button&gt;;\n}\n\nexport default Counter;\n</code></pre> <ul> <li>When handleIncrement runs, setCount(count + 1) is called twice.</li> <li> <p>Since count holds the same value in both calls, both set it to 1 instead of 2.</p> </li> <li> <p>How Functional updates help avoid stale state issues.   we use <code>setCount(prevCount =&gt; prevCount + 1);</code> to solve this issue</p> </li> </ul> <pre><code>const handleIncrement = () =&gt; {\n  setCount(prevCount =&gt; prevCount + 1);\n  setCount(prevCount =&gt; prevCount + 1); // \u2705 Correctly increments by 2\n};\n</code></pre> <ul> <li>The updater function <code>(prevCount =&gt; prevCount + 1)</code> receives the latest state.   React batches updates and ensures each prevCount reflects the most recent state.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#3class-component-state-vs-functional-component-state","title":"3.Class Component State vs Functional Component State","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#managing-state-in-class-components","title":"Managing State in Class Components","text":"<ul> <li>In class components, state is managed using the <code>this.state</code> object and updated using the <code>this.setState</code> method. This approach requires binding methods when using event handlers.</li> </ul> <pre><code>import React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment = () =&gt; {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return &lt;button onClick={this.increment}&gt;Count: {this.state.count}&lt;/button&gt;;\n  }\n}\n</code></pre>"},{"location":"react/5.React%20State%20and%20Data%20Management/#managing-state-in-functional-components-with-hooks","title":"Managing State in Functional Components with Hooks","text":"<ul> <li>Functional components use the <code>useState</code> hook to manage state, eliminating the need for <code>this.state</code> and making code cleaner and more concise.</li> </ul> <pre><code>import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Count: {count}&lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"react/5.React%20State%20and%20Data%20Management/#migrating-from-class-to-functional-components","title":"Migrating from Class to Functional Components","text":"<ul> <li>Replace <code>this.state</code> with <code>useState</code> and <code>this.setState</code> with the state updater function.</li> <li>Remove the constructor and this references.</li> <li>Also no need for event binding atall.</li> <li>No need to use lifecycle methods (componentDidMount, componentDidUpdate) instead uses useEffect Hook.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#4state-updates-and-batch-processing","title":"4.State Updates and Batch Processing","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#setstate-behavior-and-batch-updates","title":"setState Behavior and Batch Updates","text":"<ul> <li>React optimizes performance by batching multiple state updates into a single render.</li> <li>This prevents unnecessary re-renders and enhances application efficiency.</li> </ul> <pre><code>const handleClick = () =&gt; {\n  setCount(count + 1);\n  setCount(count + 1); // \u274c Only increments by 1, not 2\n};\n</code></pre> <ul> <li>React batches state updates in event handlers to optimize performance.</li> <li>When setCount(count + 1) runs twice, React sees them as the same state update and merges them.</li> <li>The component only re-renders once with the last state update.</li> </ul> <p>React groups these updates into one batch, applying only the final computed state.</p>"},{"location":"react/5.React%20State%20and%20Data%20Management/#optimizing-state-changes","title":"Optimizing State Changes","text":"<ul> <li>To correctly update state multiple times within an event handler, use the functional form of setState, which ensures updates are based on the most recent state.</li> </ul> <pre><code>setCount(prev =&gt; prev + 1);\nsetCount(prev =&gt; prev + 1); // \u2705 Correctly increments by 2\n</code></pre> <ul> <li>The functional updater (prevCount =&gt; prevCount + 1) ensures each setCount call gets the latest state.</li> <li>React batches state updates but correctly applies them sequentially.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#how-react-18-improves-state-updates","title":"How React 18 Improves State Updates","text":"<ul> <li>Before React 18, React only batched state updates inside event handlers.</li> <li>State updates in asynchronous code (e.g., timeouts, promises) were processed individually, causing multiple re-renders.</li> </ul> <pre><code>setTimeout(() =&gt; {\n  setCount(count + 1);\n  setCount(count + 1); // \u2705 Used to trigger two re-renders before React 18\n}, 1000);\n</code></pre> <ul> <li>React 18 improves automatic batching of updates, reducing unnecessary renders.</li> </ul> <pre><code>setTimeout(() =&gt; {\n  setCount(prev =&gt; prev + 1);\n  setCount(prev =&gt; prev + 1); // \u2705 Now correctly increments by 2 in React 18\n}, 1000);\n</code></pre>"},{"location":"react/5.React%20State%20and%20Data%20Management/#5lifting-state-up-for-shared-state-management","title":"5.Lifting State Up for Shared State Management","text":"<ul> <li>In React, lifting state up means moving state to the closest common ancestor of components that need to share it.</li> <li>This helps avoid redundant state and ensures consistent data flow.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#why-lift-state-up","title":"Why Lift State Up?","text":"<ul> <li>Only store state in the closest common ancestor component if multiple components need access to it.</li> <li>\u2705 Prevents duplicate state in multiple components.</li> <li>\u2705 Ensures synchronized data across components.</li> <li>\u2705 Simplifies state management by keeping it centralized.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#sharing-state-between-components","title":"Sharing State Between Components","text":"<ul> <li>Imagine two sibling components needing access to the same state.</li> <li> <p>Instead of keeping separate state in each component, we lift it to a common parent.</p> </li> <li> <p>Before: Separate State in Each Component (Problem)</p> </li> </ul> <pre><code>function ComponentA() {\n  const [text, setText] = useState(\"\");\n  return &lt;input value={text} onChange={(e) =&gt; setText(e.target.value)} /&gt;;\n}\n\nfunction ComponentB() {\n  const [text, setText] = useState(\"\");\n  return &lt;p&gt;{text}&lt;/p&gt;;\n}\n</code></pre> <ul> <li> <p>Issue: Both components have their own text state, leading to unsynchronized data.</p> </li> <li> <p>After: Lifting State to a Common Parent (Solution)</p> </li> </ul> <pre><code>function Parent() {\n  const [text, setText] = useState(\"\");\n\n  return (\n    &lt;div&gt;\n      &lt;InputField value={text} onChange={setText} /&gt;\n      &lt;DisplayText value={text} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction InputField({ value, onChange }) {\n  return &lt;input value={value} onChange={(e) =&gt; onChange(e.target.value)} /&gt;;\n}\n\nfunction DisplayText({ value }) {\n  return &lt;p&gt;{value}&lt;/p&gt;;\n}\n</code></pre> <ul> <li>\u2705 Now, both components share the same state from Parent, ensuring data stays in sync.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#when-to-use-context-api-vs-lifting-state-up","title":"When to Use Context API vs Lifting State Up","text":"<ul> <li>Use lifting state up for local state sharing; use Context for global state needs.</li> <li> <p>Choosing between lifting state up and the Context API depends on how widely the state is shared and how deep it needs to be passed in the component tree.</p> </li> <li> <p>Lifting State Up (For Local State Sharing)</p> <ul> <li>\u2705 Best for state shared between a few components that are closely related like sibling components.</li> <li>\u2705 Avoids unnecessary complexity by keeping state in the nearest common ancestor.</li> <li>\u2705 Prevents prop drilling for shallow component hierarchies.</li> </ul> </li> <li> <p>Context API (For Global or Deeply Nested State)</p> <ul> <li>\u2705 Useful when many components across different levels need access to the same state.</li> <li>\u2705 Eliminates prop drilling, making deeply nested components easier to manage.</li> <li>\u2705 Best for theme management, authentication, and global application state.</li> </ul> </li> </ul> <pre><code>import { createContext, useContext, useState } from \"react\";\n\n// Create Context\nconst ThemeContext = createContext();\n\nfunction App() {\n  const [theme, setTheme] = useState(\"light\");\n\n  return (\n    &lt;ThemeContext.Provider value={{ theme, setTheme }}&gt;\n      &lt;Toolbar /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nfunction Toolbar() {\n  return &lt;ThemedButton /&gt;;\n}\n\nfunction ThemedButton() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    &lt;button onClick={() =&gt; setTheme(theme === \"light\" ? \"dark\" : \"light\")}&gt;\n      Current Theme: {theme}\n    &lt;/button&gt;\n  );\n}\n</code></pre> <p>Best for: Large applications where state is shared across multiple components at different levels.</p> <ul> <li> <p>context api in a child component</p> <ul> <li>you cannot define a Context Provider inside a child component and then pass it up to a parent component.</li> <li>React\u2019s data flow is unidirectional (from parent to child), meaning that context providers should be defined at a higher level in the component tree.</li> </ul> </li> <li> <p>Why Context API Must Be Defined in a Parent Component</p> <ul> <li>Context Providers Wrap Components<ul> <li>The Provider must be at a higher level to supply data to its children.</li> <li>Child components can only consume context that is provided above them.</li> </ul> </li> <li>React\u2019s Unidirectional Data Flow<ul> <li>Data flows down from parent to child, not the other way around.</li> <li>A child component cannot provide context to a parent because the parent renders before the child.</li> </ul> </li> </ul> </li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#6derived-state-from-props","title":"6.Derived State from Props","text":"<ul> <li>Derived state from props refers to computing state based on received props rather than storing and managing it independently.</li> <li> <p>This is useful when the component's state needs to be updated based on changes in props.</p> </li> <li> <p>Sometimes, a component receives props that influence its internal state.</p> </li> <li>Instead of storing the prop directly as state (which can cause issues), we derive the state dynamically based on props.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#avoiding-anti-patterns","title":"Avoiding Anti-Patterns","text":"<p>Avoid copying props into state unless transformation is required.</p> <pre><code>function UserProfile({ name }) {\n  const [userName, setUserName] = useState(name); // Anti-pattern\n\n  useEffect(() =&gt; {\n    setUserName(name);\n  }, [name]); // Updating state when props change\n\n  return &lt;h2&gt;{userName}&lt;/h2&gt;;\n}\n</code></pre> <ul> <li>Why is this an Anti-Pattern?</li> <li>Redundant state: name is already available as a prop, so storing it in state is unnecessary.</li> <li>Unnecessary re-renders: When name changes, useEffect updates userName, causing a re-render that could be avoided. Better Approach: Use Props Directly</li> </ul> <pre><code>function UserProfile({ name }) {\n  return &lt;h2&gt;{name}&lt;/h2&gt;;\n}\n</code></pre> <ul> <li>No need for state since the value can be directly used from props.</li> <li>Avoids extra re-renders by eliminating unnecessary state updates.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#when-to-derive-state-from-props","title":"When to Derive State from Props","text":"<p>Derived state is useful when:</p> <ul> <li>The state requires transformation based on props.</li> <li>The state needs to be modified by user interactions but should reset when props change.</li> </ul> <pre><code>function PriceDisplay({ price }) {\n  const formattedPrice = `$${price.toFixed(2)}`; // Derived state from props\n  return &lt;p&gt;Price: {formattedPrice}&lt;/p&gt;;\n}\n</code></pre> <ul> <li>Here, price is transformed into a formatted string.</li> <li>No need to store formattedPrice in state because it can be computed directly from price.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#memoization-for-derived-state","title":"Memoization for Derived State","text":"<ul> <li> <p>If deriving state involves expensive calculations, memoization with <code>useMemo</code> can improve performance.</p> </li> <li> <p>Expensive Computation without Memoization</p> </li> </ul> <pre><code>function LargeList({ items }) {\n  const sortedItems = items.sort((a, b) =&gt; a.localeCompare(b)); // Sorting on every render\n  return &lt;ul&gt;{sortedItems.map(item =&gt; &lt;li key={item}&gt;{item}&lt;/li&gt;)}&lt;/ul&gt;;\n}\n</code></pre> <ul> <li> <p>Problem: Sorting happens on every render, even if items hasn\u2019t changed.</p> </li> <li> <p>Optimized Approach with useMemo   Use <code>useMemo</code> to optimize expensive calculations.</p> </li> </ul> <pre><code>import { useMemo } from 'react';\n\nfunction LargeList({ items }) {\n  const sortedItems = useMemo(() =&gt; {\n    return [...items].sort((a, b) =&gt; a.localeCompare(b));\n  }, [items]); // Recomputes only when `items` changes\n\n  return &lt;ul&gt;{sortedItems.map(item =&gt; &lt;li key={item}&gt;{item}&lt;/li&gt;)}&lt;/ul&gt;;\n}\n</code></pre> <p>Why useMemo Helps?</p> <ul> <li>Prevents unnecessary re-sorting on every render.</li> <li>Only recomputes when items changes, improving performance.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#7react-context-api-for-global-state-management","title":"7.React Context API for Global State Management","text":"<ul> <li>The React Context API is a built-in way to manage global state without prop drilling.</li> <li>It allows you to share data across multiple components without passing props manually at every level.</li> </ul> <p>Why Use Context API?</p> <ul> <li>\u2705 Avoids prop drilling \u2013 No need to pass props through multiple components.</li> <li>\u2705 Simplifies global state management \u2013 Ideal for themes, authentication, and user preferences.</li> <li>\u2705 Built into React \u2013 No need for external libraries like Redux for simple state sharing.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#creating-and-using-context-providers","title":"Creating and Using Context Providers","text":"<ul> <li>A Provider wraps your components and provides state to them.</li> </ul> <pre><code>import { createContext, useState } from \"react\";\n\n// 1\ufe0f\u20e3 Create a Context\nconst ThemeContext = createContext();\n\n// 2\ufe0f\u20e3 Create a Provider Component\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(\"light\");\n\n  return (\n    &lt;ThemeContext.Provider value={{ theme, setTheme }}&gt;\n      {children}\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nexport { ThemeContext, ThemeProvider };\n</code></pre> <ul> <li> <p>\u2705 Now, any component inside <code>&lt;ThemeProvider&gt;</code> can access theme and setTheme.</p> </li> <li> <p>To consume the context, use the useContext hook.</p> </li> </ul> <pre><code>import { useContext } from \"react\";\nimport { ThemeContext } from \"./ThemeProvider\";\n\nfunction ThemedButton() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    &lt;button \n      onClick={() =&gt; setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      style={{ background: theme === \"light\" ? \"#fff\" : \"#333\", color: theme === \"light\" ? \"#000\" : \"#fff\" }}\n    &gt;\n      Toggle Theme\n    &lt;/button&gt;\n  );\n}\n</code></pre> <ul> <li> <p>\u2705 The button updates and reflects the theme without needing props!</p> </li> <li> <p>To make sure all components can access the theme, wrap your app with <code>&lt;ThemeProvider&gt;</code>.</p> </li> </ul> <pre><code>import { ThemeProvider } from \"./ThemeProvider\";\nimport ThemedButton from \"./ThemedButton\";\n\nfunction App() {\n  return (\n    &lt;ThemeProvider&gt;\n      &lt;ThemedButton /&gt;\n    &lt;/ThemeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre> <ul> <li>\u2705 Now, any component inside ThemeProvider can access the theme state.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#avoiding-unnecessary-renders-with-usememo","title":"Avoiding Unnecessary Renders with useMemo","text":"<ul> <li>By default, every time a provider's state updates, all consuming components re-render. To avoid unnecessary renders, use useMemo:</li> </ul> <pre><code>import { createContext, useState, useMemo } from \"react\";\n\nconst ThemeContext = createContext();\n\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(\"light\");\n\n  // Memoizing the context value\n  const contextValue = useMemo(() =&gt; ({ theme, setTheme }), [theme]);\n\n  return (\n    &lt;ThemeContext.Provider value={contextValue}&gt;\n      {children}\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nexport { ThemeContext, ThemeProvider };\n</code></pre> <ul> <li>\u2705 Reduces unnecessary re-renders and improves performance!</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#when-to-use-context-vs-redux","title":"When to Use Context vs Redux","text":"<ul> <li>Use Context for simple small-scale global state like theme, auth, language and Redux for complex state logic.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#8advanced-state-management-patterns","title":"8.Advanced State Management Patterns","text":"<ul> <li>As React applications grow, managing state efficiently becomes more complex.</li> <li>How to use advanced patterns like useReducer, custom hooks, and comparisons of state management libraries.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#state-reducers-with-usereducer-hook","title":"State Reducers with useReducer Hook","text":"<ul> <li>The <code>useReducer</code> hook is an alternative to useState, useful for managing complex state logic (e.g., forms, counters, state transitions).</li> </ul> <p>Why Use useReducer Instead of useState?</p> <ul> <li>Better for complex state logic</li> <li>Helps when multiple state values are interdependent</li> <li>Provides predictable state updates</li> </ul> <pre><code>import { useReducer } from \"react\";\n\nconst reducer = (state, action) =&gt; {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    case \"reset\":\n      return { count: 0 };\n    default:\n      return state;\n  }\n};\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {state.count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"increment\" })}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"decrement\" })}&gt;-&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"reset\" })}&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre> <ul> <li>\u2705 Using useReducer keeps logic centralized and manageable.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#using-custom-hooks-for-state-management","title":"Using Custom Hooks for State Management","text":"<ul> <li>Custom hooks allow us to encapsulate reusable state logic and make components cleaner.</li> </ul> <pre><code>import { useState } from \"react\";\n\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  const increment = () =&gt; setCount(c =&gt; c + 1);\n  const decrement = () =&gt; setCount(c =&gt; c - 1);\n  const reset = () =&gt; setCount(initialValue);\n\n  return { count, increment, decrement, reset };\n}\n\n// Usage in a Component\nfunction Counter() {\n  const { count, increment, decrement, reset } = useCounter();\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={increment}&gt;+&lt;/button&gt;\n      &lt;button onClick={decrement}&gt;-&lt;/button&gt;\n      &lt;button onClick={reset}&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre> <ul> <li>\u2705 Now, useCounter can be reused in multiple components without rewriting logic.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#comparison-of-context-api-vs-redux-vs-zustand","title":"Comparison of Context API vs Redux vs Zustand","text":"Feature Context API Redux Zustand Complexity Low High Medium Performance Moderate Optimized Optimized Boilerplate Low High Low <ul> <li>\u2705 Use Context API for small to medium applications (e.g., themes, auth).</li> <li>\u2705 Use Redux for large, complex applications with shared state logic.</li> <li>\u2705 Use Zustand for a simpler and scalable alternative to Redux.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#summary","title":"Summary","text":"<ul> <li> <p>Understanding State in React</p> <ul> <li>State: A component's internal data that can change over time.</li> <li>Props: Data passed from parent to child components.</li> <li>Immutable State: State should not be modified directly; use state updater functions instead.</li> </ul> </li> <li> <p>useState Hook for State Management</p> <ul> <li>useState: A React Hook that allows functional components to manage local state.</li> <li>Updating State: Always use the setter function (setState) instead of modifying state directly.</li> <li>Functional Updates: Use a function inside setState to ensure the latest state is used.</li> </ul> </li> <li> <p>Class Component State vs Functional Component State</p> <ul> <li>Class Component State: Managed using this.state and updated via this.setState.</li> <li>Functional Component State: Managed using Hooks like useState.</li> <li>Migration: Convert class components to functional components using Hooks.</li> </ul> </li> <li> <p>State Updates and Batch Processing</p> <ul> <li>Batching: React optimizes multiple state updates into a single re-render.</li> <li>setState Behavior: setState updates asynchronously, so state may not update immediately.</li> <li>React 18 Batch Updates: React 18 improves automatic batching for performance.</li> </ul> </li> <li> <p>Lifting State Up for Shared State Management</p> <ul> <li>Lifting State Up: Move state to a common ancestor to share it between components.</li> <li>Avoid Redundant State: Store state only where necessary to prevent unnecessary complexity.</li> <li>Context API vs Lifting State: Use Context for global state; lift state up for local sharing.</li> </ul> </li> <li> <p>Derived State from Props</p> <ul> <li>Derived State: State computed from props instead of being managed separately.</li> <li>Avoiding Anti-Patterns: Do not store props in state unless transformation is needed.</li> <li>Memoization: Use useMemo to optimize expensive calculations based on props.</li> </ul> </li> <li> <p>React Context API for Global State Management</p> <ul> <li>Context API: Provides a way to share state globally without prop drilling.</li> <li>Context Providers: Components that wrap children to provide shared state.</li> <li>useMemo in Context: Prevents unnecessary re-renders when context values change.</li> <li>Context vs Redux: Context is simpler, Redux is better for complex state management.</li> </ul> </li> <li> <p>Advanced State Management Patterns</p> <ul> <li>useReducer: A Hook that manages complex state logic with a reducer function.</li> <li>Custom Hooks: Encapsulate state logic into reusable functions.</li> <li>Redux: A global state management library with a centralized store.</li> <li>Zustand: A lightweight alternative to Redux for managing global state.</li> </ul> </li> </ul>"},{"location":"react/6.Handling%20Events%20in%20React/","title":"Handling Events in React","text":"<p>React provides a declarative way to handle user interactions using event listeners in JSX. This covers various aspects of handling events, including adding event listeners, using event handler functions, understanding synthetic events, and more.</p>"},{"location":"react/6.Handling%20Events%20in%20React/#1-adding-event-listeners-in-jsx","title":"1. Adding Event Listeners in JSX","text":"<ul> <li>In React, event handlers are specified using camelCase properties inside JSX elements.</li> <li>Instead of <code>onclick</code> or <code>onkeypress</code> like in vanilla JavaScript, React uses <code>onClick</code>, <code>onKeyPress</code>, etc.</li> </ul>"},{"location":"react/6.Handling%20Events%20in%20React/#handling-click-events","title":"Handling Click Events","text":"<ul> <li>Click events are used for button clicks and other interactions:</li> </ul> <pre><code>import React from \"react\";\n\nfunction ClickButton() {\n  function handleClick() {\n    alert(\"Button Clicked!\");\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n\nexport default ClickButton;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#handling-keyboard-events","title":"Handling Keyboard Events","text":"<ul> <li>Keyboard events are useful for capturing user input from text fields and handling shortcuts:</li> </ul> <pre><code>function KeyPressHandler() {\n  function handleKeyPress(event) {\n    alert(`Key Pressed: ${event.key}`);\n  }\n\n  return &lt;input type=\"text\" onKeyPress={handleKeyPress} placeholder=\"Type something...\" /&gt;;\n}\n\nexport default KeyPressHandler;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#handling-form-events","title":"Handling Form Events","text":"<ul> <li>Forms require event handling for submission and input changes:</li> </ul> <pre><code>function FormHandler() {\n  function handleSubmit(event) {\n    event.preventDefault();\n    alert(\"Form Submitted!\");\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"text\" placeholder=\"Enter name\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default FormHandler;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#2-handling-events-with-functions","title":"2. Handling Events with Functions","text":"<p>React allows event handlers to be defined as separate functions or inline.</p>"},{"location":"react/6.Handling%20Events%20in%20React/#inline-event-handlers","title":"Inline Event Handlers","text":"<ul> <li>You can define event handlers directly inside JSX:</li> </ul> <pre><code>&lt;button onClick={() =&gt; alert(\"Button Clicked!\")}&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#function-references-as-event-handlers","title":"Function References as Event Handlers","text":"<ul> <li>Using function references keeps the code cleaner and avoids unnecessary re-creation of functions on each render:</li> </ul> <pre><code>function handleClick() {\n  alert(\"Button Clicked!\");\n}\n\n&lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#3-synthetic-events-in-react","title":"3. Synthetic Events in React","text":""},{"location":"react/6.Handling%20Events%20in%20React/#what-are-synthetic-events","title":"What are Synthetic Events?","text":"<ul> <li>Synthetic events in React are lightweight wrappers around native events.</li> <li>They standardize event behavior across different browsers, making React applications more consistent.</li> <li>Synthetic events combine all browser-specific event handling into a single API, ensuring better performance and reducing memory usage.</li> </ul>"},{"location":"react/6.Handling%20Events%20in%20React/#differences-between-synthetic-and-native-events","title":"Differences Between Synthetic and Native Events","text":"<ul> <li>A native event is the default event system used by browsers.</li> <li>Here, the event is directly managed by the browser (The browser\u2019s DOM event system)</li> <li>It comes from the DOM (Document Object Model) and has different behaviors in different browsers.</li> </ul> <pre><code>&lt;button id=\"myButton\"&gt;Click Me&lt;/button&gt;\n&lt;script&gt;\n  document.getElementById(\"myButton\").addEventListener(\"click\", function(event) {\n    console.log(\"Native Event:\", event); // Logs a MouseEvent object\n  });\n&lt;/script&gt;\n</code></pre> <ul> <li>A synthetic event is a wrapper around native events in React.(React\u2019s event system)</li> <li>It standardizes event behavior across all browsers, making sure that the event properties and behaviors work the same everywhere.</li> <li>Here, React\u2019s Synthetic Event ensures that event properties (like event.target and event.type) work the same in all browsers.</li> </ul> <pre><code>function SyntheticExample() {\n  function handleClick(event) {\n    // Not a raw browser event\n    console.log(\"Synthetic Event:\", event); // Logs a SyntheticEvent object\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#eventpersist","title":"event.persist()","text":"<ul> <li>Synthetic events are pooled and reused to improve performance.</li> <li>Accessing event properties asynchronously (e.g., in a setTimeout) can cause unexpected behavior because the synthetic event object may be reused.</li> <li>To persist event properties, you need to use event.persist().</li> <li>May be lost unless event.persist() is used</li> </ul> <pre><code>function SyntheticExample() {\n  function handleClick(event) {\n    console.log(event.type); // \"click\"\n    setTimeout(() =&gt; {\n      console.log(event.type); // Undefined if event.persist() is not called\n    }, 1000);\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n</code></pre> <pre><code>function PersistentSyntheticExample() {\n  function handleClick(event) {\n    event.persist();\n    setTimeout(() =&gt; {\n      console.log(event.type); // \"click\"\n    }, 1000);\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#4-event-binding-methods","title":"4. Event Binding Methods","text":""},{"location":"react/6.Handling%20Events%20in%20React/#using-arrow-functions","title":"Using Arrow Functions","text":"<p>Arrow functions automatically bind <code>this</code>, making them useful in class components:</p> <pre><code>class ArrowExample extends React.Component {\n  handleClick = () =&gt; {\n    alert(\"Clicked!\");\n  };\n\n  render() {\n    return &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt;;\n  }\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#using-bind-in-constructor","title":"Using <code>bind()</code> in Constructor","text":"<ul> <li>Explicitly binding functions in the constructor prevents performance issues caused by creating new functions on each render:</li> </ul> <pre><code>class BindExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    alert(\"Clicked!\");\n  }\n\n  render() {\n    return &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt;;\n  }\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Using arrow functions inside JSX creates a new function every time the component renders. In large applications, this can impact performance.</li> </ul>"},{"location":"react/6.Handling%20Events%20in%20React/#5-passing-arguments-to-event-handlers","title":"5. Passing Arguments to Event Handlers","text":""},{"location":"react/6.Handling%20Events%20in%20React/#using-inline-functions","title":"Using Inline Functions","text":"<ul> <li>Inline functions allow passing parameters directly:</li> </ul> <pre><code>&lt;button onClick={(event) =&gt; handleClick(event, \"Hello\")}&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#using-bind-method","title":"Using <code>bind()</code> Method","text":"<ul> <li>Another way to pass arguments is using <code>bind()</code>:</li> </ul> <pre><code>&lt;button onClick={handleClick.bind(this, \"Hello\")}&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#6-preventing-default-behavior-and-event-bubbling","title":"6. Preventing Default Behavior and Event Bubbling","text":""},{"location":"react/6.Handling%20Events%20in%20React/#preventing-default-actions","title":"Preventing Default Actions","text":"<ul> <li>To prevent default behavior (e.g., stopping a link from navigating):</li> </ul> <pre><code>function LinkHandler() {\n  function handleClick(event) {\n    event.preventDefault();\n    alert(\"Link Clicked, but prevented!\");\n  }\n\n  return &lt;a href=\"https://example.com\" onClick={handleClick}&gt;Click Me&lt;/a&gt;;\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#stopping-event-propagation","title":"Stopping Event Propagation","text":"<ul> <li>Event propagation can be stopped using <code>event.stopPropagation()</code>:</li> </ul> <pre><code>function Parent() {\n  function handleParentClick() {\n    alert(\"Parent Clicked!\");\n  }\n\n  function handleChildClick(event) {\n    event.stopPropagation();\n    alert(\"Child Clicked!\");\n  }\n\n  return (\n    &lt;div onClick={handleParentClick}&gt;\n      &lt;button onClick={handleChildClick}&gt;Click Me&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#event-delegation-in-react","title":"Event Delegation in React","text":"<ul> <li>Event delegation allows handling events on a parent element instead of multiple child elements:</li> </ul> <pre><code>function ListHandler() {\n  function handleClick(event) {\n    if (event.target.tagName === \"LI\") {\n      alert(`Clicked on ${event.target.innerText}`);\n    }\n  }\n\n  return (\n    &lt;ul onClick={handleClick}&gt;\n      &lt;li&gt;Item 1&lt;/li&gt;\n      &lt;li&gt;Item 2&lt;/li&gt;\n      &lt;li&gt;Item 3&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre>"},{"location":"react/7.React%20Hooks/","title":"React Hooks (Fundamentals &amp; Advanced)","text":""},{"location":"react/7.React%20Hooks/#1introduction-to-hooks","title":"1.Introduction to Hooks","text":""},{"location":"react/7.React%20Hooks/#why-hooks-were-introduced","title":"Why Hooks Were Introduced","text":"<p>Before React Hooks, functional components were stateless, and all stateful logic had to be handled in class components. Hooks allow functional components to use state and lifecycle features, leading to:</p> <ul> <li>Better Code Reusability: Hooks let you extract component logic into reusable functions.</li> <li>Easier State Management: Avoid complex class-based lifecycle methods.</li> <li>Reduced Boilerplate: No need to bind <code>this</code> in class components.</li> </ul>"},{"location":"react/7.React%20Hooks/#component-lifecycle-status","title":"Component LifeCycle Status","text":"<ul> <li>Lifecycle methods manage a component\u2019s behavior at different stages (mounting, updating, unmounting).</li> <li> <p>Let's compare how lifecycle works in JavaScript, React class components, and functional components using Hooks.</p> </li> <li> <p>Counter in Vanilla JavaScript</p> <ul> <li>In plain JavaScript, there's no built-in state management like React.</li> <li>You typically manage state using variables, functions, and event listeners.<ul> <li>window.onload \u2192 Runs when the page loads</li> <li>setInterval / setTimeout \u2192 Mimic state updates</li> <li>window.onunload \u2192 Runs when the page closes</li> </ul> </li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Lifecycle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    function createComponent() {\n      let count = 0;\n      const app = document.getElementById(\"app\");\n\n      function render() {\n        app.innerHTML = `&lt;p&gt;Count: ${count}&lt;/p&gt;&lt;button id=\"btn\"&gt;Increment&lt;/button&gt;`;\n        document.getElementById(\"btn\").addEventListener(\"click\", increment);\n      }\n\n      function increment() {\n        count++;\n        render();\n      }\n\n      // Simulating component mount\n      window.onload = () =&gt; {\n        console.log(\"Component Mounted\");\n        render();\n      };\n\n      // Simulating component unmount\n      window.onunload = () =&gt; {\n        console.log(\"Component Unmounted\");\n      };\n    }\n\n    createComponent();\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Problems in Vanilla JS:</p> <ul> <li>Manual DOM manipulation \u2192 Hard to maintain</li> <li>Global event listeners \u2192 Risk of memory leaks</li> <li>No clear lifecycle separation</li> </ul> </li> <li> <p>State and Lifecycle in React Class Components</p> <ul> <li>React introduced state and lifecycle methods to handle dynamic data updates and component behavior over time.</li> <li><code>State in Class Components</code><ul> <li>State is a built-in object that allows a component to store and manage data dynamically.</li> <li>It is updated using <code>setState()</code></li> </ul> </li> <li><code>Lifecycle Methods in Class Components</code><ul> <li>Lifecycle methods help execute code at specific points in a component\u2019s lifecycle:<ul> <li><code>componentDidMount()</code>: Runs after component mounts (good for API calls).</li> <li><code>componentDidUpdate()</code>: Runs when the component updates.</li> <li><code>componentWillUnmount()</code>: Runs before component is destroyed.</li> </ul> </li> </ul> </li> </ul> <pre><code>import React, { Component } from \"react\";\n\nclass LifecycleDemo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    console.log(\"Constructor: Component is initialized\");\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount: Component mounted\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"componentDidUpdate: State updated\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount: Cleanup before unmounting\");\n  }\n\n  increment = () =&gt; {\n    this.setState((prevState) =&gt; ({ count: prevState.count + 1 }));\n  };\n\n  render() {\n    console.log(\"Render: Component is rendering\");\n    return (\n      &lt;div&gt;\n        &lt;p&gt;Count: {this.state.count}&lt;/p&gt;\n        &lt;button onClick={this.increment}&gt;Increment&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default LifecycleDemo;\n</code></pre> </li> <li> <p>How it happens</p> <ul> <li>Mounting: constructor() \u2192 componentDidMount()</li> <li>Updating: render() \u2192 componentDidUpdate()</li> <li>Unmounting: componentWillUnmount()</li> </ul> </li> <li> <p>State and Lifecycle in React Hooks (Functional Components)</p> <ul> <li>React Hooks replace class-based state and lifecycle methods in functional components.</li> <li>Key Hooks for State and Lifecycle<ul> <li><code>useState()</code>: Manages state.</li> <li><code>useEffect()</code>: Handles lifecycle events like <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code>.</li> </ul> </li> </ul> <pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction LifecycleDemo() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    console.log(\"Component Mounted\");\n\n    return () =&gt; {\n      console.log(\"Component Will Unmount\");\n    };\n  }, []); // Runs once on mount &amp; cleanup on unmount\n\n  useEffect(() =&gt; {\n    console.log(\"Component Updated: Count changed\");\n  }, [count]); // Runs when `count` changes\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default LifecycleDemo;\n</code></pre> </li> </ul>"},{"location":"react/7.React%20Hooks/#rules-of-hooks","title":"Rules of Hooks","text":"<ul> <li> <p>Only Call Hooks at the Top Level: Do not use hooks inside loops, conditions, or nested functions.</p> <pre><code>function Counter() {\n  const [count, setCount] = useState(0); // Hook at the top level\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>function Counter() {\n  const [count, setCount] = useState(0);\n\n  if (count &gt; 5) {\n    const [highCount, setHighCount] = useState(true); // \u274c Hook inside condition\n  }\n\n  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click&lt;/button&gt;;\n}\n</code></pre> </li> <li> <p>Only Call Hooks from React Functions: Hooks should be used inside React function components or custom hooks.</p> <pre><code>function useCounter() { // \u2705 Custom Hook\n  const [count, setCount] = useState(0);\n  return { count, setCount };\n}\n\nfunction Counter() { // \u2705 Hook inside a React component\n  const { count, setCount } = useCounter();\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>function notAComponent() {\n  const [count, setCount] = useState(0); // \u274c Hook inside a normal function\n}\n</code></pre> </li> </ul>"},{"location":"react/7.React%20Hooks/#migrating-from-class-components-to-hooks","title":"Migrating from Class Components to Hooks","text":"<ul> <li>Example of converting a class component to a functional component with hooks:</li> </ul> <pre><code>// Class Component\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment = () =&gt; {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;Count: {this.state.count}&lt;/p&gt;\n        &lt;button onClick={this.increment}&gt;Increment&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <pre><code>// Functional Component with Hooks\nimport { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/7.React%20Hooks/#2usestate-hook","title":"2.useState Hook","text":"<p>The useState hook is used to manage state in functional components.</p>"},{"location":"react/7.React%20Hooks/#initializing-state","title":"Initializing State","text":"<ul> <li>When using useState, you provide an initial value for the state variable.</li> <li>This value is used only during the first render.</li> </ul> <pre><code>const [count, setCount] = useState(0);\n</code></pre>"},{"location":"react/7.React%20Hooks/#updating-state-correctly","title":"Updating State Correctly","text":"<ul> <li>State updates do not merge automatically in functional components (unlike class components).</li> <li>You must ensure you update the state properly.</li> </ul> <pre><code>setCount(count + 1); // Incorrect Way \u274c\n</code></pre> <ul> <li>Why is this bad?<ul> <li>React does not batch updates when called multiple times in a single render cycle.</li> <li>If multiple updates rely on the previous state, they may overwrite each other.</li> </ul> </li> </ul>"},{"location":"react/7.React%20Hooks/#functional-updates","title":"Functional Updates","text":"<p>If the new state depends on the previous state, use a function inside setState. This ensures correct updates when state updates occur asynchronously.</p> <pre><code>setCount(prevCount =&gt; prevCount + 1);\n</code></pre> <ul> <li>\u2705 Why is this better?<ul> <li>prevCount always holds the latest state value.</li> <li>Ensures correct updates even if setCount is called multiple times.</li> </ul> </li> </ul> <pre><code>const handleClick = () =&gt; {\n  setCount(prev =&gt; prev + 1);\n  setCount(prev =&gt; prev + 1);\n  setCount(prev =&gt; prev + 1);\n};\n</code></pre>"},{"location":"react/7.React%20Hooks/#lazy-initialization","title":"Lazy Initialization","text":"<ul> <li>If the initial state requires an expensive computation, you can pass a function to useState.</li> <li>This function runs only once, during the initial render.</li> </ul> <pre><code>const [count, setCount] = useState(() =&gt; {\n  return expensiveCalculation();\n});\n</code></pre> <pre><code>function expensiveCalculation() {\n  console.log(\"Running expensive computation...\");\n  return 100; // Assume this is an expensive operation\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(() =&gt; expensiveCalculation());\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre>"},{"location":"react/7.React%20Hooks/#3useeffect-hook","title":"3.useEffect Hook","text":"<ul> <li> <p>The useEffect hook allows you to perform side effects in function components, such as:</p> <ul> <li>Fetching data when a component is mounted or updated</li> <li>Subscribing to events when a component is mounted or updated</li> <li>Updating the DOM when a component is mounted or updated</li> <li>Setting up timers when a component is mounted or updated</li> </ul> </li> <li> <p>Component Lifecycle - initialization, Mounting, Updation, Unmounting. <code>useEffect(setup, dependencies)</code></p> </li> <li> <p>After mounting     Empty array as dependency []</p> <pre><code>useEffect(()=&gt;{\n  console.log(\"Counter Mounted\");\n}, [])\n</code></pre> </li> <li> <p>After Unmounting     Empty array as dependency [] also known as cleanup function</p> <pre><code>useEffect(()=&gt;{\n  console.log(\"Counter Mounted\");\n  // when return a function it will run at the time of unmount only\n  return function () {\n    console.log(\"Unmount counter\");\n  }\n}, [])\n</code></pre> </li> <li> <p>After Updation     State as dependency [state]</p> <pre><code>useEffect(()=&gt; {\n  console.log(\"Counter Updated\");\n  // when return a fucntion with dependency array it will run at the time of unmount at the prevState unmount.\n  return () =&gt; {\n    console.log(\"Counter UseEffect Return\")\n  }\n},[count])\n</code></pre> </li> </ul>"},{"location":"react/7.React%20Hooks/#running-side-effects-after-rendering","title":"Running Side Effects After Rendering","text":"<ul> <li>By default, useEffect runs after every render.</li> <li>It can be used to synchronize state with external systems like:<ul> <li>Updating the document title</li> <li>Fetching data</li> <li>Interacting with browser APIs</li> </ul> </li> </ul> <pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    document.title = `Count: ${count}`;\n  }, [count]); // Runs when `count` changes\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre> <ul> <li>The effect updates the document title whenever count changes.</li> <li>Dependency array [count] ensures the effect runs only when count updates, not on every render.</li> </ul>"},{"location":"react/7.React%20Hooks/#cleaning-up-effects","title":"Cleaning Up Effects","text":"<ul> <li> <p>When using effects like timers, event listeners, or subscriptions, you should  clean them up to prevent:</p> <ul> <li>Memory leaks (especially in long-running applications)</li> <li>Unnecessary computations when the component unmounts or updates</li> </ul> </li> <li> <p>Cleaning Up an Interval</p> </li> </ul> <pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction Timer() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    const interval = setInterval(() =&gt; {\n      setCount((c) =&gt; c + 1);\n    }, 1000);\n\n    return () =&gt; clearInterval(interval); // Cleanup function\n  }, []); // Runs only once (on mount)\n\n  return &lt;p&gt;Timer: {count} seconds&lt;/p&gt;;\n}\n\nexport default Timer;\n</code></pre> <ul> <li>setInterval runs every second.</li> <li>The cleanup function (clearInterval) ensures the timer stops when the component unmounts.</li> </ul>"},{"location":"react/7.React%20Hooks/#dependencies-in-useeffect","title":"Dependencies in useEffect","text":"<ul> <li>The dependency array controls when the effect runs:<ul> <li><code>No dependencies</code> \u2192 Runs on every render.</li> <li><code>Empty array ([])</code> \u2192 Runs only on mount &amp; unmount.</li> <li><code>Specific dependencies ([var])</code> \u2192 Runs when those dependencies change.</li> </ul> </li> </ul> <p>Ensure dependencies are correctly specified to avoid unintended behavior.</p> <pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n\n  useEffect(() =&gt; {\n    async function fetchUserData() {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);\n      const data = await response.json();\n      setUser(data);\n    }\n\n    fetchUserData();\n  }, [userId]); // Runs only when `userId` changes\n\n  return (\n    &lt;div&gt;\n      {user ? &lt;h2&gt;{user.name}&lt;/h2&gt; : &lt;p&gt;Loading...&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\nexport default UserProfile;\n</code></pre>"},{"location":"react/7.React%20Hooks/#4useref-hook","title":"4.useRef Hook","text":"<ul> <li> <p>The useRef hook in React is a powerful tool that allows you to directly access and interact with DOM elements, as well as store values without causing re-renders.</p> </li> <li> <p>It does not cause a re-render atall.</p> </li> <li>It can update the value though.</li> </ul>"},{"location":"react/7.React%20Hooks/#accessing-dom-elements","title":"Accessing DOM Elements","text":"<ul> <li>One common use of useRef is to get direct access to a DOM element, such as an input field.</li> </ul> <pre><code>const inputRef = useRef(null);\n&lt;input ref={inputRef} /&gt;\n</code></pre> <pre><code>import { useRef } from \"react\";\n\nfunction FocusInput() {\n  const inputRef = useRef(null); // Step 1: Create a reference\n\n  const focusInput = () =&gt; {\n    inputRef.current.focus(); // Step 3: Use the reference to focus the input\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input ref={inputRef} type=\"text\" placeholder=\"Type here...\" /&gt; {/* Step 2: Attach the reference */}\n      &lt;button onClick={focusInput}&gt;Focus Input&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default FocusInput;\n// It will focus the input box when clicked on the button\n</code></pre> <pre><code>import { useEffect, useRef } from \"react\";\n\nexport default function Demo() {\n  const inputRef = useRef(null); // Corrected useRef syntax\n\n  useEffect(() =&gt; {\n    inputRef.current?.focus(); // Focus the input field when the component mounts\n  }, []);\n\n  return (\n    &lt;div className=\"tutorial\"&gt;\n      &lt;input ref={inputRef} type=\"text\" placeholder=\"Type something...\" /&gt;\n    &lt;/div&gt;\n  );\n}\n// It will only focus the input box when first mounted\n</code></pre> <pre><code>import { useRef, useState } from \"react\";\n\nexport default function Demo() {\n  const [count, setCount] = useState(0);\n  const countRef = useRef(0);\n\n  const handleIncrement = () =&gt; {\n    setCount(count + 1);\n    countRef.current++;\n\n    console.log(\"State:\", count); // State: 0\n    // Console log will access the previous State because it is running on previous State\n    // when cliked the button State will be updated but in the next render\n    console.log(\"Ref:\", countRef.current); // State: 1\n    // The countRef value will be immediately change to 1 from 0\n    // But we can't see because useRef does not re-renders the component.\n  };\n\n  return (\n    &lt;div className=\"tutorial\"&gt;\n      Count: {countRef.current} \n      {/*It will change because of useState rerender not because of useRef.*/}\n      &lt;button onClick={handleIncrement}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>import React, { useRef, useState } from \"react\";\n\nconst RefCounter = () =&gt; {\n  const countRef = useRef(0);\n  const [state, setState] = useState(0);\n\n  const incrementRef = () =&gt; {\n    countRef.current += 1;\n    console.log(\"Ref Count:\", countRef.current);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Ref Counter&lt;/h2&gt;\n      &lt;p&gt;Ref Count (no re-render): {countRef.current}&lt;/p&gt;\n      &lt;p&gt;State Value: {state}&lt;/p&gt;\n      &lt;button onClick={incrementRef}&gt;Increment Ref&lt;/button&gt;\n      &lt;button onClick={() =&gt; setState(state + 1)}&gt;Update State&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default RefCounter;\n</code></pre> <ul> <li>Clicking \"Increment Ref\" updates countRef.current, but the UI does not update.</li> <li>The new value only appears in the console (console.log).</li> <li>Clicking \"Update State\" triggers a re-render, and only then does countRef.current reflect the updated value.</li> </ul>"},{"location":"react/7.React%20Hooks/#persisting-values-without-re-renders","title":"Persisting Values Without Re-renders","text":"<ul> <li>The useRef hook in React allows you to persist values across renders without causing re-renders.</li> </ul> <pre><code>const countRef = useRef(0);\ncountRef.current += 1;\n</code></pre> <ul> <li> <p>How It Works:</p> <ul> <li>useRef(0) initializes a reference with a .current property set to 0.</li> <li>On each render, countRef.current is incremented by 1.</li> <li>Crucially, updating countRef.current does not cause a re-render of the component.</li> <li>The value persists across renders, but changes to it won't trigger a re-render like state (useState) would.</li> </ul> </li> <li> <p>When to Use useRef</p> <ul> <li>Storing values that don\u2019t need to trigger re-renders (e.g., a counter that tracks renders but isn\u2019t displayed).</li> <li>Keeping a reference to a DOM element (ref for input, div, etc.).</li> <li>Holding mutable values across renders (e.g., timers, intervals, previous values).</li> </ul> </li> <li> <p>Tracking Renders Without Re-rendering</p> <ul> <li>renderCount updates every render, but its update does not cause a re-render.</li> <li>Clicking the button updates state, which triggers a re-render, increasing renderCount.current.</li> </ul> </li> </ul> <pre><code>import React, { useRef, useState, useEffect } from \"react\";\n\nconst RenderCounter = () =&gt; {\n  const renderCount = useRef(0); // Persistent value without re-renders\n  const [state, setState] = useState(0);\n\n  useEffect(() =&gt; {\n    renderCount.current += 1;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Render Counter&lt;/h2&gt;\n      &lt;p&gt;Component has rendered: {renderCount.current} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setState(state + 1)}&gt;Trigger Re-render&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default RenderCounter;\n</code></pre> <ul> <li> <p>Referencing a DOM Element (Accessing an Input Field)</p> <ul> <li><code>div</code> - Scroll to a section, measure dimensions</li> <li><code>video</code> - Play, pause, restart a video</li> <li><code>canvas</code> - Draw graphics programmatically</li> <li><code>img</code> - Lazy loading or applying animations</li> <li><code>audio</code> - Control playback (play, pause, volume)</li> <li><code>form</code> - Reset form fields programmatically</li> <li><code>modal (div)</code> - Show/hide pop-ups</li> </ul> </li> <li> <p>input Focus</p> </li> </ul> <pre><code>import React, { useRef } from \"react\";\n\nconst InputFocus = () =&gt; {\n  const inputRef = useRef(null); // Holds a reference to the input element\n\n  const focusInput = () =&gt; {\n    if (inputRef.current) {\n      inputRef.current.focus(); // Programmatically focus input\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Focus Input&lt;/h2&gt;\n      &lt;input ref={inputRef} type=\"text\" placeholder=\"Type here...\" /&gt;\n      &lt;button onClick={focusInput}&gt;Focus Input&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default InputFocus;\n</code></pre> <ul> <li>Clicking the \"Focus Input\" button programmatically moves focus to the input field.</li> <li> <p>useRef persists the reference to the DOM element across renders without causing a re-render.</p> </li> <li> <p>Manipulating a div (Scroll to Section)</p> </li> </ul> <pre><code>import React, { useRef } from \"react\";\n\nconst ScrollToSection = () =&gt; {\n  const sectionRef = useRef(null);\n\n  const scrollToSection = () =&gt; {\n    sectionRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    &lt;div style={{ height: \"200vh\", padding: \"20px\" }}&gt;\n      &lt;button onClick={scrollToSection}&gt;Go to Section&lt;/button&gt;\n      &lt;div ref={sectionRef} style={{ marginTop: \"150vh\", padding: \"20px\", background: \"lightblue\" }}&gt;\n        &lt;h2&gt;Target Section&lt;/h2&gt;\n        &lt;p&gt;This is the section you scrolled to.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ScrollToSection;\n</code></pre> <ul> <li>Controlling a video Element</li> </ul> <pre><code>import React, { useRef } from \"react\";\n\nconst VideoControl = () =&gt; {\n  const videoRef = useRef(null);\n\n  const playVideo = () =&gt; videoRef.current?.play();\n  const pauseVideo = () =&gt; videoRef.current?.pause();\n  const restartVideo = () =&gt; {\n    videoRef.current.currentTime = 0;\n    videoRef.current?.play();\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Video Control&lt;/h2&gt;\n      &lt;video ref={videoRef} width=\"400\" controls&gt;\n        &lt;source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\" /&gt;\n      &lt;/video&gt;\n      &lt;br /&gt;\n      &lt;button onClick={playVideo}&gt;Play&lt;/button&gt;\n      &lt;button onClick={pauseVideo}&gt;Pause&lt;/button&gt;\n      &lt;button onClick={restartVideo}&gt;Restart&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default VideoControl;\n</code></pre> <ul> <li>Measuring a div's Size (Get Dimensions)</li> </ul> <pre><code>import React, { useRef, useState, useEffect } from \"react\";\n\nconst MeasureDiv = () =&gt; {\n  // Reference to the div\n  const divRef = useRef(null);\n\n  // State to store width and height\n  const [size, setSize] = useState({ width: 0, height: 0 });\n\n  useEffect(() =&gt; {\n    // Function to update div size\n    const updateSize = () =&gt; {\n      if (divRef.current) {\n        setSize({\n          width: divRef.current.offsetWidth,\n          height: divRef.current.offsetHeight,\n        });\n      }\n    };\n\n    // Add event listener for window resize\n    window.addEventListener(\"resize\", updateSize);\n    updateSize(); // Initial size measurement\n\n    // Cleanup: Remove event listener when component unmounts\n    return () =&gt; window.removeEventListener(\"resize\", updateSize);\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Div Size Measurement&lt;/h2&gt;\n      &lt;div ref={divRef} style={{ width: \"50%\", height: \"20vh\", background: \"lightcoral\" }}&gt;\n        Resize the window to see changes\n      &lt;/div&gt;\n      &lt;p&gt;\ud83d\udccf Width: {size.width}px | Height: {size.height}px&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MeasureDiv;\n</code></pre> <ul> <li>Toggling a modal (Show/Hide a Pop-up)</li> </ul> <pre><code>import React, { useRef } from \"react\";\n\nconst ModalExample = () =&gt; {\n  const modalRef = useRef(null);\n\n  const showModal = () =&gt; {\n    modalRef.current.style.display = \"block\";\n  };\n\n  const closeModal = () =&gt; {\n    modalRef.current.style.display = \"none\";\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={showModal}&gt;Open Modal&lt;/button&gt;\n      &lt;div ref={modalRef} style={{ display: \"none\", position: \"fixed\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, 0)\", padding: \"20px\", background: \"white\", border: \"1px solid black\" }}&gt;\n        &lt;p&gt;This is a modal&lt;/p&gt;\n        &lt;button onClick={closeModal}&gt;Close&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ModalExample;\n</code></pre> <ul> <li> <p>Holding Mutable Values Across Renders (Timers, Intervals)</p> </li> <li> <p>Clicking \"Start\" begins an interval that updates the seconds state every second.</p> </li> <li>Clicking \"Stop\" clears the interval, preventing memory leaks.</li> <li>intervalRef.current persists the interval ID without causing re-renders.</li> </ul> <pre><code>import React, { useRef, useState } from \"react\";\n\nconst TimerComponent = () =&gt; {\n  const intervalRef = useRef(null); // Holds the interval ID\n  const [seconds, setSeconds] = useState(0);\n\n  const startTimer = () =&gt; {\n    if (!intervalRef.current) {\n      intervalRef.current = setInterval(() =&gt; {\n        setSeconds((prev) =&gt; prev + 1);\n      }, 1000);\n    }\n  };\n\n  const stopTimer = () =&gt; {\n    clearInterval(intervalRef.current);\n    intervalRef.current = null;\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Timer&lt;/h2&gt;\n      &lt;p&gt;Elapsed Time: {seconds} seconds&lt;/p&gt;\n      &lt;button onClick={startTimer}&gt;Start&lt;/button&gt;\n      &lt;button onClick={stopTimer}&gt;Stop&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default TimerComponent;\n</code></pre>"},{"location":"react/7.React%20Hooks/#5usememo-hook","title":"5.useMemo Hook","text":"<p><code>Memoization</code> - Memoization is an optimization technique where the result of an expensive function is stored (cached) so that it doesn\u2019t have to run again if the input values haven\u2019t changed.</p> <ul> <li>Fibonacci Sequence (Without Memoization) in Vanilla JS</li> </ul> <pre><code>function slowFibonacci(n) {\n  if (n &lt;= 1) return n;\n  return slowFibonacci(n - 1) + slowFibonacci(n - 2); // Recursively calculates every time\n}\n\nconsole.log(slowFibonacci(40)); // Very slow for large numbers\n</code></pre> <ul> <li>Fibonacci with Memoization in Vanilla JS</li> </ul> <pre><code>function memoizedFibonacci() {\n  let cache = {}; // Store previous results\n\n  return function fib(n) {\n    if (n in cache) return cache[n]; // Return from cache if already computed\n    if (n &lt;= 1) return n;\n\n    cache[n] = fib(n - 1) + fib(n - 2);\n    return cache[n];\n  };\n}\n\nconst fibonacci = memoizedFibonacci();\nconsole.log(fibonacci(40)); // Much faster!\n</code></pre> <p>The <code>useMemo</code> hook helps optimize performance by caching (memoizing) the result of expensive calculations, preventing unnecessary re-computation.</p> <ul> <li>Normally, when a component re-renders, all functions inside it run again, even if their values didn\u2019t change.</li> <li>This can slow down the app if there are complex calculations or large datasets.</li> <li><code>useMemo</code> remembers (memoizes) the previous result and only recalculates if dependencies change.</li> </ul> <pre><code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);\nconst memoizedValue = useMemo(() =&gt; calculateValue, dependencies);\n</code></pre> <ul> <li>Simple Example without useMemo</li> </ul> <pre><code>import { useState } from 'react'\n\nfunction DoubleCounter() {\n  const [count, setCount] = useState(0);\n\n  function expensiveTask(num) {\n    console.log(\"Inside Expensive Task!\");\n    for(let i=0; i&lt;=2000000000; i++) {}\n    return num*2;\n  }\n\n  let doubledValue = expensiveTask(16);\n// This will run everytime the app re-renders even when the value of 'number' doesn't change.\n\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        Count: {count}\n      &lt;/div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Increment\n      &lt;/button&gt;\n      &lt;div&gt;\n        Double: {doubledValue}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default DoubleCounter\n</code></pre> <ul> <li>Simple Example with using useMemo</li> </ul> <pre><code>import { useState, useMemo } from 'react'\n\nfunction DoubleCounter() {\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(0);\n\n  function expensiveTask(num) {\n    console.log(\"Inside Expensive Task!\");\n    for(let i=0; i&lt;=2000000000; i++) {}\n    return num*2;\n  }\n\n//   let doubledValue = expensiveTask(number);\n// This will run everytime the app re-renders even when the value of 'number' doesn't change.\n\nlet doubledValue = useMemo(() =&gt; expensiveTask(number), [number])\n// now expensive Task will only run when the value of 'number' is changed\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        Count: {count}\n      &lt;/div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Increment\n      &lt;/button&gt;\n      &lt;div&gt;\n        Double: {doubledValue}\n      &lt;/div&gt;\n      &lt;input \n      type='number' \n      placeholder='enter number to double...'\n      value={number}\n      onChange={(e) =&gt; setNumber(e.target.value)}\n      /&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default DoubleCounter\n</code></pre> <ul> <li>Problem: Without useMemo (Inefficient)</li> </ul> <pre><code>import React, { useState } from \"react\";\n\nconst ExpensiveComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(5);\n\n  // Expensive function that runs on every render\n  const computeSquare = () =&gt; {\n    console.log(\"Calculating...\");\n    return number * number;\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Number: {number}&lt;/h2&gt;\n      &lt;h3&gt;Square: {computeSquare()}&lt;/h3&gt;\n      &lt;button onClick={() =&gt; setNumber(number + 1)}&gt;Increase Number&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increase Count&lt;/button&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ExpensiveComponent;\n</code></pre> <ul> <li>Every time count updates, computeSquare() re-runs, even though number didn\u2019t change.</li> <li> <p>This wastes performance because we don\u2019t need to recalculate the square unless number changes.</p> </li> <li> <p>Optimized with useMemo</p> </li> </ul> <pre><code>import React, { useState, useMemo } from \"react\";\n\nconst ExpensiveComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(5);\n\n  // Memoize the expensive calculation\n  const memoizedSquare = useMemo(() =&gt; {\n    console.log(\"Calculating...\");\n    return number * number;\n  }, [number]); // Only recalculates if `number` changes\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Number: {number}&lt;/h2&gt;\n      &lt;h3&gt;Square: {memoizedSquare}&lt;/h3&gt;\n      &lt;button onClick={() =&gt; setNumber(number + 1)}&gt;Increase Number&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increase Count&lt;/button&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ExpensiveComponent;\n</code></pre> <ul> <li>useMemo(() =&gt; number * number, [number]) only recalculates when number changes.</li> <li>If we update count, the expensive calculation is skipped.</li> <li> <p>Performance improves because the function does not run unnecessarily.</p> </li> <li> <p>Problem: Filtering is Slow Without useMemo</p> </li> </ul> <pre><code>import React, { useState } from \"react\";\n\nconst ListFilter = () =&gt; {\n  const [query, setQuery] = useState(\"\");\n  const items = [\"Apple\", \"Banana\", \"Grapes\", \"Mango\", \"Orange\"];\n\n  // Filtering runs on every render (even when not needed)\n  const filteredItems = items.filter(item =&gt; {\n      item.toLowerCase().includes(query.toLowerCase())\n      console.log(\"filtered\")\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;input type=\"text\" value={query} onChange={e =&gt; setQuery(e.target.value)} placeholder=\"Search...\" /&gt;\n      &lt;ul&gt;\n        {filteredItems.map(item =&gt; &lt;li key={item}&gt;{item}&lt;/li&gt;)}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ListFilter;\n</code></pre> <ul> <li> <p>If we filter a large list in a component, it can be slow because filtering runs on every re-render.</p> </li> <li> <p>Use useMemo to Optimize Filtering</p> </li> </ul> <pre><code>import React, { useState, useMemo } from \"react\";\n\nconst ListFilter = () =&gt; {\n  const [query, setQuery] = useState(\"\");\n  const items = [\"Apple\", \"Banana\", \"Grapes\", \"Mango\", \"Orange\"];\n\n  // Memoize the filtered list\n  const filteredItems = useMemo(() =&gt; {\n    console.log(\"Filtering...\");\n    return items.filter(item =&gt; item.toLowerCase().includes(query.toLowerCase()));\n  }, [query]); // Recalculates only when `query` changes\n\n  return (\n    &lt;div&gt;\n      &lt;input type=\"text\" value={query} onChange={e =&gt; setQuery(e.target.value)} placeholder=\"Search...\" /&gt;\n      &lt;ul&gt;\n        {filteredItems.map(item =&gt; &lt;li key={item}&gt;{item}&lt;/li&gt;)}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ListFilter;\n</code></pre> <ul> <li>useMemo ensures the filtering only happens when query changes.</li> <li>If the user types in the input, filtering runs.</li> <li>If the component re-renders for other reasons, filtering does not run again unnecessarily.</li> </ul>"},{"location":"react/7.React%20Hooks/#55-reactmemo","title":"5.5 React.memo()","text":"<ul> <li><code>React.memo()</code> is a higher-order component (HOC) in React that optimizes functional components by preventing unnecessary re-renders.</li> <li><code>React.memo()</code> prevents a functional component from unnecessary re-renders.</li> <li>It works by memoizing the rendered output of a component and only re-rendering it when its props change.</li> </ul> <pre><code>const MemoizedComponent = React.memo(MyComponent);\n</code></pre> <pre><code>const MemoizedComponent = React.memo((props) =&gt; {\n  return &lt;div&gt;{props.value}&lt;/div&gt;;\n});\n</code></pre> <ul> <li> <p>When to Use React.memo()</p> <ul> <li>The component re-renders frequently with the same props.</li> <li>The component is a pure function (output depends only on props).</li> <li>The parent component updates often, causing unnecessary re-renders.</li> </ul> </li> <li> <p>Basic Example</p> </li> </ul> <pre><code>import React, { useState } from \"react\";\n\nconst ChildComponent = ({ count }) =&gt; {\n  console.log(\"Child component re-rendered\");\n  return &lt;p&gt;Count: {count}&lt;/p&gt;;\n};\n\nconst OtherChildComponent = React.memo(({ otherCount }) =&gt; {\n  console.log(\"Other Child component re-rendered\");\n  return &lt;p&gt;Other Count: {otherCount}&lt;/p&gt;;\n});\n\nconst ParentComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n  const [otherCount, setotherCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment Count&lt;/button&gt;\n      &lt;button onClick={() =&gt; setotherCount(otherCount + 1)}&gt;Increment Other Count&lt;/button&gt;\n      &lt;ChildComponent count={count} /&gt;\n      {/* This will re-render unnecessarily even when otherCount changes */}\n      &lt;OtherChildComponent otherCount={otherCount} /&gt;\n      {/* This will not re-render unnecessarily even when Count changes will only re-render when it's props otherCount changes because we used React.memo()*/}\n    &lt;/div&gt;\n  );\n};\n\nexport default ParentComponent;\n</code></pre> <ul> <li>OtherChildComponent will only re-render when otherCount changes.</li> <li>Clicking \"Increment Count\" does not trigger a re-render of OtherChildComponent.</li> </ul>"},{"location":"react/7.React%20Hooks/#6usecallback-hook","title":"6.useCallback Hook","text":"<ul> <li>The useCallback hook in React is used to memoize functions so that they are not recreated on every render.</li> <li>This helps improve performance, especially in cases where functions are passed as props to child components.</li> <li>Every time a React component re-renders, any functions defined inside it are re-created.</li> <li>In most cases, this is fine, but when passing functions as props to child components, it can lead to unnecessary re-renders of those children.</li> <li>useCallback prevents this by returning the same function instance unless its dependencies change.</li> </ul> <pre><code>const memoizedFunction = useCallback(() =&gt; {\n  // function logic here\n}, [dependencies]);\n</code></pre> <ul> <li>The first argument is the function to memoize.</li> <li> <p>The second argument is an array of dependencies. If any dependency changes, the function is re-created.</p> </li> <li> <p>Basic Usage</p> </li> <li> <p>increment is memoized and will not be re-created on every render.</p> </li> </ul> <pre><code>import React, { useState, useCallback } from \"react\";\n\nconst Counter = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const increment = useCallback(() =&gt; {\n    setCount((prevCount) =&gt; prevCount + 1);\n  }, []); // No dependencies, so this function remains the same across re-renders\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre>"},{"location":"react/7.React%20Hooks/#passing-functions-to-child-components","title":"Passing Functions to Child Components","text":"<ul> <li>Without useCallback, a child component would re-render every time the parent renders.</li> </ul> <pre><code>import React, { useState, useCallback } from \"react\";\n\nconst Child = ({ onClick }) =&gt; {\n  console.log(\"Child re-rendered\");\n  return &lt;button onClick={onClick}&gt;Click Me&lt;/button&gt;;\n};\n\nconst Parent = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const handleClick = useCallback(() =&gt; {\n    console.log(\"Button Clicked\");\n  }, []); // Memoized function\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment Count&lt;/button&gt;\n      &lt;Child onClick={handleClick} /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Parent;\n</code></pre> <ul> <li>If handleClick was not memoized, it would be recreated on every render, causing Child to re-render unnecessarily.</li> <li>With useCallback, Child only re-renders when its props actually change.</li> </ul>"},{"location":"react/7.React%20Hooks/#using-usecallback-with-useeffect","title":"Using useCallback with useEffect","text":"<ul> <li>Sometimes, we need a stable function reference inside useEffect.</li> </ul> <pre><code>import React, { useState, useEffect, useCallback } from \"react\";\n\nconst Timer = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const tick = useCallback(() =&gt; {\n    setCount((prevCount) =&gt; prevCount + 1);\n  }, []); // Function stays the same across renders\n\n  useEffect(() =&gt; {\n    const interval = setInterval(tick, 1000);\n    return () =&gt; clearInterval(interval);\n  }, [tick]);\n\n  return &lt;p&gt;Timer: {count}&lt;/p&gt;;\n};\n\nexport default Timer;\n</code></pre> <ul> <li>If tick was recreated on every render, useEffect would run multiple times, leading to multiple intervals.</li> <li>Memoizing tick ensures that only one interval is set up.</li> </ul>"},{"location":"react/7.React%20Hooks/#usecallback-with-dynamic-dependencies","title":"useCallback with Dynamic Dependencies","text":"<ul> <li>If a function relies on state or props, we should include them as dependencies.</li> </ul> <pre><code>import React, { useState, useCallback } from \"react\";\n\nconst App = () =&gt; {\n  const [text, setText] = useState(\"Hello\");\n\n  const showAlert = useCallback(() =&gt; {\n    alert(text);\n  }, [text]); // Recreates function when `text` changes\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        value={text}\n        onChange={(e) =&gt; setText(e.target.value)}\n      /&gt;\n      &lt;button onClick={showAlert}&gt;Show Alert&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <ul> <li>If we don\u2019t include text, the function would always use the initial value of text, ignoring updates.</li> <li>By including [text], the function updates whenever text changes.</li> </ul>"},{"location":"react/7.React%20Hooks/#difference-between-usememo-and-usecallback","title":"Difference between useMemo and useCallback","text":"<ul> <li><code>useMemo</code>: Used to memoize the result of a computation. It returns a memoized value and is used to optimize expensive calculations.</li> <li><code>useCallback</code>: Used to memoize a function so that the function reference remains the same across renders unless its dependencies change. It returns a memoized function, not a value.</li> </ul>"},{"location":"react/7.React%20Hooks/#when-not-to-use-usecallback","title":"When NOT to use useCallback","text":"<ul> <li>Overuse can hurt performance: If a function is not being passed as a prop to a child component or used in useEffect, memoization might be unnecessary.</li> <li>Functions inside event handlers: If a function is used only inside the component that defines it, memoization isn\u2019t needed.</li> </ul>"},{"location":"react/7.React%20Hooks/#7usereducer-hook","title":"7.useReducer Hook","text":"<ul> <li>The useReducer hook is an alternative to useState for managing complex state logic in React functional components.</li> <li>It is particularly useful when the next state depends on the previous state or when the state logic is extensive.</li> </ul>"},{"location":"react/7.React%20Hooks/#alternative-to-usestate-for-complex-state","title":"Alternative to useState for Complex State","text":"<ul> <li>Basic Syntax The useReducer hook takes two arguments:</li> <li>Reducer function \u2013 A function that determines how state changes based on actions.</li> <li>Initial state \u2013 The starting value of the state.</li> </ul> <pre><code>const [state, dispatch] = useReducer(reducer, initialState);\n</code></pre> <ul> <li>Example for useReducer</li> </ul> <pre><code>import React, { useReducer } from \"react\";\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\nconst Counter = () =&gt; {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {state.count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"increment\" })}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"decrement\" })}&gt;-&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre> <ul> <li>state holds the current count.</li> <li>dispatch is used to send actions ({ type: \"increment\" }).</li> <li>The reducer function updates state based on the action type.</li> </ul>"},{"location":"react/7.React%20Hooks/#understanding-actions-and-reducers","title":"Understanding Actions and Reducers","text":"<ul> <li><code>Actions</code>: Objects that describe what should happen (e.g., { type: \"increment\" }).</li> <li><code>Reducer Function</code>: A pure function that takes state and an action and returns a new state.</li> </ul> <pre><code>function reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + action.payload };\n    case \"decrement\":\n      return { count: state.count - action.payload };\n    default:\n      return state;\n  }\n}\n</code></pre>"},{"location":"react/7.React%20Hooks/#combining-reducers","title":"Combining Reducers","text":""},{"location":"react/7.React%20Hooks/#8-usecontext-hook","title":"8. useContext Hook","text":"<ul> <li>The <code>useContext</code> hook allows you to share state or data across multiple components without passing props manually at every level.</li> <li>It's useful for accessing global data like user authentication, themes, language settings, etc.</li> </ul>"},{"location":"react/7.React%20Hooks/#simplifying-prop-drilling","title":"Simplifying Prop Drilling","text":"<ul> <li>Why useContext?   Normally, if you want to pass data from a parent component to a deeply nested child, you have to pass it through all intermediate components (prop drilling). <code>useContext</code> avoids this by allowing direct access to the context.</li> </ul>"},{"location":"react/7.React%20Hooks/#basic-syntax","title":"Basic Syntax","text":"<ul> <li>The <code>useContext</code> hook takes a context object (created by <code>React.createContext</code>) and returns the current context value.</li> </ul> <pre><code>const value = useContext(MyContext);\n</code></pre> <ul> <li>Example for useContext</li> </ul> <pre><code>import React, { createContext, useContext } from \"react\";\n\n// 1. Create the context\nconst ThemeContext = createContext();\n\n// 2. Create a provider component\nconst ThemeProvider = ({ children }) =&gt; {\n  const theme = \"dark\"; // Could be dynamic or from state\n  return (\n    &lt;ThemeContext.Provider value={theme}&gt;\n      {children}\n    &lt;/ThemeContext.Provider&gt;\n  );\n};\n\n// 3. Use the context in a child component\nconst ThemedComponent = () =&gt; {\n  const theme = useContext(ThemeContext);\n  return &lt;p&gt;The current theme is: {theme}&lt;/p&gt;;\n};\n\n// 4. Compose in App\nconst App = () =&gt; {\n  return (\n    &lt;ThemeProvider&gt;\n      &lt;ThemedComponent /&gt;\n    &lt;/ThemeProvider&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"react/7.React%20Hooks/#understanding-context-structure","title":"Understanding Context Structure","text":"<ul> <li>Context Object: Created using <code>React.createContext()</code>. It returns an object that includes:</li> <li><code>Provider</code> \u2013 a component to supply the context value.</li> <li> <p><code>Consumer</code> \u2013 a component to read the context value (used before hooks).</p> </li> <li> <p>Provider: A component that wraps part of the component tree and makes a value available to all its descendants via context.</p> </li> <li> <p>Consumer (optional): Before hooks were introduced, <code>Consumer</code> was used to access context in functional components.   Now, <code>useContext()</code> provides a simpler and cleaner way to consume context directly.</p> </li> </ul> <pre><code>const MyContext = createContext(defaultValue);\n\n// Using the provider\n&lt;MyContext.Provider value={someData}&gt;\n  &lt;YourComponent /&gt;\n&lt;/MyContext.Provider&gt;\n</code></pre>"},{"location":"react/7.React%20Hooks/#when-to-use-usecontext","title":"When to Use useContext","text":"<ul> <li>When global state is needed (e.g., theme, language, authentication).</li> <li>When the same data needs to be accessed by deeply nested components.</li> <li>When you want to avoid prop drilling (passing props through multiple intermediate components).</li> </ul>"},{"location":"react/7.React%20Hooks/#common-pattern-usecontext-usereducer","title":"Common Pattern: useContext + useReducer","text":"<ul> <li>You can combine <code>useContext</code> with <code>useReducer</code> to create a global state management pattern.</li> <li>This pattern allows centralized state logic (via reducer) and easy access (via context) across your application\u2014similar to how Redux works, but simpler and built-in to React.</li> </ul> <pre><code>src/\n\u2502\n\u251c\u2500\u2500 context/\n\u2502   \u2514\u2500\u2500 CountContext.jsx\n\u2502\n\u251c\u2500\u2500 components/\n\u2502   \u2514\u2500\u2500 Counter.jsx\n\u2502\n\u251c\u2500\u2500 App.jsx\n\u2514\u2500\u2500 main.jsx (if using Vite)\n</code></pre> <pre><code>// context/CountContext.jsx\n\nimport React, { createContext, useReducer, useContext } from \"react\";\n// Create Context\nconst CountContext = createContext();\n// Initial State\nconst initialState = { count: 0 };\n// Reducer Function\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// Provider Component\nexport const CountProvider = ({ children }) =&gt; {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    &lt;CountContext.Provider value={{ state, dispatch }}&gt;\n      {children}\n    &lt;/CountContext.Provider&gt;\n  );\n};\n// Custom Hook\nexport const useCount = () =&gt; {\n  const context = useContext(CountContext);\n  if (!context) {\n    throw new Error(\"useCount must be used within a CountProvider\");\n  }\n  return context;\n};\n</code></pre> <pre><code>//components/Counter.jsx\nimport React from \"react\";\nimport { useCount } from \"../context/CountContext\";\n\nconst Counter = () =&gt; {\n  const { state, dispatch } = useCount();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {state.count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"increment\" })}&gt;\u2795&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"decrement\" })}&gt;\u2796&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre> <pre><code>// App.jsx\nimport React from \"react\";\nimport { CountProvider } from \"./context/CountContext\";\nimport Counter from \"./components/Counter\";\n\nconst App = () =&gt; {\n  return (\n    &lt;CountProvider&gt;\n      &lt;h1&gt;Counter App Using useReducer + useContext&lt;/h1&gt;\n      &lt;Counter /&gt;\n    &lt;/CountProvider&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>This structure:</p> <ul> <li>Promotes reusability of state logic.</li> <li>Makes it easy to test components individually.</li> <li>Adds a useCount() custom hook for cleaner usage and error handling.</li> </ul>"},{"location":"react/7.React%20Hooks/#9uselayouteffect","title":"9.useLayoutEffect","text":""},{"location":"react/7.React%20Hooks/#10useimperativehandle","title":"10.useImperativeHandle","text":""},{"location":"react/7.React%20Hooks/#11custom-hooks-in-react","title":"11.Custom Hooks in React","text":""},{"location":"react/7.React%20Hooks/#when-to-create-custom-hooks","title":"When to Create Custom Hooks","text":"<ul> <li>Create when logic needs to be shared across multiple components.</li> </ul>"},{"location":"react/7.React%20Hooks/#example-of-a-custom-hook","title":"Example of a Custom Hook","text":"<pre><code>function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() =&gt; {\n    return localStorage.getItem(key) || initialValue;\n  });\n\n  useEffect(() =&gt; {\n    localStorage.setItem(key, storedValue);\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n}\n</code></pre> <ul> <li>This guide provides a comprehensive overview of React Hooks with explanations and examples. You can modify and expand as needed!</li> </ul>"},{"location":"react/7.React%20Hooks/#uselocalstorage","title":"useLocalStorage","text":""},{"location":"react/7.React%20Hooks/#usefetch","title":"useFetch","text":""},{"location":"react/7.React%20Hooks/#12-server-components-hooks-for-ssr-streaming","title":"12. Server Components Hooks (for SSR &amp; Streaming)","text":"<ul> <li><code>useDebugValue</code> \u2013 Use it inside custom hooks to show useful info in React DevTools.</li> <li><code>useId</code> \u2013 Generates unique IDs for accessibility &amp; form inputs. Helps with accessible form fields &amp; avoiding ID conflicts.</li> <li><code>useDeferredValue</code> \u2013 Defers state updates for smoother performance. Smoother UI While Typing. Defers a value update to avoid blocking the UI.</li> <li><code>useTransition</code> \u2013 Handles UI transitions efficiently and Optimize state updates. Splits state updates into urgent and non-urgent.</li> <li><code>useSyncExternalStore</code> \u2013 for library authors (not general app developers) to sync with external state stores. Safely subscribe to an external store (like Redux or Zustand).</li> <li><code>useInsertionEffect</code> \u2013  for library authors (not general app developers) to inject styles before DOM mutations happen. It\u2019s similar to useLayoutEffect, but it runs even earlier in the React render lifecycle.</li> </ul>"},{"location":"react/9.React%20Router/","title":"React Router","text":"<p>React Router is a powerful library that enables client-side routing in React applications. It lets you build single-page applications with navigation, dynamic routing, nested views, and more\u2014all without full page reloads.</p> <p>\ud83d\udcda For more: https://reactrouter.com</p>"},{"location":"react/9.React%20Router/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>npm install react-router\n</code></pre> <p>Wrap your app with <code>&lt;BrowserRouter&gt;</code>:</p> <pre><code>import { BrowserRouter } from 'react-router';\n\nconst Root = () =&gt; (\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;\n);\n</code></pre>"},{"location":"react/9.React%20Router/#routes-and-route","title":"\ud83d\udd01 <code>Routes</code> and <code>Route</code>","text":"<p>Use <code>&lt;Routes&gt;</code> as the parent of all route definitions. It replaces <code>&lt;Switch&gt;</code> in React Router v6. <code>&lt;Route&gt;</code> defines a path and the component that should render when the path matches.</p> <pre><code>import { Routes, Route } from 'react-router';\n\n&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n  &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n&lt;/Routes&gt;\n</code></pre> <p>Each <code>Route</code> requires a <code>path</code> and <code>element</code>. You can also nest <code>Route</code> components for nested layouts.</p>"},{"location":"react/9.React%20Router/#splats-catch-all-routes","title":"\ud83c\udf1f Splats (<code>*</code> Catch-All Routes)","text":"<p>Used to match any sub-path after the base path. This is useful for documentation pages or catch-all blog post slugs.</p> <pre><code>&lt;Route path=\"docs/*\" element={&lt;Docs /&gt;} /&gt;\n</code></pre> <p><code>useParams()</code> will return everything after <code>/docs/</code> in the <code>*</code> key.</p> <pre><code>const { '*': subPath } = useParams();\n</code></pre>"},{"location":"react/9.React%20Router/#notfound-route","title":"\ud83d\udeab NotFound Route","text":"<p>Handle unmatched routes with a <code>*</code> path. Always place it at the end of the <code>Routes</code> block to catch unhandled paths.</p> <pre><code>&lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n</code></pre> <p>Use this for a 404 or \"Page Not Found\" view.</p>"},{"location":"react/9.React%20Router/#path-attribute","title":"\ud83d\udccc <code>path</code> Attribute","text":"<p>The <code>path</code> defines the URL fragment to match. You can include static segments or dynamic variables (e.g., <code>:id</code>).</p> <pre><code>&lt;Route path=\"/product/:id\" element={&lt;Product /&gt;} /&gt;\n</code></pre> <p>Route paths support parameters, optional segments, and splats.</p>"},{"location":"react/9.React%20Router/#link-navigation","title":"\ud83d\udd17 Link Navigation","text":""},{"location":"react/9.React%20Router/#link-component","title":"<code>Link</code> Component","text":"<p>Used for client-side navigation without reloading the page.</p> <pre><code>&lt;Link to=\"/profile\"&gt;Go to Profile&lt;/Link&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#navlink-with-end-and-active","title":"<code>NavLink</code> with <code>end</code> and <code>active</code>","text":"<p><code>NavLink</code> allows styling based on whether the link is active. The <code>end</code> prop makes it match exactly.</p> <pre><code>&lt;NavLink\n  to=\"/\"\n  end\n  className={({ isActive }) =&gt; (isActive ? 'active' : '')}\n&gt;\n  Home\n&lt;/NavLink&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#nested-routing-layouts","title":"\ud83e\udde9 Nested Routing &amp; Layouts","text":"<p>Use <code>Outlet</code> to define where nested child routes render inside a parent layout.</p>"},{"location":"react/9.React%20Router/#layout-with-outlet","title":"Layout with <code>Outlet</code>","text":"<pre><code>import { Outlet } from 'react-router';\n\nconst DashboardLayout = () =&gt; (\n  &lt;div&gt;\n    &lt;Sidebar /&gt;\n    &lt;Outlet /&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"react/9.React%20Router/#nested-route-config","title":"Nested Route Config","text":"<pre><code>&lt;Routes&gt;\n  &lt;Route path=\"dashboard\" element={&lt;DashboardLayout /&gt;}&gt;\n    &lt;Route path=\"stats\" element={&lt;Stats /&gt;} /&gt;\n    &lt;Route path=\"settings\" element={&lt;Settings /&gt;} /&gt;\n  &lt;/Route&gt;\n&lt;/Routes&gt;\n</code></pre> <p>Nested routes automatically prepend their parent path.</p>"},{"location":"react/9.React%20Router/#dynamic-routes","title":"\ud83d\udd04 Dynamic Routes","text":""},{"location":"react/9.React%20Router/#url-parameters","title":"URL Parameters","text":"<p>You can capture values from the URL using parameters.</p> <pre><code>&lt;Route path=\"/users/:userId\" element={&lt;UserProfile /&gt;} /&gt;\n</code></pre> <p>Use <code>useParams()</code> to access them:</p> <pre><code>const { userId } = useParams();\n</code></pre> <p>Useful for dynamic pages like user profiles, articles, etc.</p>"},{"location":"react/9.React%20Router/#relative-paths","title":"\ud83e\udded Relative Paths","text":"<p>Relative paths are resolved based on the parent route. This helps keep navigation modular and reusable.</p> <pre><code>&lt;Link to=\"settings\"&gt;Go to Settings&lt;/Link&gt; // becomes /dashboard/settings if inside dashboard\n</code></pre> <p>Use <code>..</code> to go one level up.</p>"},{"location":"react/9.React%20Router/#route-prefixes","title":"\ud83d\udcc1 Route Prefixes","text":"<p>Nested routes automatically prefix the path with the parent.</p> <pre><code>&lt;Route path=\"admin\" element={&lt;Admin /&gt;}&gt;\n  &lt;Route path=\"users\" element={&lt;AdminUsers /&gt;} /&gt; // becomes /admin/users\n&lt;/Route&gt;\n</code></pre> <p>No need to repeat full paths for children.</p>"},{"location":"react/9.React%20Router/#useparams-example","title":"\ud83d\udd0d <code>useParams()</code> Example","text":"<pre><code>&lt;Route path=\"/blog/:slug\" element={&lt;BlogPost /&gt;} /&gt;\n\nfunction BlogPost() {\n  const { slug } = useParams();\n  return &lt;h1&gt;Reading: {slug}&lt;/h1&gt;;\n}\n</code></pre> <p>Returns an object of matched params from the current URL.</p>"},{"location":"react/9.React%20Router/#route-segments","title":"\ud83e\udde9 Route Segments","text":""},{"location":"react/9.React%20Router/#static-segment","title":"Static Segment","text":"<pre><code>&lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#dynamic-segment","title":"Dynamic Segment","text":"<pre><code>&lt;Route path=\"/blog/:slug\" element={&lt;Blog /&gt;} /&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#optional-segment-static","title":"Optional Segment (Static)","text":"<pre><code>&lt;Route path=\"/settings/:tab?\" element={&lt;Settings /&gt;} /&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#optional-segment-dynamic","title":"Optional Segment (Dynamic)","text":"<pre><code>&lt;Route path=\"/user/:id/:mode?\" element={&lt;UserDetail /&gt;} /&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#usenavigate","title":"\ud83d\ude80 <code>useNavigate()</code>","text":"<p>Navigate programmatically using this hook.</p> <pre><code>const navigate = useNavigate();\n\n&lt;button onClick={() =&gt; navigate('/dashboard')}&gt;Go&lt;/button&gt;\n</code></pre> <p>Replace history entry:</p> <pre><code>navigate('/login', { replace: true });\n</code></pre> <p>With <code>state</code>:</p> <pre><code>navigate('/checkout', { state: { fromCart: true } });\n</code></pre> <p>Use this for redirections after form submissions or auth logic.</p>"},{"location":"react/9.React%20Router/#route-params-recap","title":"\ud83d\udd27 Route Params Recap","text":"<pre><code>&lt;Route path=\"/product/:category/:id\" element={&lt;ProductPage /&gt;} /&gt;\n</code></pre> <pre><code>const { category, id } = useParams();\n</code></pre>"},{"location":"react/9.React%20Router/#url-search-params","title":"\ud83e\uddf5 URL Search Params","text":"<p>Access query string values from the URL.</p> <pre><code>const [searchParams, setSearchParams] = useSearchParams();\n\nconst sort = searchParams.get('sort');\n</code></pre> <p>Update params dynamically:</p> <pre><code>setSearchParams({ sort: 'price' });\n</code></pre> <p>Useful for filtering, pagination, sorting, etc.</p>"},{"location":"react/9.React%20Router/#location-object","title":"\ud83e\udded Location Object","text":"<p><code>useLocation()</code> gives full access to the current location object.</p> <pre><code>const location = useLocation();\n\nconsole.log(location.pathname);   // /home\nconsole.log(location.search);     // ?ref=nav\nconsole.log(location.state);      // custom state object\n</code></pre> <p>Used when you need to know how the user got to a page or to persist custom data between pages.</p>"},{"location":"react/9.React%20Router/#additional-resources-and-all-the-concepts-to-learn","title":"\ud83d\udcda Additional Resources and All the Concepts to Learn","text":"<ul> <li>React Router Docs</li> </ul>"},{"location":"react/9.React%20Router/#react-router-core-concepts","title":"\ud83e\udded React Router Core Concepts","text":"\ud83d\udd39 Concept \ud83e\udde0 Description <code>BrowserRouter</code> / <code>HashRouter</code> Top-level routers for web apps. <code>BrowserRouter</code> uses the History API (clean URLs), while <code>HashRouter</code> uses <code>#</code> to keep the UI in sync with the URL. <code>Routes</code> &amp; <code>Route</code> Declarative components that define routing configuration. <code>Routes</code> wraps multiple <code>Route</code> elements. <code>Link</code> &amp; <code>NavLink</code> Replace <code>&lt;a&gt;</code> tags. <code>Link</code> navigates declaratively, while <code>NavLink</code> adds styling for active links. <code>Navigate</code> A component that triggers redirect to a different route when rendered. <code>Outlet</code> Placeholder for nested routes. Enables layout composition. <code>index</code> Defines the default child route under a parent route. <code>path='*'</code> Wildcard route used to match any path. Commonly used for 404 pages. <code>errorElement</code> Error boundary UI for route-specific errors. <code>loader</code> Function to fetch data before rendering a route. Available from React Router v6.4+. <code>action</code> Handles form submissions and data mutations. Runs before the route renders. <code>defer()</code> Allows partial data loading and integration with Suspense. <code>lazy()</code> + <code>Suspense</code> Enables code-splitting for routes using dynamic imports."},{"location":"react/9.React%20Router/#react-router-hooks-v64","title":"\ud83e\uddea React Router Hooks (v6.4+)","text":"\ud83e\uddf7 Hook \ud83d\udca1 Purpose <code>useNavigate()</code> Imperative navigation. E.g. go forward, back, or to a specific path. <code>useParams()</code> Access dynamic URL segments (e.g., <code>:id</code>, <code>:slug</code>). <code>useLocation()</code> Get current location object including <code>pathname</code>, <code>search</code>, and <code>hash</code>. <code>useMatch()</code> Match a pattern against the current location pathname. <code>useHref()</code> Generate an HREF string for a given route. <code>useRoutes()</code> Hook-based way to define routes directly inside components. <code>useOutlet()</code> Render the element matched by a child route inside a layout. <code>useLoaderData()</code> Access data returned by the loader. <code>useActionData()</code> Access data returned by a route action after a mutation. <code>useNavigation()</code> Get current navigation state (idle, loading, submitting). <code>useNavigationType()</code> Determine how the navigation was triggered (POP, PUSH, REPLACE). <code>useRevalidator()</code> Manually trigger a loader revalidation. <code>useRouteError()</code> Access the error thrown by a route or its loader. <code>useRouteLoaderData()</code> Access loader data from a specific ancestor route by ID."},{"location":"react/9.React%20Router/#dynamic-routing-concepts","title":"\ud83e\uddec Dynamic Routing Concepts","text":"\ud83d\udd39 Concept \ud83e\udde0 Description <code>:id</code>, <code>:slug</code>, etc. URL parameters used for dynamic matching. Define variables in route paths. <code>useParams()</code> Retrieves current route's dynamic segments. Slug Human-readable, SEO-friendly identifier in the URL. Often derived from titles. Nested Dynamic Routes Combine dynamic paths with <code>&lt;Outlet /&gt;</code> to show nested content. Optional Params Allow parts of the path to be optional using <code>:param?</code>."},{"location":"react/9.React%20Router/#nested-routes-layouts","title":"\ud83c\udfd7\ufe0f Nested Routes &amp; Layouts","text":"\ud83d\udd39 Concept \ud83e\udde0 Description Nested Routes Enables route hierarchy with children inside parent routes. Layout Route A route containing shared UI like navbars and sidebars with an <code>&lt;Outlet /&gt;</code>. Relative Links Use relative paths for nested route linking. Index Routes Child route rendered when the parent route is matched."},{"location":"react/9.React%20Router/#navigation-tools","title":"\ud83d\udea6 Navigation Tools","text":"\ud83d\udd39 Concept \ud83e\udde0 Description <code>Link</code> Declarative, client-side navigation. Prevents page reloads. <code>NavLink</code> Like <code>Link</code>, but automatically applies <code>active</code> styling. Useful for menus. <code>useNavigate()</code> Programmatically navigate forward, back, or to a specific URL. <code>replace: true</code> Prevents pushing new history entry on navigation. Replaces current entry. <code>scrollRestoration</code> Manages scroll behavior across navigations automatically."},{"location":"react/9.React%20Router/#special-routing-behaviors","title":"\ud83e\uddea Special Routing Behaviors","text":"\ud83d\udd39 Concept \ud83e\udde0 Description <code>Navigate</code> Component redirect. Use in JSX to change routes. <code>redirect()</code> Redirect in loaders or actions before the component is rendered. Wildcard (<code>*</code>) Routes Catch-all route, often used for 404 fallback. Error Boundaries Render fallback UI when a route or its loader throws."},{"location":"react/9.React%20Router/#general-routing-concepts","title":"\u2699\ufe0f General Routing Concepts","text":"\ud83d\udd39 Concept \ud83e\udde0 Description Slug SEO-friendly readable URL string (e.g., blog titles). Query Parameters Use <code>?key=value</code> format. Access via <code>useLocation().search</code> or <code>URLSearchParams</code>. Hash Routing Uses <code>#</code> in URL. Useful for static hosting environments. SSR Routing Server-rendered routing used in frameworks like Next.js or Remix. SPA vs MPA SPAs load one page and update via JS. MPAs reload on every page. Static Routes Predefined paths like <code>/home</code>, <code>/about</code>. Dynamic Routes Parameterized paths like <code>/user/:id</code>. Route Matching Pattern matching engine that maps URLs to route components."},{"location":"react/9.React%20Router/#code-examples","title":"\ud83d\udcda Code Examples","text":"<pre><code>&lt;Route path=\"/products/:slug\" element={&lt;ProductPage /&gt;} /&gt;\n\n// Inside ProductPage.jsx\nconst { slug } = useParams();\n</code></pre> <pre><code>&lt;NavLink\n  to=\"/about\"\n  className={({ isActive }) =&gt; isActive ? 'text-blue-500 underline' : ''}\n&gt;\n  About\n&lt;/NavLink&gt;\n</code></pre> <pre><code>const navigate = useNavigate();\nnavigate('/dashboard'); // push\nnavigate(-1); // go back\nnavigate('/login', { replace: true }); // replace\n</code></pre> <p>\u2705 Best Practice: Structure routes using layout routes with <code>&lt;Outlet /&gt;</code>, organize configuration into route objects, preload with loaders, defer data when needed, and handle mutations with <code>action()</code>. Prefer dynamic routes with semantic slugs for SEO.</p>"},{"location":"react/Important%20Keywords/","title":"React Ecosystem \u2013 Comprehensive Keywords List","text":""},{"location":"react/Important%20Keywords/#react-core-concepts","title":"React Core Concepts","text":""},{"location":"react/Important%20Keywords/#11-virtual-dom-rendering","title":"1.1 Virtual DOM &amp; Rendering","text":"<p>Virtual DOM \u2013 A lightweight copy of the real DOM that React updates efficiently.</p> <p>Diffing Algorithm \u2013 Compares Virtual DOM trees to identify changes.</p> <p>Reconciliation \u2013 Process of updating the real DOM based on Virtual DOM changes.</p> <p>React Fiber \u2013 React's new reconciliation engine for faster updates.</p> <p>Hydration \u2013 Merging server-rendered HTML with client-side React.</p> <p>React Concurrent Mode \u2013 Allows React to work on rendering updates without blocking the main thread.</p> <p>Asynchronous Rendering \u2013 React prioritizes UI updates for a smoother user experience.</p>"},{"location":"react/Important%20Keywords/#12-component-based-architecture","title":"1.2 Component-Based Architecture","text":"<p>Functional Components \u2013 Components that use functions instead of classes.</p> <p>Class Components \u2013 Components defined using ES6 classes with lifecycle methods.</p> <p>Stateless Components \u2013 Components that do not manage their own state.</p> <p>Stateful Components \u2013 Components that hold and manage state.</p> <p>Higher-Order Components (HOC) \u2013 Functions that take a component and return an enhanced version.</p> <p>Controlled Components \u2013 Form elements whose state is controlled by React.</p> <p>Uncontrolled Components \u2013 Form elements that store their state in the DOM.</p>"},{"location":"react/Important%20Keywords/#13-component-lifecycle-class-components","title":"1.3 Component Lifecycle (Class Components)","text":"<p>Mounting Phase constructor \u2013 Initializes state and binds methods.</p> <p>componentDidMount \u2013 Runs after the component is added to the DOM.</p> <p>Updating Phase shouldComponentUpdate \u2013 Determines whether a re-render is needed.</p> <p>componentDidUpdate \u2013 Runs after a component updates.</p> <p>getDerivedStateFromProps \u2013 Updates state based on props before re-render.</p> <p>getSnapshotBeforeUpdate \u2013 Captures the previous DOM state before updates.</p> <p>Unmounting Phase componentWillUnmount \u2013 Cleanup operations like event listeners or timers.</p> <p>Error Handling Error Boundaries \u2013 Special components that catch UI errors.</p>"},{"location":"react/Important%20Keywords/#react-hooks-function-components-lifecycle","title":"React Hooks (Function Components Lifecycle)","text":""},{"location":"react/Important%20Keywords/#21-basic-hooks","title":"2.1 Basic Hooks","text":"<p>useState \u2013 Manages component-level state.</p> <p>useEffect \u2013 Runs side effects like fetching data or subscriptions.</p> <p>useContext \u2013 Accesses global values without prop drilling.</p>"},{"location":"react/Important%20Keywords/#22-performance-optimization-hooks","title":"2.2 Performance Optimization Hooks","text":"<p>useMemo \u2013 Caches computed values to prevent unnecessary calculations.</p> <p>useCallback \u2013 Caches functions to prevent re-renders.</p> <p>React.memo \u2013 Prevents unnecessary re-renders of functional components.</p>"},{"location":"react/Important%20Keywords/#23-advanced-hooks","title":"2.3 Advanced Hooks","text":"<p>useReducer \u2013 Manages complex state logic using a reducer function.</p> <p>useRef \u2013 Creates a reference to store mutable values without triggering re-renders.</p> <p>useLayoutEffect \u2013 Runs synchronously after all DOM updates.</p>"},{"location":"react/Important%20Keywords/#24-concurrent-rendering-hooks","title":"2.4 Concurrent Rendering Hooks","text":"<p>useTransition \u2013 Defers updates for better responsiveness.</p> <p>useDeferredValue \u2013 Postpones non-urgent value updates.</p> <p>useId \u2013 Generates unique IDs for accessibility.</p>"},{"location":"react/Important%20Keywords/#react-performance-optimization","title":"React Performance Optimization","text":""},{"location":"react/Important%20Keywords/#31-rendering-optimizations","title":"3.1 Rendering Optimizations","text":"<p>Event Delegation \u2013 Uses a single event listener for multiple child elements.</p> <p>Lazy Loading \u2013 Loads components only when needed (React.lazy).</p> <p>Code Splitting \u2013 Divides code into smaller chunks to improve load times.</p> <p>Tree Shaking \u2013 Removes unused JavaScript code for optimization.</p>"},{"location":"react/Important%20Keywords/#32-avoiding-re-renders","title":"3.2 Avoiding Re-renders","text":"<p>React.memo \u2013 Prevents re-rendering if props remain the same.</p> <p>useMemo \u2013 Avoids re-computation of expensive calculations.</p> <p>useCallback \u2013 Prevents function recreation on every render.</p> <p>shouldComponentUpdate \u2013 Controls whether a component should re-render.</p>"},{"location":"react/Important%20Keywords/#33-browser-rendering-optimizations","title":"3.3 Browser Rendering Optimizations","text":"<p>Repaints \u2013 Redrawing visible elements when styles change.</p> <p>Reflows \u2013 Layout recalculations when elements change position.</p> <p>Virtualization \u2013 Renders only visible elements to improve performance.</p>"},{"location":"react/Important%20Keywords/#react-state-management","title":"React State Management","text":""},{"location":"react/Important%20Keywords/#41-react-built-in-state-management","title":"4.1 React Built-in State Management","text":"<p>useState \u2013 Local state within a component.</p> <p>useReducer \u2013 Manages complex state changes.</p> <p>useContext \u2013 Shares state globally across components.</p>"},{"location":"react/Important%20Keywords/#42-redux-external-state-management","title":"4.2 Redux (External State Management)","text":"<p>Core Concepts Redux Store \u2013 Centralized state container.</p> <p>Actions \u2013 Describe state changes.</p> <p>Reducers \u2013 Functions that modify the store based on actions.</p> <p>Dispatch \u2013 Sends actions to the reducer.</p> <p>Selectors \u2013 Extracts specific data from the Redux store.</p> <p>Middleware &amp; Enhancers Redux Thunk \u2013 Handles async operations in Redux.</p> <p>Redux Saga \u2013 Uses generator functions for managing side effects.</p> <p>Redux Logger \u2013 Logs dispatched actions and state changes.</p> <p>Redux Toolkit (RTK) createSlice \u2013 Combines reducers and actions in a single function.</p> <p>createAsyncThunk \u2013 Simplifies async logic in Redux.</p> <p>configureStore \u2013 Sets up a Redux store with default middleware.</p>"},{"location":"react/Important%20Keywords/#43-context-api","title":"4.3 Context API","text":"<p>React Context \u2013 Shares state without prop drilling.</p> <p>Provider &amp; Consumer \u2013 Provides and consumes shared state.</p>"},{"location":"react/Important%20Keywords/#44-other-state-management-libraries","title":"4.4 Other State Management Libraries","text":"<p>Zustand \u2013 Simple, minimalistic state management.</p> <p>Recoil \u2013 React\u2019s experimental state management library.</p> <p>Jotai \u2013 Atom-based state management.</p> <p>MobX \u2013 Reactive state management with observables.</p>"},{"location":"react/Important%20Keywords/#react-routing-react-router","title":"React Routing (React Router)","text":""},{"location":"react/Important%20Keywords/#51-routing-essentials","title":"5.1 Routing Essentials","text":"<p>BrowserRouter \u2013 Enables routing in React apps.</p> <p>HashRouter \u2013 Uses URL hash for routing.</p> <p>MemoryRouter \u2013 Stores routes in memory (useful for testing).</p> <p>StaticRouter \u2013 Predefined routes for server-side rendering.</p>"},{"location":"react/Important%20Keywords/#52-navigation","title":"5.2 Navigation","text":"<p>Route \u2013 Defines a route and its component.</p> <p>Link &amp; NavLink \u2013 Navigates between routes.</p> <p>Redirect \u2013 Redirects to another route.</p> <p>useNavigate \u2013 Programmatically navigates users.</p>"},{"location":"react/Important%20Keywords/#53-dynamic-routing","title":"5.3 Dynamic Routing","text":"<p>useParams \u2013 Retrieves URL parameters.</p> <p>useLocation \u2013 Gets the current URL path.</p>"},{"location":"react/Important%20Keywords/#nextjs-react-framework","title":"Next.js (React Framework)","text":""},{"location":"react/Important%20Keywords/#61-rendering-strategies","title":"6.1 Rendering Strategies","text":"<p>SSR (Server-Side Rendering) \u2013 Fetches and renders pages on the server per request.</p> <p>CSR (Client-Side Rendering) \u2013 Renders content dynamically in the browser.</p> <p>SSG (Static Site Generation) \u2013 Pre-builds pages for performance.</p> <p>ISR (Incremental Static Regeneration) \u2013 Updates static pages without full re-builds.</p>"},{"location":"react/Important%20Keywords/#62-data-fetching","title":"6.2 Data Fetching","text":"<p>getServerSideProps \u2013 Fetches data on each request (SSR).</p> <p>getStaticProps \u2013 Fetches data at build time (SSG).</p> <p>getStaticPaths \u2013 Generates dynamic paths for static pages.</p>"},{"location":"react/Important%20Keywords/#63-api-routes","title":"6.3 API Routes","text":"<p>API Middleware \u2013 Runs logic before serving requests.</p> <p>Middleware Functions \u2013 Handles authentication and logging.</p>"},{"location":"react/Important%20Keywords/#react-forms-user-input-handling","title":"React Forms &amp; User Input Handling","text":""},{"location":"react/Important%20Keywords/#71-controlled-components","title":"7.1 Controlled Components","text":"<p>onChange Event \u2013 Updates state whenever an input value changes.</p> <p>value Attribute \u2013 Controls the input field value using state.</p>"},{"location":"react/Important%20Keywords/#72-uncontrolled-components","title":"7.2 Uncontrolled Components","text":"<p>useRef for Form Handling \u2013 Directly accesses form elements without React state.</p>"},{"location":"react/Important%20Keywords/#73-form-libraries","title":"7.3 Form Libraries","text":"<p>React Hook Form \u2013 Lightweight form library with built-in validation.</p> <p>Formik \u2013 Form management library with validation support.</p> <p>Yup \u2013 Schema validation library for form data.</p>"},{"location":"react/Important%20Keywords/#react-apis-for-ui-enhancements","title":"React APIs for UI Enhancements","text":""},{"location":"react/Important%20Keywords/#81-context-api","title":"8.1 Context API","text":"<p>React.createContext \u2013 Creates a shared context for global state.</p> <p>useContext \u2013 Consumes context data in functional components.</p>"},{"location":"react/Important%20Keywords/#82-portals","title":"8.2 Portals","text":"<p>ReactDOM.createPortal \u2013 Renders child components outside the parent hierarchy (useful for modals).</p>"},{"location":"react/Important%20Keywords/#83-suspense-lazy-loading","title":"8.3 Suspense &amp; Lazy Loading","text":"<p>React.lazy \u2013 Loads components dynamically when needed.</p> <p>Suspense \u2013 Displays fallback UI while a component is loading.</p> <p>Fallback UI \u2013 A loading indicator or placeholder displayed during component fetch.</p>"},{"location":"react/Important%20Keywords/#84-fragments","title":"8.4 Fragments (&lt; &gt;...&lt;/ &gt;)","text":"<p>Shorthand Fragment \u2013 Groups multiple elements without adding an extra DOM node.</p>"},{"location":"react/Important%20Keywords/#react-ui-libraries-tools","title":"React UI Libraries &amp; Tools","text":""},{"location":"react/Important%20Keywords/#91-ui-component-libraries","title":"9.1 UI Component Libraries","text":"<p>Material UI \u2013 A popular React UI framework with ready-made components.</p> <p>Ant Design \u2013 Enterprise-level UI design framework for React.</p> <p>Chakra UI \u2013 A flexible and accessible component library.</p> <p>Tailwind CSS \u2013 Utility-first CSS framework for styling React components.</p> <p>Bootstrap \u2013 CSS framework with React support for responsive design.</p>"},{"location":"react/Important%20Keywords/#92-state-data-handling","title":"9.2 State &amp; Data Handling","text":"<p>Apollo Client (GraphQL) \u2013 Manages state with GraphQL queries and mutations.</p> <p>SWR (Stale-While-Revalidate) \u2013 Fetches, caches, and revalidates data automatically.</p> <p>React Query \u2013 Data-fetching and state management library for asynchronous operations.</p>"},{"location":"react/Important%20Keywords/#93-testing-in-react","title":"9.3 Testing in React","text":"<p>Jest \u2013 JavaScript testing framework for unit and integration testing.</p> <p>React Testing Library \u2013 Utility for testing React components in a real-world scenario.</p> <p>Cypress \u2013 End-to-end testing framework for React applications.</p>"},{"location":"react/Important%20Keywords/#advanced-react-concepts","title":"Advanced React Concepts","text":""},{"location":"react/Important%20Keywords/#101-server-side-rendering-ssr-vs-client-side-rendering-csr","title":"10.1 Server-Side Rendering (SSR) vs Client-Side Rendering (CSR)","text":"<p>Server Components \u2013 Components that render on the server and do not require client-side JavaScript.</p> <p>Client Components \u2013 Components that execute in the browser and handle user interactions.</p> <p>Hydration \u2013 Process of attaching event handlers to server-rendered HTML.</p>"},{"location":"react/Important%20Keywords/#102-react-concurrent-mode-features","title":"10.2 React Concurrent Mode Features","text":"<p>Time-Slicing \u2013 Breaks rendering tasks into small chunks to improve responsiveness.</p> <p>Suspense for Data Fetching \u2013 Handles asynchronous data fetching with fallback UI.</p>"},{"location":"react/Important%20Keywords/#103-deployment-optimization","title":"10.3 Deployment &amp; Optimization","text":"<p>Webpack \u2013 Bundles JavaScript files for production.</p> <p>Babel \u2013 Transpiles modern JavaScript (ES6+) to older browser-compatible versions.</p> <p>Code Minification \u2013 Removes unnecessary characters to reduce file size and improve performance.</p>"},{"location":"react/Important%20Keywords/#miscellaneous-react-concepts","title":"Miscellaneous React Concepts","text":""},{"location":"react/Important%20Keywords/#111-event-handling","title":"11.1 Event Handling","text":"<p>Synthetic Events \u2013 React\u2019s wrapper around native browser events for cross-browser compatibility.</p> <p>Event Pooling \u2013 React reuses event objects to improve performance.</p> <p>Event Delegation \u2013 Uses a single event listener to manage multiple child events.</p>"},{"location":"react/Important%20Keywords/#112-render-props-pattern","title":"11.2 Render Props Pattern","text":"<p>Render Props \u2013 Passes a function as a prop to share logic between components.</p>"},{"location":"react/Important%20Keywords/#113-prop-drilling-vs-context-api","title":"11.3 Prop Drilling vs Context API","text":"<p>Prop Drilling \u2013 Passing props through multiple nested components.</p> <p>Context API \u2013 Avoids prop drilling by providing global state management.</p>"},{"location":"react/Important%20Keywords/#114-web-components-react","title":"11.4 Web Components &amp; React","text":"<p>Custom Elements \u2013 HTML elements that can be used inside React components.</p> <p>Shadow DOM \u2013 Encapsulates styles and structure in web components.</p>"},{"location":"react/Important%20Keywords/#important-react-development-patterns","title":"Important React Development Patterns","text":""},{"location":"react/Important%20Keywords/#121-higher-order-components-hoc","title":"12.1 Higher-Order Components (HOC)","text":"<p>Definition \u2013 A function that takes a component and returns an enhanced version.</p> <p>Example \u2013 Used for authentication, logging, or modifying props dynamically.</p>"},{"location":"react/Important%20Keywords/#122-compound-components-pattern","title":"12.2 Compound Components Pattern","text":"<p>Definition \u2013 A pattern where multiple components work together (e.g., a Tabs component).</p>"},{"location":"react/Important%20Keywords/#123-render-props-pattern","title":"12.3 Render Props Pattern","text":"<p>Definition \u2013 Uses a function prop to share logic across multiple components.</p>"},{"location":"react/Important%20Keywords/#124-controlled-vs-uncontrolled-components","title":"12.4 Controlled vs Uncontrolled Components","text":"<p>Controlled Components \u2013 Form inputs controlled by React state.</p> <p>Uncontrolled Components \u2013 Form inputs controlled by the DOM using refs.</p>"},{"location":"react/Important%20Keywords/#progressive-web-apps-pwa-in-react","title":"Progressive Web Apps (PWA) in React","text":""},{"location":"react/Important%20Keywords/#131-pwa-features-in-react","title":"13.1 PWA Features in React","text":"<p>Service Workers \u2013 Caches files for offline usage.</p> <p>Web App Manifest \u2013 Defines metadata like app name, icons, and colors.</p> <p>IndexedDB &amp; Cache API \u2013 Stores data in the browser for offline access.</p>"},{"location":"react/Important%20Keywords/#132-react-libraries-for-pwa","title":"13.2 React Libraries for PWA","text":"<p>Workbox \u2013 Simplifies service worker implementation.</p> <p>Next.js PWA Plugin \u2013 Adds PWA support to Next.js projects.</p>"},{"location":"react/Important%20Keywords/#security-authentication-in-react","title":"Security &amp; Authentication in React","text":""},{"location":"react/Important%20Keywords/#141-common-security-best-practices","title":"14.1 Common Security Best Practices","text":"<p>Cross-Site Scripting (XSS) Prevention \u2013 Avoids injecting malicious scripts into the app.</p> <p>Cross-Site Request Forgery (CSRF) Protection \u2013 Prevents unauthorized actions on behalf of a user.</p> <p>Content Security Policy (CSP) \u2013 Restricts script execution to prevent XSS attacks.</p>"},{"location":"react/Important%20Keywords/#142-authentication-authorization","title":"14.2 Authentication &amp; Authorization","text":"<p>JWT (JSON Web Token) \u2013 Token-based authentication system.</p> <p>OAuth \u2013 Secure authentication standard using third-party providers (Google, Facebook, GitHub).</p> <p>Firebase Authentication \u2013 Google\u2019s authentication solution for React apps.</p> <p>Auth0 \u2013 Authentication-as-a-service provider for React applications.</p>"},{"location":"react/Important%20Keywords/#react-native-for-mobile-development","title":"React Native (For Mobile Development)","text":""},{"location":"react/Important%20Keywords/#151-core-react-native-components","title":"15.1 Core React Native Components","text":"<p>View \u2013 Equivalent to &lt; div&gt; in web applications.</p> <p>Text \u2013 Renders text elements (like &lt; p&gt;).</p> <p>ScrollView \u2013 Enables scrolling content.</p> <p>FlatList \u2013 Optimized for rendering long lists.</p>"},{"location":"react/Important%20Keywords/#152-react-native-apis","title":"15.2 React Native APIs","text":"<p>AsyncStorage \u2013 Local storage API for persisting data.</p> <p>Camera &amp; Location APIs \u2013 Accessing device hardware features.</p> <p>Gesture Handling \u2013 Detecting touch gestures and interactions.</p>"},{"location":"react/Important%20Keywords/#153-navigation-in-react-native","title":"15.3 Navigation in React Native","text":"<p>React Navigation \u2013 Library for routing and navigation in React Native apps.</p> <p>Stack Navigator \u2013 Manages screens in a stack-based navigation.</p> <p>Drawer Navigator \u2013 Creates side menu navigation.</p> <p>Tab Navigator \u2013 Implements bottom tab navigation.</p>"},{"location":"react/Progress/","title":"Chapter Progress","text":""},{"location":"react/Progress/#complete-progress-not-started","title":"\u2705Complete, \ud83d\udfe1Progress , \u274cNot Started","text":"<ol> <li>\u2705 Introduction to React  </li> <li>\u2705 Setting Up the Environment  </li> <li>\u2705 Understanding JSX (JavaScript XML)  </li> <li>\u2705 React Components  </li> <li>\u2705 React State and Data Management  </li> <li>\u2705 Handling Events in React  </li> <li>\ud83d\udfe1 React Hooks (Fundamentals &amp; Advanced)  </li> <li>\u274c React Forms and Form Handling  </li> <li>\u2705 React Router (Navigation in React)  </li> <li>\ud83d\udfe1 State Management in React  </li> <li>\u274c React Styling Techniques  </li> <li>\u274c React Performance Optimization  </li> <li>\u274c React Server-Side Rendering (SSR) &amp; Static Site Generation (SSG)  </li> <li>\ud83d\udfe1 API Calls in React  </li> <li>\u274c React and Authentication  </li> <li>\u274c React Testing and Debugging  </li> <li>\u274c WebSockets and Real-Time Applications  </li> <li>\u274c React Progressive Web Apps (PWAs)  </li> <li>\u274c React Native (Mobile Development with React)  </li> <li>\u274c React Deployment and DevOps  </li> <li>\u274c Advanced React Topics  </li> </ol>"},{"location":"react/React%20%26%20Next%20Ecosystem/","title":"React &amp; Next Ecosystem","text":""},{"location":"react/React%20%26%20Next%20Ecosystem/#react-ecosystem","title":"\u269b\ufe0f React Ecosystem","text":"\ud83e\uddf1 Category \ud83e\uddf0 Tools, APIs, Techniques \ud83d\udd39 Core React (Built-in) <code>useState</code>, <code>useEffect</code>, <code>useRef</code>, <code>useContext</code>, <code>useReducer</code>, <code>useCallback</code>, <code>useMemo</code>, <code>useLayoutEffect</code>, <code>useImperativeHandle</code>, <code>useId</code>, <code>useTransition</code>, <code>useDeferredValue</code>, <code>useSyncExternalStore</code>, <code>useInsertionEffect</code> Functional Components, Class Components (legacy), Custom Hooks, Error Boundaries, Portals, <code>React.lazy</code>, <code>Suspense</code>, <code>React.memo</code>, <code>PureComponent</code> \ud83d\udee3\ufe0f Routing React Router : <code>&lt;BrowserRouter&gt;</code>, <code>&lt;Routes&gt;</code>, <code>&lt;Route&gt;</code>, <code>useNavigate</code>, <code>useLocation</code>, <code>useParams</code>, <code>useSearchParams</code>, Nested Routes, Redirects, Loaders, Protected Routes \ud83d\udd01 State Management Built-in: <code>useState</code>, <code>useReducer</code>, <code>useContext</code> External: Redux Toolkit, Zustand, Recoil, Jotai, MobX, Valtio, Effector, Nanostores, Hookstate \ud83d\udce6 Data Fetching &amp; Sync fetch, axios, React Query (TanStack), SWR, Apollo Client, urql, Relay, tRPC \ud83c\udfa8 Styling CSS-in-JS: styled-components, Emotion, Stitches, Linaria, Vanilla Extract Utility CSS: Tailwind CSS, UnoCSS, Windi CSS Traditional: CSS Modules, SCSS/SASS, PostCSS \ud83e\uddea Testing Unit: Jest, React Testing Library, Vitest, Enzyme (legacy) E2E: Cypress, Playwright, Puppeteer Mocking: MSW (Mock Service Worker), jest.fn, jest.mock \ud83d\udcd1 Forms &amp; Validation Form Libraries: React Hook Form, Formik, Final Form Validation: Zod, Yup, Joi, Superstruct, Valibot \ud83d\udd10 Authentication (UI) Context Auth, Protected Routes, JWT/Cookies Services: Firebase Auth, Auth0, Clerk, Magic.link \ud83c\udf0d i18n (Internationalization) react-i18next, LinguiJS, FormatJS/react-intl, rosetta, polyglot.js \ud83c\udf9e\ufe0f Animation Framer Motion, GSAP, React Spring, React Transition Group, Lottie, Motion One \ud83e\udde9 Component Libraries MUI, Chakra UI, ShadCN UI, Ant Design, Radix UI, Headless UI, React Bootstrap, Evergreen, Grommet \ud83d\udcda Component Tooling Storybook, Ladle, Bit.dev, Docz, Styleguidist \u2699\ufe0f Developer Experience React DevTools, Redux DevTools, Zustand Devtools, React Query Devtools, React Profiler ESLint (with react plugin), Prettier, Stylelint TypeScript support: <code>React.FC</code>, <code>JSX.Element</code>, <code>HTMLInputElement</code>, <code>ReactNode</code>, etc. \ud83d\udcc8 Analytics &amp; Monitoring Sentry, LogRocket, Bugsnag, PostHog, Mixpanel, Google Analytics Build Tools Vite, Create React App (CRA), Parcel, Webpack, Turbopack, react-snap \u2601\ufe0f Hosting Tools GitHub Pages, Firebase Hosting, Netlify, Railway \ud83d\udd0c Utilities &amp; Helpers clsx, date-fns, lodash, uuid, dotenv, nanoid, faker.js, classnames, ramda, slugify, dayjs \ud83e\uddf0 CLI &amp; Tooling create-react-app, Vite template, plop.js, hygen, create-react-library \ud83d\udcd8 Learning Resources react.dev, EpicReact.dev, UI.Dev, Kent C. Dodds Blog, reactpatterns.com, beta.reactjs.org"},{"location":"react/React%20%26%20Next%20Ecosystem/#nextjs-ecosystem","title":"\u26a1\ufe0f Next.js Ecosystem","text":"\ud83e\uddf1 Category \ud83e\uddf0 Tools, APIs, Techniques \ud83d\ude80 Core Features File-system routing (<code>pages/</code>, <code>app/</code>), Dynamic routes <code>[slug]</code>, Optional catch-all <code>[...slug]</code>, Layouts (<code>layout.tsx</code>), Metadata, Error &amp; Loading UI \ud83d\udcc1 App Router (New) Server Components (RSC), <code>page.tsx</code>, <code>layout.tsx</code>, <code>loading.tsx</code>, <code>error.tsx</code>, Route Groups <code>(group)/</code>, <code>usePathname()</code>, <code>useSearchParams()</code> \ud83d\udce6 Pages Router (LegacyClassic) <code>getStaticProps</code>, <code>getServerSideProps</code>, <code>getInitialProps</code>, <code>getStaticPaths</code>, <code>useRouter()</code> \ud83e\uddf5 Data Fetching Static Generation (SSG), Server-side Rendering (SSR), Incremental Static Regeneration (ISR), Client-side fetching (SWRTanStack Query/SWR, <code>useEffect</code>) \ud83d\udd17 Routing &amp; Navigation <code>&lt;Link /&gt;</code>, <code>useRouter()</code>, <code>usePathname()</code>, <code>useParams()</code>, <code>next/navigation</code>, Nested Layouts, Client &amp; Server Navigation Separation \ud83d\uddbc\ufe0f Images &amp; Assets <code>next/image</code>, Lazy loading, Blur-up, Responsive images, CDN optimization \ud83d\udd20 Fonts <code>next/font</code>, Google Fonts integration, Local fonts, Automatic optimization \ud83e\udde0 Metadata &amp; SEO <code>Metadata</code> object (App Router), <code>next/head</code> (Pages Router), <code>next-seo</code> \ud83e\uddec API Routes <code>pages/api/</code> (RESTful), <code>app/api/</code> (route handlers), Edge Functions, Middleware \ud83c\udf0d Internationalization Built-in <code>i18n</code> config, Domains &amp; Subpaths, <code>next-i18next</code>, react-intl, LinguiJS \ud83d\udd10 Middleware <code>middleware.ts</code>, Matchers, Auth filters, LoggingObservability, Redirects \ud83d\udd10 Authentication NextAuth.js, Clerk, Auth0, Firebase Auth, JWT + Middleware Consider pairing with context or Zustand \ud83d\udce6 State Management Redux Toolkit, Zustand, Jotai, Recoil, TanStack Query, SWR, tRPC \ud83d\udcda Styling Tailwind CSS, SCSS/SASS, PostCSS, styled-components, Emotion, CSS Modules, Vanilla Extract \ud83c\udf9e\ufe0f Animation Framer Motion, GSAP, React Spring Avoid using heavy animation libraries on server components \ud83e\udde9 Component Libraries ShadCN UI, Radix UI, Headless UI, MUI, Chakra UI, Ant Design \ud83e\uddea Testing Jest, Vitest, React Testing Library, Cypress, Playwright, MSW \ud83d\udcc8 Analytics &amp; Monitoring Vercel Analytics, Google Analytics, PostHog, Mixpanel, Sentry, LogRocket \ud83d\udd27 Dev Tools &amp; Linting ESLint (<code>next/core-web-vitals</code>), Prettier, TypeScript, React DevTools, Vercel Speed Insights \ud83d\udee0\ufe0f Build System SWC (default compiler), Webpack (fallback), Turbopack (experimental)Turbopack (Vercel\u2019s next-gen bundler), Avoid mixing Vite with App Router \ud83d\udce6 Image Providers Cloudinary, ImageKit, Imgix, Akamai \ud83e\uddf0 Deployment Platforms Vercel (official host), Netlify, Railway, Render, Docker \ud83e\uddea Preview &amp; CI/CD Preview Deployments (Vercel), GitHub Actions, GitLab CI, CircleCI, Deployment Hooks \ud83e\uddf1 CMS &amp; Content Sanity.io, Strapi, Contentful, Hygraph, Storyblok, <code>next-mdx-remote</code>, MDX \ud83d\udcd8 Learning Resources nextjs.org/docs, Vercel blog, Next.js GitHub, Lee Robinson\u2019s talks, Frontend Masters \ud83d\udd0c Utilities &amp; Helpers clsx, classnames, dotenv, lodash, dayjs, slugify, uuid, faker"},{"location":"react/React%20%26%20Next%20Ecosystem/#nextjs-ecosystem-alternatives-to-react-tools","title":"\ud83d\ude80 Next.js Ecosystem \u2014 Alternatives to React Tools","text":"\ud83e\uddf1 Category \u2705 React (Best) \ud83d\udd01 Next.js Alternative / Native \ud83d\udee3\ufe0f Routing React Router Built-in File-based Routing (<code>pages/</code> or <code>app/</code> dir) \ud83d\udd01 State Management Redux Toolkit, Zustand \u2705 Same libraries work seamlessly in Next.js \ud83d\udce6 Data Fetching &amp; Sync fetch, axios, React Query <code>getServerSideProps</code>, <code>getStaticProps</code>, <code>app-router</code> fetch + React Query \ud83c\udfa8 Styling Tailwind CSS \u2705 Same (First-class Tailwind support) \ud83e\uddea Testing Jest, React Testing Library, Cypress \u2705 Same (with extra config for SSR/Edge) \ud83d\udcd1 Forms &amp; Validation React Hook Form + Zod \u2705 Same (with server-side Zod validation in actions/API routes) \ud83d\udd10 Authentication Context Auth, Protected Routes, JWT/Cookies, Clerk, Auth0, Firebase Auth NextAuth , Clerk, Auth0 (first-class SSR support) \ud83c\udf0d i18n react-i18next Built-in i18n routing config or use <code>react-i18next</code> \ud83c\udf9e\ufe0f Animation Framer Motion, GSAP \u2705 Same \ud83e\udde9 Component Libraries MUI, Chakra UI, ShadCN UI \u2705 Same (ShadCN recommended in <code>app/</code> dir) \ud83d\udcda Component Tooling Storybook \u2705 Same \u2699\ufe0f Developer Experience React DevTools, Redux DevTools, Zustand Devtools, React Query Devtools, React Profiler, ESLint (with react plugin), Prettier, Stylelint \u2705 Same + Built-in ESLint, TypeScript, SWC compiler \ud83d\udcc8 Analytics &amp; Monitoring Sentry, Google Analytics \u2705 Same + Vercel Analytics++ (first-party)} \ud83d\udd27 Build Tools {Vite} {++Next.js compiler (SWC, Turbopack++)} \u2601\ufe0f Hosting {GitHub Pages, Firebase Hosting, Netlify} {++Vercel (official hosting), Netlify, Railway \ud83d\udd0c Utilities &amp; Helpers clsx, date-fns, lodash, uuid,  dotenv \u2705 Same \ud83e\uddf0 CLI &amp; Tooling Vite template <code>npx create-next-app</code> \ud83d\udcd8 Learning Resources react.dev, EpicReact.dev, UI.Dev nextjs.org/docs, Vercel Blog, Fireship"},{"location":"react/React%20%26%20Next%20Ecosystem/#summary-of-major-nextjs-advantages","title":"\u2705 Summary of Major Next.js Advantages","text":"<ul> <li>Built-in Routing (no need for React Router)</li> <li>Built-in SSR/SSG/ISR (no need for extra data fetching tools in some cases)</li> <li>File-system-based APIs (<code>/api/</code> folder)</li> <li>First-class TypeScript, ESLint, and Tailwind support</li> <li>Optimized deployment with Vercel</li> </ul>"},{"location":"react/react-list/","title":"Comprehensive React.js","text":""},{"location":"react/react-list/#1-introduction-to-react","title":"1. Introduction to React","text":"<ul> <li>What is React?<ul> <li>History and Evolution</li> <li>Core Philosophy of React</li> <li>Open-Source Community and Contributions</li> </ul> </li> <li>Features and Benefits of React<ul> <li>Declarative UI</li> <li>Component-Based Architecture</li> <li>Unidirectional Data Flow</li> <li>React Fiber Architecture</li> <li>JSX for Templating</li> </ul> </li> <li>React vs Other JavaScript Frameworks<ul> <li>Comparison with Angular, Vue, Svelte</li> <li>Pros and Cons</li> <li>When to Choose React Over Others</li> </ul> </li> <li>Understanding Virtual DOM vs Real DOM<ul> <li>How Virtual DOM Works</li> <li>Performance Benefits</li> <li>Diffing Algorithm in React</li> </ul> </li> <li>React Ecosystem Overview<ul> <li>React, ReactDOM, React Native, Next.js</li> <li>Key Libraries and Tools (Redux, React Router, Material UI, etc.)</li> <li>Server Components vs Client Components</li> </ul> </li> </ul>"},{"location":"react/react-list/#2-setting-up-the-environment","title":"2. Setting Up the Environment","text":"<ul> <li>Installing Node.js &amp; npm<ul> <li>Downloading and Installing Node.js</li> <li>Verifying Installation</li> <li>Understanding Node.js Package Manager (npm)</li> </ul> </li> <li>Installing Yarn (Alternative Package Manager)<ul> <li>npm vs Yarn</li> <li>Setting Up Yarn</li> <li>Using pnpm as an Alternative</li> </ul> </li> <li>Creating a React App using CRA (Create React App)<ul> <li>Creating and Running a New Project</li> <li>Understanding Default Folder Structure</li> <li>Customizing CRA Configuration</li> </ul> </li> <li>Project Structure of a React App<ul> <li>src, public, node_modules, package.json Explained</li> <li>Organizing Components, Hooks, and Utilities</li> <li>Best Practices for Folder Structure</li> </ul> </li> <li>Understanding package.json &amp; node_modules<ul> <li>Managing Dependencies</li> <li>npm Scripts Overview</li> <li>Peer Dependencies and Dev Dependencies</li> </ul> </li> <li>Running and Building a React Application<ul> <li>Development Server and Build Process</li> <li>Using Environment Variables in React</li> </ul> </li> <li>Using Vite as an Alternative to CRA<ul> <li>Benefits of Vite</li> <li>Setting Up Vite</li> <li>Performance Differences Between CRA and Vite</li> </ul> </li> </ul>"},{"location":"react/react-list/#3-understanding-jsx-javascript-xml","title":"3. Understanding JSX (JavaScript XML)","text":"<ul> <li>What is JSX?<ul> <li>Why JSX Exists</li> <li>Writing JSX Syntax</li> <li>JSX Compilation Process</li> </ul> </li> <li>JSX Syntax and Expressions<ul> <li>Embedding JavaScript Expressions</li> <li>Conditional Rendering with JSX</li> <li>Using Ternary Operators and Logical &amp;&amp;</li> </ul> </li> <li>Embedding JavaScript in JSX<ul> <li>Using Variables Inside JSX</li> <li>Inline Functions and Events</li> <li>Template Literals in JSX</li> </ul> </li> <li>JSX vs HTML Differences<ul> <li>Self-Closing Tags, ClassName, and Attributes</li> <li>Using Fragments in JSX</li> </ul> </li> <li>React.createElement() Behind the Scenes<ul> <li>JSX Transpilation</li> <li>Babel and Compilation Process</li> <li>How JSX Converts to React Elements</li> </ul> </li> </ul>"},{"location":"react/react-list/#4-react-components","title":"4. React Components","text":"<ul> <li>Functional Components<ul> <li>Stateless Components</li> <li>Writing Function-Based Components</li> <li>Arrow Functions vs Regular Functions in Components</li> </ul> </li> <li>Class Components<ul> <li>Understanding Component Classes</li> <li>Lifecycle Methods in Class Components</li> </ul> </li> <li>Props and Prop Drilling<ul> <li>Passing Data Between Components</li> <li>Avoiding Prop Drilling with Context API</li> <li>Default Props and PropTypes</li> </ul> </li> <li>Component Reusability and Composition<ul> <li>Best Practices for Reusable Components</li> <li>Composing Components</li> <li>Smart (Container) vs Dumb (Presentational) Components</li> </ul> </li> <li>Stateless vs Stateful Components<ul> <li>When to Use State in Components</li> <li>Converting Class Components to Functional Components</li> <li>State-driven UI Rendering</li> </ul> </li> <li>Default and Named Exports in Components<ul> <li>Exporting and Importing Components Correctly</li> <li>Common Mistakes with Import/Export</li> </ul> </li> <li>Dynamic Rendering with Props<ul> <li>Using Props to Change Component Behavior</li> <li>Conditional Rendering Based on Props</li> </ul> </li> <li>Higher-Order Components (HOC)<ul> <li>What are HOCs?</li> <li>Implementing an HOC</li> <li>Common Use Cases for HOCs</li> <li>Alternatives to HOCs (Render Props, Hooks)</li> </ul> </li> </ul>"},{"location":"react/react-list/#5-react-state-and-data-management","title":"5. React State and Data Management","text":"<ul> <li>Understanding State in React<ul> <li>What is State?</li> <li>State vs Props</li> <li>Why State is Immutable</li> </ul> </li> <li>useState Hook for State Management<ul> <li>Using useState to Handle Local State</li> <li>Functional Updates in useState</li> </ul> </li> <li>Class Component State vs Functional Component State<ul> <li>Managing State in Class Components</li> <li>Managing State in Functional Components with Hooks</li> <li>Migrating from Class to Functional Components</li> </ul> </li> <li>State Updates and Batch Processing<ul> <li>setState Behavior and Batch Updates</li> <li>Optimizing State Changes</li> <li>How React 18 Improves State Updates</li> </ul> </li> <li>Lifting State Up for Shared State Management<ul> <li>Why Lift State Up?</li> <li>Sharing State Between Components</li> <li>When to Use Context API vs Lifting State Up</li> </ul> </li> <li>Derived State from Props<ul> <li>When to Derive State from Props</li> <li>Avoiding Anti-Patterns</li> <li>Memoization for Derived State</li> </ul> </li> <li>React Context API for Global State Management<ul> <li>Creating and Using Context Providers</li> <li>Avoiding Unnecessary Renders with useMemo</li> <li>When to Use Context vs Redux</li> </ul> </li> <li>Advanced State Management Patterns<ul> <li>State Reducers with useReducer Hook</li> <li>Using Custom Hooks for State Management</li> <li>Comparison of Context API vs Redux vs Zustand</li> </ul> </li> </ul>"},{"location":"react/react-list/#6-handling-events-in-react","title":"6. Handling Events in React","text":"<ul> <li>Adding Event Listeners in JSX<ul> <li>Handling Click Events</li> <li>Handling Keyboard Events</li> <li>Handling Form Events</li> </ul> </li> <li>Handling Events with Functions<ul> <li>Inline Event Handlers</li> <li>Function References as Event Handlers</li> </ul> </li> <li>Synthetic Events in React<ul> <li>What are Synthetic Events?</li> <li>Differences Between Synthetic and Native Events</li> <li>event.persist()</li> </ul> </li> <li>Event Binding Methods (Arrow Functions, bind())<ul> <li>Using Arrow Functions</li> <li>Using bind() in Constructor</li> <li>Performance Considerations</li> </ul> </li> <li>Passing Arguments to Event Handlers<ul> <li>Using Inline Functions</li> <li>Using bind() Method</li> </ul> </li> <li>Preventing Default Behavior and Event Bubbling<ul> <li>Preventing Default Actions (e.g., form submission, links)</li> <li>Stopping Event Propagation</li> <li>Event Delegation in React</li> </ul> </li> </ul>"},{"location":"react/react-list/#7-react-hooks-fundamentals-advanced","title":"7. React Hooks (Fundamentals &amp; Advanced)","text":"<ul> <li>Introduction to Hooks<ul> <li>Why Hooks Were Introduced</li> <li>Rules of Hooks</li> <li>Migrating from Class Components to Hooks</li> </ul> </li> <li>useState Hook<ul> <li>Initializing State</li> <li>Updating State Correctly</li> <li>Functional Updates</li> <li>Lazy Initialization</li> </ul> </li> <li>useEffect Hook<ul> <li>Running Side Effects After Rendering</li> <li>Cleaning Up Effects</li> <li>Dependencies in useEffect</li> <li>Avoiding Infinite Loops</li> </ul> </li> <li>useRef Hook<ul> <li>Accessing DOM Elements</li> <li>Persisting Values Without Re-renders</li> <li>Storing Previous State Values</li> </ul> </li> <li>useContext Hook<ul> <li>Consuming Context Without Wrapper Components</li> <li>Avoiding Prop Drilling</li> <li>Best Practices for Context API</li> </ul> </li> <li>useReducer Hook<ul> <li>Alternative to useState for Complex State</li> <li>Understanding Actions and Reducers</li> <li>Combining Reducers</li> </ul> </li> <li>useMemo Hook<ul> <li>Performance Optimization for Expensive Calculations</li> <li>Dependency Array Best Practices</li> </ul> </li> <li>useCallback Hook<ul> <li>Preventing Unnecessary Function Re-Creation</li> <li>Memoizing Callback Functions</li> </ul> </li> <li>Custom Hooks in React<ul> <li>When to Create Custom Hooks</li> <li>Sharing Logic Between Components</li> <li>Best Practices for Custom Hooks</li> </ul> </li> </ul>"},{"location":"react/react-list/#8-react-forms-and-form-handling","title":"8. React Forms and Form Handling","text":"<ul> <li>Controlled Components vs Uncontrolled Components<ul> <li>What are Controlled Components?</li> <li>Managing Input State</li> <li>Using Refs for Uncontrolled Components</li> </ul> </li> <li>Handling Form Submission<ul> <li>Using onSubmit Event</li> <li>Preventing Default Behavior</li> <li>Handling Async Submissions</li> </ul> </li> <li>Handling Multiple Inputs<ul> <li>Using a Single Handler Function</li> <li>Managing State for Multiple Inputs</li> </ul> </li> <li>Validation in Forms<ul> <li>Client-Side Form Validation</li> <li>Custom Validation Functions</li> <li>Displaying Validation Messages</li> </ul> </li> <li>React Hook Form Library<ul> <li>Benefits of React Hook Form</li> <li>Registering Inputs</li> <li>Handling Errors</li> </ul> </li> <li>Third-party Form Libraries (Formik, Yup)<ul> <li>Setting Up Formik</li> <li>Schema Validation with Yup</li> <li>Handling Form Submission with Formik</li> </ul> </li> </ul>"},{"location":"react/react-list/#9-react-router-navigation-in-react","title":"9. React Router (Navigation in React)","text":"<ul> <li>Introduction to React Router<ul> <li>Why Use a Router?</li> <li>Key Features of React Router</li> </ul> </li> <li>Setting Up React Router<ul> <li>Installing React Router</li> <li>Configuring BrowserRouter</li> </ul> </li> <li>Route, Switch, and Link Components<ul> <li>Defining Routes</li> <li>Navigating with Link and NavLink</li> <li>Using Switch for Exclusive Routes</li> </ul> </li> <li>Dynamic Routing &amp; Nested Routes<ul> <li>Creating Dynamic Routes with URL Parameters</li> <li>Rendering Nested Routes</li> <li>Using useParams Hook</li> </ul> </li> <li>Programmatic Navigation (useNavigate, useHistory)<ul> <li>Navigating Programmatically</li> <li>Using useNavigate in React Router v6</li> <li>Handling Navigation State</li> </ul> </li> <li>Redirects and 404 Handling<ul> <li>Implementing Redirects</li> <li>Handling 404 Pages</li> <li>Custom Error Pages</li> </ul> </li> <li>Protected Routes &amp; Authentication Handling<ul> <li>Creating Protected Routes</li> <li>Implementing Authentication and Authorization</li> <li>Redirecting Unauthorized Users</li> </ul> </li> </ul>"},{"location":"react/react-list/#10-state-management-in-react","title":"10. State Management in React","text":""},{"location":"react/react-list/#1-context-api-and-usecontext-hook","title":"1. Context API and useContext Hook","text":"<ul> <li>What is Context API?</li> <li>When to Use Context API</li> <li>Creating a Context</li> <li>Providing and Consuming Context</li> <li>Using useContext Hook</li> <li>Avoiding Performance Issues with Context API</li> <li>Optimizing Context API with useMemo</li> </ul>"},{"location":"react/react-list/#2-when-to-use-context-api-vs-other-solutions","title":"2. When to Use Context API vs Other Solutions","text":"<ul> <li>Small-Scale vs Large-Scale Applications</li> <li>When Context API is Sufficient</li> <li>When to Use Redux or Other State Management Libraries</li> <li>Performance Considerations and Trade-offs</li> </ul>"},{"location":"react/react-list/#3-prop-drilling-vs-context-api","title":"3. Prop Drilling vs Context API","text":"<ul> <li>What is Prop Drilling?</li> <li>How Context API Solves Prop Drilling</li> <li>Alternatives to Context API (Component Composition, Render Props)</li> <li>Best Practices for Avoiding Unnecessary Re-renders</li> </ul>"},{"location":"react/react-list/#4-redux-state-management","title":"4. Redux (State Management)","text":""},{"location":"react/react-list/#41-introduction-to-redux","title":"4.1 Introduction to Redux","text":"<ul> <li>What is Redux?</li> <li>Why Use Redux?</li> <li>Redux Principles (Single Source of Truth, Read-Only State, Pure Functions)</li> <li>Comparing Redux with Context API</li> </ul>"},{"location":"react/react-list/#42-redux-store-actions-and-reducers","title":"4.2 Redux Store, Actions, and Reducers","text":"<ul> <li>Creating a Redux Store</li> <li>Defining Actions and Action Creators</li> <li>Writing Reducers</li> <li>Dispatching Actions</li> <li>Understanding Immutability in Redux</li> <li>Structuring Redux State</li> </ul>"},{"location":"react/react-list/#43-connecting-redux-with-react","title":"4.3 Connecting Redux with React","text":"<ul> <li>Installing Redux and React-Redux</li> <li>Using Provider and Store</li> <li>Connecting Components with useSelector and useDispatch</li> <li>Using mapStateToProps and mapDispatchToProps (Class Components)</li> <li>Optimizing Performance with Reselect</li> </ul>"},{"location":"react/react-list/#44-middleware-in-redux-redux-thunk-redux-saga","title":"4.4 Middleware in Redux (Redux Thunk &amp; Redux Saga)","text":"<ul> <li>What is Middleware?</li> <li>Introduction to Redux Thunk<ul> <li>Handling Asynchronous Logic</li> <li>Dispatching Multiple Actions</li> <li>Fetching Data with Redux Thunk</li> </ul> </li> <li>Introduction to Redux Saga<ul> <li>Understanding Generators in JavaScript</li> <li>Creating Sagas for Side Effects</li> <li>Handling API Calls and Side Effects</li> </ul> </li> </ul>"},{"location":"react/react-list/#5-zustand-recoil-alternative-state-management","title":"5. Zustand &amp; Recoil (Alternative State Management)","text":""},{"location":"react/react-list/#51-zustand","title":"5.1 Zustand","text":"<ul> <li>What is Zustand?</li> <li>Advantages of Zustand Over Redux</li> <li>Creating a Zustand Store</li> <li>Managing State in a Minimalist Way</li> <li>Using Middleware with Zustand</li> </ul>"},{"location":"react/react-list/#52-recoil","title":"5.2 Recoil","text":"<ul> <li>Introduction to Recoil</li> <li>Atoms and Selectors in Recoil</li> <li>Using Recoil State in Components</li> <li>Managing Global State with Recoil</li> <li>Performance Benefits of Recoil</li> </ul>"},{"location":"react/react-list/#6-mobx-for-state-management","title":"6. MobX for State Management","text":"<ul> <li>Introduction to MobX</li> <li>MobX vs Redux</li> <li>Observables and Actions in MobX</li> <li>Using MobX in React Components</li> <li>Best Practices for MobX State Management</li> </ul> <p>This comprehensive guide covers multiple state management solutions in React, ensuring a solid understanding of different approaches.</p>"},{"location":"react/react-list/#11-react-styling-techniques","title":"11. React Styling Techniques","text":""},{"location":"react/react-list/#1-css-in-react","title":"1. CSS in React","text":"<ul> <li>Inline Styles in React<ul> <li>How to Apply Inline Styles</li> <li>Pros and Cons of Inline Styles</li> <li>Handling Dynamic Styles with Inline Styles</li> </ul> </li> <li>External CSS Stylesheets<ul> <li>Importing and Using External CSS Files</li> <li>Structuring CSS for Large Projects</li> <li>Naming Conventions (BEM, SMACSS)</li> </ul> </li> <li>CSS Modules<ul> <li>What are CSS Modules?</li> <li>Using CSS Modules in React</li> <li>Scope Isolation and Benefits</li> </ul> </li> </ul>"},{"location":"react/react-list/#2-styled-components-css-in-js","title":"2. Styled Components (CSS-in-JS)","text":"<ul> <li>Introduction to Styled Components</li> <li>Installing and Setting Up Styled Components</li> <li>Writing Styled Components</li> <li>Using Props to Modify Styles Dynamically</li> <li>Theming with Styled Components</li> <li>Global Styles in Styled Components</li> <li>Best Practices for Styled Components</li> </ul>"},{"location":"react/react-list/#3-tailwind-css-with-react","title":"3. Tailwind CSS with React","text":"<ul> <li>What is Tailwind CSS?</li> <li>Installing Tailwind CSS in a React Project</li> <li>Using Utility Classes for Styling</li> <li>Customizing Tailwind Configurations</li> <li>Optimizing Performance with PurgeCSS</li> <li>Comparing Tailwind with Traditional CSS Approaches</li> </ul>"},{"location":"react/react-list/#4-emotionjs-for-css-in-js","title":"4. Emotion.js for CSS-in-JS","text":"<ul> <li>Introduction to Emotion.js</li> <li>Setting Up Emotion in React</li> <li>Writing CSS with Emotion</li> <li>Theming with Emotion</li> <li>Performance Considerations with Emotion</li> </ul>"},{"location":"react/react-list/#5-bootstrap-material-ui-with-react","title":"5. Bootstrap &amp; Material UI with React","text":"<ul> <li>Installing and Using Bootstrap in React</li> <li>Using Material UI Components</li> <li>Customizing Bootstrap and Material UI Themes</li> <li>Performance Considerations for UI Libraries</li> <li>When to Use UI Component Libraries vs Custom Styling</li> </ul>"},{"location":"react/react-list/#12-react-performance-optimization","title":"12. React Performance Optimization","text":""},{"location":"react/react-list/#1-reactmemo-for-component-optimization","title":"1. React.memo for Component Optimization","text":"<ul> <li>What is React.memo?</li> <li>When to Use React.memo</li> <li>Preventing Unnecessary Renders</li> <li>Limitations of React.memo</li> </ul>"},{"location":"react/react-list/#2-usecallback-usememo-hooks","title":"2. useCallback &amp; useMemo Hooks","text":"<ul> <li>How useCallback Prevents Unnecessary Function Recreation</li> <li>How useMemo Optimizes Computation-heavy Operations</li> <li>Practical Examples of useCallback and useMemo</li> <li>When Not to Use useCallback and useMemo</li> </ul>"},{"location":"react/react-list/#3-lazy-loading-react-suspense","title":"3. Lazy Loading &amp; React Suspense","text":"<ul> <li>What is Lazy Loading?</li> <li>Implementing React.lazy for Component Splitting</li> <li>Using Suspense for Fallback UI</li> <li>Best Practices for Lazy Loading</li> </ul>"},{"location":"react/react-list/#4-code-splitting-dynamic-imports","title":"4. Code Splitting &amp; Dynamic Imports","text":"<ul> <li>Introduction to Code Splitting</li> <li>Using React.lazy and Import() for Code Splitting</li> <li>Route-based Code Splitting with React Router</li> <li>Performance Benefits of Code Splitting</li> </ul>"},{"location":"react/react-list/#5-avoiding-unnecessary-re-renders","title":"5. Avoiding Unnecessary Re-renders","text":"<ul> <li>Understanding React's Reconciliation Process</li> <li>Key Techniques to Reduce Re-renders</li> <li>Using shouldComponentUpdate in Class Components</li> <li>Using PureComponent in Class Components</li> <li>Using React.memo and useMemo in Functional Components</li> <li>Avoiding Unnecessary State and Prop Changes</li> </ul>"},{"location":"react/react-list/#6-virtualization-with-react-virtualized","title":"6. Virtualization with React Virtualized","text":"<ul> <li>What is Virtualization?</li> <li>Using React Virtualized for Large Lists</li> <li>Windowing for Performance Optimization</li> <li>When to Use Virtualization</li> </ul>"},{"location":"react/react-list/#13-react-server-side-rendering-ssr-static-site-generation-ssg","title":"13. React Server-Side Rendering (SSR) &amp; Static Site Generation (SSG)","text":""},{"location":"react/react-list/#1-introduction-to-ssr-ssg","title":"1. Introduction to SSR &amp; SSG","text":"<ul> <li>Difference Between SSR, SSG, and CSR (Client-Side Rendering)</li> <li>Use Cases for SSR and SSG</li> <li>Performance Benefits and SEO Considerations</li> </ul>"},{"location":"react/react-list/#2-benefits-of-ssr-and-ssg","title":"2. Benefits of SSR and SSG","text":"<ul> <li>Improved SEO with Pre-rendering</li> <li>Faster Initial Page Load</li> <li>Caching and Performance Optimization</li> <li>Reduced Client-Side JavaScript Load</li> </ul>"},{"location":"react/react-list/#3-implementing-ssr-with-nextjs","title":"3. Implementing SSR with Next.js","text":"<ul> <li>What is Next.js?</li> <li>Setting Up a Next.js Project</li> <li>Using <code>getServerSideProps()</code> for Server Rendering</li> <li>Hydration and Client-Side Interactivity</li> <li>API Fetching in SSR Mode</li> <li>Common Pitfalls and Debugging SSR Issues</li> </ul>"},{"location":"react/react-list/#4-static-site-generation-ssg-with-nextjs","title":"4. Static Site Generation (SSG) with Next.js","text":"<ul> <li>What is SSG and How It Works?</li> <li>Using <code>getStaticProps()</code> for Static Site Generation</li> <li>Incremental Static Regeneration (ISR)</li> <li>Combining SSG with Client-Side Rendering</li> <li>Best Practices for Static Sites</li> </ul>"},{"location":"react/react-list/#5-api-routes-in-nextjs","title":"5. API Routes in Next.js","text":"<ul> <li>Creating API Endpoints in Next.js</li> <li>Serverless Functions in Next.js</li> <li>Authentication and Middleware in API Routes</li> <li>Fetching Data from API Routes in Next.js</li> <li>Deployment Considerations for API Routes</li> </ul>"},{"location":"react/react-list/#14-api-calls-in-react","title":"14. API Calls in React","text":""},{"location":"react/react-list/#1-fetch-api-vs-axios-for-http-requests","title":"1. Fetch API vs Axios for HTTP Requests","text":"<ul> <li>Introduction to Fetch API</li> <li>Using Axios for API Requests</li> <li>Pros and Cons of Fetch API vs Axios</li> <li>Setting Up Axios Interceptors</li> </ul>"},{"location":"react/react-list/#2-handling-promises-asyncawait","title":"2. Handling Promises &amp; Async/Await","text":"<ul> <li>Using Promises with <code>.then()</code></li> <li>Writing Asynchronous Code with <code>async/await</code></li> <li>Error Handling in Async Functions</li> <li>Best Practices for Handling API Calls</li> </ul>"},{"location":"react/react-list/#3-useeffect-with-api-calls","title":"3. useEffect with API Calls","text":"<ul> <li>Fetching Data Inside <code>useEffect</code></li> <li>Dependency Array and Performance Considerations</li> <li>Cleanup Functions in API Calls</li> <li>Preventing Memory Leaks with API Calls</li> </ul>"},{"location":"react/react-list/#4-handling-api-errors-and-loading-states","title":"4. Handling API Errors and Loading States","text":"<ul> <li>Error Handling Best Practices</li> <li>Showing Loading Spinners and Skeleton UI</li> <li>Implementing Retry Logic for API Requests</li> <li>Handling Rate Limits and API Throttling</li> </ul>"},{"location":"react/react-list/#5-caching-api-responses-with-swr-and-react-query","title":"5. Caching API Responses with SWR and React Query","text":"<ul> <li>What is SWR (Stale-While-Revalidate)?</li> <li>Fetching and Caching Data with SWR</li> <li>Introduction to React Query</li> <li>Optimistic UI Updates with React Query</li> <li>Comparison of SWR vs React Query</li> </ul>"},{"location":"react/react-list/#6-working-with-graphql-apis-in-react-apollo-client","title":"6. Working with GraphQL APIs in React (Apollo Client)","text":"<ul> <li>Introduction to GraphQL</li> <li>Setting Up Apollo Client in React</li> <li>Fetching Data with <code>useQuery</code> and <code>useMutation</code></li> <li>Using Apollo Cache for State Management</li> <li>Subscriptions with GraphQL and Apollo Client</li> </ul>"},{"location":"react/react-list/#15-react-and-authentication","title":"15. React and Authentication","text":""},{"location":"react/react-list/#1-authentication-strategies-jwt-oauth-firebase-auth","title":"1. Authentication Strategies (JWT, OAuth, Firebase Auth)","text":"<ul> <li>Introduction to Authentication Strategies</li> <li>Comparing JWT, OAuth, and Firebase Authentication</li> <li>Pros and Cons of Different Authentication Methods</li> </ul>"},{"location":"react/react-list/#2-implementing-user-authentication-in-react","title":"2. Implementing User Authentication in React","text":"<ul> <li>Authentication Flow in React Applications</li> <li>Using Context API for Authentication State</li> <li>Implementing Private and Protected Routes</li> <li>Managing Authentication Tokens Securely</li> </ul>"},{"location":"react/react-list/#3-using-firebase-authentication","title":"3. Using Firebase Authentication","text":"<ul> <li>Setting Up Firebase in a React App</li> <li>Firebase Email &amp; Password Authentication</li> <li>Google, Facebook, and GitHub Authentication with Firebase</li> <li>Storing User Data in Firebase Firestore</li> <li>Handling Authentication State with Firebase</li> </ul>"},{"location":"react/react-list/#4-session-management-cookies","title":"4. Session Management &amp; Cookies","text":"<ul> <li>Storing Tokens in Local Storage vs Cookies</li> <li>HTTP-only Cookies for Secure Authentication</li> <li>Implementing Token Refresh Mechanisms</li> <li>Handling Auto-Logout and Expired Sessions</li> </ul>"},{"location":"react/react-list/#5-role-based-access-control-rbac","title":"5. Role-Based Access Control (RBAC)","text":"<ul> <li>What is RBAC?</li> <li>Defining User Roles and Permissions</li> <li>Implementing Role-Based Access in React Components</li> <li>Securing API Endpoints with User Roles</li> </ul>"},{"location":"react/react-list/#6-oauth2-authentication-google-facebook-github-login","title":"6. OAuth2 Authentication (Google, Facebook, GitHub Login)","text":"<ul> <li>Introduction to OAuth2 Authentication</li> <li>Setting Up OAuth with Google, Facebook, and GitHub</li> <li>Handling OAuth Tokens and User Sessions</li> <li>Securing OAuth Authentication in React</li> <li>Best Practices for OAuth Integration</li> </ul>"},{"location":"react/react-list/#16-react-testing-and-debugging","title":"16. React Testing and Debugging","text":""},{"location":"react/react-list/#introduction-to-testing-in-react","title":"Introduction to Testing in React","text":"<ul> <li>Importance of Testing in React Applications</li> <li>Types of Testing: Unit, Integration, and E2E</li> </ul>"},{"location":"react/react-list/#unit-testing-with-jest","title":"Unit Testing with Jest","text":"<ul> <li>Setting Up Jest in a React Project</li> <li>Writing and Running Basic Unit Tests</li> <li>Mocking Functions and Modules</li> <li>Snapshot Testing with Jest</li> </ul>"},{"location":"react/react-list/#react-testing-library","title":"React Testing Library","text":"<ul> <li>Why Use React Testing Library?</li> <li>Rendering Components for Testing</li> <li>Simulating User Events</li> <li>Asserting DOM Changes</li> <li>Testing Asynchronous Operations</li> </ul>"},{"location":"react/react-list/#enzyme-for-component-testing","title":"Enzyme for Component Testing","text":"<ul> <li>Introduction to Enzyme</li> <li>Shallow Rendering vs Full Rendering</li> <li>Simulating Events and Interactions</li> <li>Comparing Enzyme with React Testing Library</li> </ul>"},{"location":"react/react-list/#end-to-end-e2e-testing-with-cypress","title":"End-to-End (E2E) Testing with Cypress","text":"<ul> <li>Introduction to Cypress</li> <li>Setting Up Cypress in React</li> <li>Writing Basic E2E Tests</li> <li>Testing Navigation and Form Submissions</li> <li>Mocking API Responses in Cypress</li> </ul>"},{"location":"react/react-list/#debugging-react-applications-with-react-developer-tools","title":"Debugging React Applications with React Developer Tools","text":"<ul> <li>Installing React Developer Tools</li> <li>Inspecting Components and State</li> <li>Debugging Performance Issues</li> <li>Profiling Component Renders</li> </ul>"},{"location":"react/react-list/#17-websockets-and-real-time-applications","title":"17. WebSockets and Real-Time Applications","text":""},{"location":"react/react-list/#introduction-to-websockets","title":"Introduction to WebSockets","text":"<ul> <li>What Are WebSockets?</li> <li>How WebSockets Work</li> <li>Advantages of Using WebSockets</li> </ul>"},{"location":"react/react-list/#integrating-socketio-with-react","title":"Integrating Socket.io with React","text":"<ul> <li>Setting Up Socket.io in a React Project</li> <li>Connecting to a WebSocket Server</li> <li>Sending and Receiving Messages</li> </ul>"},{"location":"react/react-list/#building-a-real-time-chat-app-with-websockets","title":"Building a Real-time Chat App with WebSockets","text":"<ul> <li>Designing the Chat UI</li> <li>Handling Incoming and Outgoing Messages</li> <li>Broadcasting Messages to Multiple Clients</li> <li>Storing Chat History</li> </ul>"},{"location":"react/react-list/#websocket-events-and-state-management","title":"WebSocket Events and State Management","text":"<ul> <li>Handling WebSocket Events in React</li> <li>Using useEffect for WebSocket Connections</li> <li>Managing WebSocket State Efficiently</li> </ul>"},{"location":"react/react-list/#polling-vs-websockets-vs-server-sent-events-sse","title":"Polling vs WebSockets vs Server-Sent Events (SSE)","text":"<ul> <li>Differences Between Polling, WebSockets, and SSE</li> <li>When to Use Each Approach</li> <li>Performance Considerations for Real-time Applications</li> </ul>"},{"location":"react/react-list/#18-react-progressive-web-apps-pwas","title":"18. React Progressive Web Apps (PWAs)","text":""},{"location":"react/react-list/#what-are-pwas","title":"What are PWAs?","text":"<ul> <li>Definition and Characteristics</li> <li>Benefits of Building PWAs</li> </ul>"},{"location":"react/react-list/#adding-service-workers-in-react","title":"Adding Service Workers in React","text":"<ul> <li>What is a Service Worker?</li> <li>Registering a Service Worker in React</li> <li>Lifecycle of a Service Worker</li> </ul>"},{"location":"react/react-list/#offline-support-in-react-apps","title":"Offline Support in React Apps","text":"<ul> <li>Caching Assets for Offline Access</li> <li>Handling Offline Requests</li> <li>Implementing Offline Fallbacks</li> </ul>"},{"location":"react/react-list/#caching-and-background-sync","title":"Caching and Background Sync","text":"<ul> <li>Using Cache API for Asset Caching</li> <li>Background Sync for Deferred Requests</li> <li>Strategies for Managing Cached Data</li> </ul>"},{"location":"react/react-list/#web-push-notifications-in-react","title":"Web Push Notifications in React","text":"<ul> <li>Introduction to Web Push Notifications</li> <li>Setting Up Push Notifications in React</li> <li>Sending Push Notifications via a Server</li> <li>Handling Push Events in Service Workers</li> </ul>"},{"location":"react/react-list/#19-react-native-mobile-development-with-react","title":"19. React Native (Mobile Development with React)","text":""},{"location":"react/react-list/#introduction-to-react-native","title":"Introduction to React Native","text":"<ul> <li>What is React Native?</li> <li>Benefits of React Native for Mobile Development</li> <li>Differences Between React Native and Native Development (Swift/Kotlin)</li> </ul>"},{"location":"react/react-list/#react-native-vs-reactjs","title":"React Native vs React.js","text":"<ul> <li>Key Differences in Development Approach</li> <li>Shared Concepts Between React and React Native</li> <li>Platform-Specific Features and Limitations</li> </ul>"},{"location":"react/react-list/#setting-up-react-native-environment","title":"Setting up React Native Environment","text":"<ul> <li>Installing Node.js and npm</li> <li>Setting Up React Native CLI</li> <li>Using Expo for Easier Development</li> <li>Running React Native Apps on Emulator and Physical Devices</li> </ul>"},{"location":"react/react-list/#building-components-in-react-native","title":"Building Components in React Native","text":"<ul> <li>Understanding React Native Components (View, Text, Image, ScrollView, etc.)</li> <li>Styling Components in React Native (Flexbox, Stylesheets)</li> <li>Handling User Inputs with TextInput, Buttons, and Touchables</li> <li>Using Platform-Specific Code (Platform API)</li> </ul>"},{"location":"react/react-list/#react-navigation-for-mobile-apps","title":"React Navigation for Mobile Apps","text":"<ul> <li>Introduction to React Navigation</li> <li>Setting Up Navigation Stack</li> <li>Tab Navigation vs Drawer Navigation</li> <li>Passing Data Between Screens</li> <li>Handling Deep Linking and Navigation Events</li> </ul>"},{"location":"react/react-list/#expo-vs-react-native-cli","title":"Expo vs React Native CLI","text":"<ul> <li>What is Expo and When to Use It?</li> <li>Advantages and Limitations of Expo</li> <li>Bare Workflow vs Managed Workflow</li> </ul>"},{"location":"react/react-list/#20-react-deployment-and-devops","title":"20. React Deployment and DevOps","text":""},{"location":"react/react-list/#deploying-react-apps-on-vercel-netlify","title":"Deploying React Apps on Vercel &amp; Netlify","text":"<ul> <li>Setting Up Continuous Deployment with Vercel</li> <li>Deploying a React App to Netlify</li> <li>Configuring Environment Variables on Vercel &amp; Netlify</li> </ul>"},{"location":"react/react-list/#deploying-react-apps-on-firebase-hosting","title":"Deploying React Apps on Firebase Hosting","text":"<ul> <li>Introduction to Firebase Hosting</li> <li>Deploying a React App to Firebase</li> <li>Setting Up Custom Domains and SSL in Firebase</li> </ul>"},{"location":"react/react-list/#deploying-react-apps-on-aws-amplify","title":"Deploying React Apps on AWS Amplify","text":"<ul> <li>Overview of AWS Amplify for React</li> <li>Connecting AWS Amplify to a React Project</li> <li>Configuring API Gateway and Authentication in Amplify</li> </ul>"},{"location":"react/react-list/#cicd-with-github-actions-for-react","title":"CI/CD with GitHub Actions for React","text":"<ul> <li>Introduction to CI/CD Pipelines</li> <li>Setting Up GitHub Actions for Automated Deployments</li> <li>Running Tests and Linting Before Deployment</li> </ul>"},{"location":"react/react-list/#dockerizing-a-react-application","title":"Dockerizing a React Application","text":"<ul> <li>Introduction to Docker and Containers</li> <li>Writing a Dockerfile for a React App</li> <li>Building and Running a React App in a Docker Container</li> <li>Deploying a Dockerized React App to AWS/GCP</li> </ul>"},{"location":"react/react-list/#performance-monitoring-with-lighthouse","title":"Performance Monitoring with Lighthouse","text":"<ul> <li>Using Google Lighthouse for Performance Audits</li> <li>Optimizing Load Time and Accessibility in React Apps</li> <li>Automating Lighthouse Reports in CI/CD Pipelines</li> </ul>"},{"location":"react/react-list/#21-advanced-react-topics","title":"21. Advanced React Topics","text":""},{"location":"react/react-list/#micro-frontends-with-react","title":"Micro Frontends with React","text":"<ul> <li>What Are Micro Frontends?</li> <li>Implementing Micro Frontends in React Using Webpack Module Federation</li> <li>Advantages and Challenges of Micro Frontend Architecture</li> </ul>"},{"location":"react/react-list/#server-components-in-react-react-18","title":"Server Components in React (React 18+)","text":"<ul> <li>Introduction to Server Components</li> <li>How Server Components Differ from Client Components</li> <li>Building a Hybrid App with Server and Client Components</li> </ul>"},{"location":"react/react-list/#react-fiber-architecture","title":"React Fiber Architecture","text":"<ul> <li>What is React Fiber?</li> <li>Differences Between React Fiber and Legacy Reconciler</li> <li>How React Fiber Improves Performance</li> <li>Scheduling and Concurrency in React Fiber</li> </ul>"},{"location":"react/react-list/#webassembly-with-react","title":"WebAssembly with React","text":"<ul> <li>What is WebAssembly (WASM)?</li> <li>Using WebAssembly in a React Project</li> <li>Performance Benefits of WebAssembly with React</li> <li>Practical Use Cases of WebAssembly in React Applications</li> </ul>"},{"location":"react/react-list/#ai-machine-learning-with-reactjs","title":"AI &amp; Machine Learning with React.js","text":"<ul> <li>Using TensorFlow.js with React for ML Models</li> <li>Building AI-Powered UIs in React</li> <li>Integrating Chatbots and AI Assistants in React Apps</li> </ul>"},{"location":"react/react-list/#react-concurrent-mode-suspense-for-data-fetching","title":"React Concurrent Mode &amp; Suspense for Data Fetching","text":"<ul> <li>What is Concurrent Mode?</li> <li>Benefits of Using Concurrent Rendering</li> <li>Understanding Suspense for Data Fetching</li> <li>Implementing Streaming Server Rendering with React Suspense</li> </ul>"},{"location":"ts/1.Introduction%20to%20TS/","title":"1. Introduction to TypeScript","text":""},{"location":"ts/1.Introduction%20to%20TS/#what-is-typescript","title":"What is TypeScript?","text":"<ul> <li>TypeScript is a strongly typed, compiled superset of JavaScript developed and maintained by Microsoft.</li> <li>TypeScript is a programming language that builds on JavaScript by adding static types.</li> <li>It helps you catch errors early in your code before running it.</li> </ul> <p>It adds:</p> <ul> <li>Static typing</li> <li>Modern JavaScript (ES6+) features</li> <li>Rich IDE support</li> <li>Compile-time error checking</li> </ul> <p>TypeScript files use the <code>.ts</code> or <code>.tsx</code> extension and compile down to plain JavaScript, ensuring compatibility with browsers and JavaScript runtimes.</p>"},{"location":"ts/1.Introduction%20to%20TS/#why-typescript-benefits-over-javascript","title":"Why TypeScript? \ud83e\udde0 Benefits Over JavaScript","text":"Feature JavaScript TypeScript Static Typing \u274c No \u2705 Yes Compile-time Checks \u274c No \u2705 Yes Autocomplete &amp; IntelliSense \ud83d\udd38 Partial \u2705 Full Refactoring Support \ud83d\udd38 Limited \u2705 Strong Interfaces &amp; Enums \u274c No \u2705 Yes Modern ES Support \u2705 Yes (partially) \u2705 Yes (with back-compatibility) <p>Main Benefits:</p> <ul> <li>Early Error Detection: Catch bugs at compile time.</li> <li>Improved Developer Productivity: With autocompletion, tooltips, and type safety.</li> <li>Better Documentation: Types act as a form of documentation.</li> <li>Scalability: Makes large codebases easier to maintain.</li> </ul>"},{"location":"ts/1.Introduction%20to%20TS/#typescript-vs-javascript","title":"TypeScript vs JavaScript \u2694\ufe0f","text":"Feature JavaScript TypeScript Language Type Dynamic Static (optionally) Syntax Flexible Superset of JS Runtime Interpreted Compiled to JS Tooling Good Excellent (with TS support) Learning Curve Easy Slightly Steeper <p>TypeScript doesn\u2019t replace JavaScript \u2014 it enhances it. You still write JavaScript, but with optional types and compiler checks.</p>"},{"location":"ts/1.Introduction%20to%20TS/#setting-up-a-typescript-project","title":"Setting Up a TypeScript Project","text":"<ol> <li>Initialize with <code>npm init -y</code> and install TypeScript using <code>npm install typescript --save-dev</code>.  </li> <li>Create a config using <code>npx tsc --init</code> and write <code>.ts</code> files in <code>src/</code>.  </li> <li>Compile with <code>npx tsc</code> or use <code>npx tsc --watch</code> for live recompile.  </li> <li>Use <code>tsconfig.json</code> to set <code>rootDir</code>, <code>outDir</code>, <code>strict</code>, etc.</li> </ol>"},{"location":"ts/1.Introduction%20to%20TS/#running-compiling-typescript-tsc","title":"Running &amp; Compiling TypeScript (<code>tsc</code>)","text":"<ol> <li>Compile a single file: <code>npx tsc file.ts</code>.  </li> <li>Compile entire project (uses <code>tsconfig.json</code>): <code>npx tsc</code>.  </li> <li>Enable watch mode: <code>npx tsc --watch</code>.  </li> <li>Customize output with <code>rootDir</code>, <code>outDir</code>, <code>target</code>, etc. in <code>tsconfig.json</code>.</li> </ol>"},{"location":"ts/1.Introduction%20to%20TS/#tsc-commands","title":"tsc Commands","text":"<pre><code># Initialize a tsconfig.json file\ntsc --init\n\n# Compile a single TypeScript file\ntsc file.ts\n\n# Compile the whole project based on tsconfig.json\ntsc\n\n# Watch mode - recompile on file changes\ntsc --watch\n\n# Specify custom config file\ntsc --project ./path/to/tsconfig.json\n\n# Compile and emit to a specific output directory\ntsc --outDir dist\n\n# Enable strict type-checking\ntsc --strict\n\n# Skip emitting JS files (type-check only)\ntsc --noEmit\n\n# Enable incremental builds\ntsc --incremental\n\n# Clean build outputs (when using project references)\ntsc --build --clean\n\n# Target a specific ECMAScript version\ntsc --target ES6\n\n# Set module system (CommonJS, ESNext, etc.)\ntsc --module commonjs\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/","title":"API and TypeScript","text":""},{"location":"ts/10.5.API%20and%20TypeScript/#typing-api-responses","title":"Typing API Responses","text":"<ul> <li>It's important to define interfaces or types for the data you expect from an API.</li> <li>This improves type safety and reduces runtime bugs.</li> </ul> <pre><code>// \u2705 Defining expected response types\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#fetching-data-with-fetch","title":"Fetching Data with <code>fetch</code>","text":"<ul> <li>When using <code>fetch</code>, manually cast the returned data using <code>as</code>.</li> </ul> <pre><code>// \u2705 Using fetch with TypeScript\nasync function fetchUser(): Promise&lt;User&gt; {\n  const res = await fetch(\"/api/user\");\n  const data = await res.json();\n  return data as User;\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#fetching-with-axios","title":"Fetching with Axios","text":"<ul> <li>Axios supports generics for type-safe responses.</li> </ul> <pre><code>// \u2705 Using Axios with TypeScript\nimport axios from \"axios\";\n\nasync function getUser() {\n  const response = await axios.get&lt;User&gt;(\"/api/user\");\n  console.log(response.data.id); // strongly typed\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#handling-errors-in-api-calls","title":"Handling Errors in API Calls","text":"<ul> <li>Use <code>try/catch</code> and narrow the error type for better safety.</li> </ul> <pre><code>// \u2705 Error handling with type guards\ntry {\n  const user = await fetchUser();\n} catch (err) {\n  if (err instanceof Error) {\n    console.error(\"Error:\", err.message);\n  }\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#typing-api-parameters","title":"Typing API Parameters","text":"<ul> <li>You can define types for input/query parameters to enforce structure.</li> </ul> <pre><code>// \u2705 Query parameters\ninterface QueryParams {\n  search: string;\n  page: number;\n}\n\nfunction getSearchUrl(params: QueryParams): string {\n  const query = new URLSearchParams(params as any).toString();\n  return `/api/search?${query}`;\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#generics-with-api-data","title":"Generics with API Data","text":"<ul> <li>Use generics to type reusable API functions.</li> </ul> <pre><code>// \u2705 Generic API fetch\nasync function fetchData&lt;T&gt;(url: string): Promise&lt;T&gt; {\n  const res = await fetch(url);\n  const data = await res.json();\n  return data as T;\n}\n\n// Usage:\nconst user = await fetchData&lt;User&gt;(\"/api/user\");\nconst posts = await fetchData&lt;Post[]&gt;(\"/api/posts\");\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#utility-types-for-api-responses","title":"Utility Types for API Responses","text":"<ul> <li>Use <code>Partial</code>, <code>Pick</code>, or <code>Omit</code> when modifying or validating response data.</li> </ul> <pre><code>// \u2705 Creating types for updating user info\ntype UpdateUserDTO = Partial&lt;User&gt;; // All fields optional\ntype PublicUser = Pick&lt;User, \"id\" | \"name\"&gt;;\ntype PrivateUser = Omit&lt;User, \"email\"&gt;;\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#zod-or-yup-for-runtime-validation-optional","title":"Zod or Yup for Runtime Validation (Optional)","text":"<ul> <li>TypeScript only checks types at compile time.</li> <li>For runtime validation, use libraries like <code>zod</code> or <code>yup</code>.</li> </ul> <pre><code>// \u2705 Example with Zod\nimport { z } from \"zod\";\n\nconst UserSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  email: z.string().email(),\n});\n\ntype User = z.infer&lt;typeof UserSchema&gt;;\n\nasync function safeFetchUser(): Promise&lt;User&gt; {\n  const res = await fetch(\"/api/user\");\n  const data = await res.json();\n  return UserSchema.parse(data); // validates at runtime\n}\n</code></pre>"},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/","title":"Working with Third-Party Libraries","text":""},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#typing-external-libraries","title":"Typing External Libraries","text":"<ul> <li>Many JavaScript libraries don't ship with built-in TypeScript types.</li> <li>TypeScript will treat such imports as having <code>any</code> type, losing safety and autocomplete.</li> <li>You can manually declare types or install community-maintained ones via <code>@types</code>.</li> </ul> <pre><code>// Without types (risky)\nimport someLib from \"some-untype-lib\";\nsomeLib.doSomething(); // No type info = no IntelliSense or safety\n</code></pre>"},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#using-types-packages","title":"Using <code>@types</code> Packages","text":"<ul> <li>Use the DefinitelyTyped community types via npm: <code>@types/package-name</code>.</li> </ul> <pre><code>npm install --save-dev @types/lodash\n</code></pre> <pre><code>import _ from \"lodash\";\nconst chunked = _.chunk([1, 2, 3, 4], 2); // Type-safe and fully typed\n</code></pre> <ul> <li>Type packages are always dev dependencies and match the original package's name.</li> </ul>"},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#handling-untyped-modules","title":"Handling Untyped Modules","text":"<ul> <li>For libraries without type definitions, you can create a module declaration.</li> </ul> <pre><code>// types/my-lib.d.ts\ndeclare module \"untyped-lib\" {\n  export function doSomething(): void;\n}\n</code></pre> <pre><code>// main.ts\nimport { doSomething } from \"untyped-lib\";\ndoSomething();\n</code></pre> <ul> <li>Or use <code>any</code> temporarily while developing:</li> </ul> <pre><code>// main.ts\nconst untyped: any = require(\"some-legacy-lib\");\nuntyped.runWild(); // no type checking\n</code></pre>"},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#type-safety-in-apis-like-axios-fetch-etc","title":"Type Safety in APIs (like <code>axios</code>, <code>fetch</code>, etc.)","text":"<ul> <li>Strong typing with API clients ensures correct response and request structures.</li> </ul> <pre><code>// \u2705 Using axios with types\nimport axios from \"axios\";\n\ninterface User {\n  id: number;\n  name: string;\n}\n\nasync function getUser(id: number): Promise&lt;User&gt; {\n  const response = await axios.get&lt;User&gt;(`/api/users/${id}`);\n  return response.data;\n}\n</code></pre> <pre><code>// \u2705 Typing fetch manually\ninterface Post {\n  id: number;\n  title: string;\n}\n\nasync function fetchPost(): Promise&lt;Post&gt; {\n  const res = await fetch(\"/api/posts/1\");\n  const data: Post = await res.json();\n  return data;\n}\n</code></pre> <ul> <li>Always define interfaces for response and request payloads when calling APIs.</li> </ul>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/","title":"React &amp; Next.js Related TypeScript Types","text":""},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#react-component-types","title":"\ud83d\udd39 React Component Types","text":"<pre><code>// Functional Component with props\ntype Props = { name: string };\nconst Greet: React.FC&lt;Props&gt; = ({ name }) =&gt; &lt;h1&gt;Hello, {name}&lt;/h1&gt;;\n\n// Without `React.FC` (preferred by some)\nconst GreetAlt = ({ name }: Props): JSX.Element =&gt; &lt;h1&gt;Hello, {name}&lt;/h1&gt;;\n</code></pre>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#jsx-types","title":"\ud83d\udd39 JSX Types","text":"<pre><code>const element: JSX.Element = &lt;div&gt;Hello&lt;/div&gt;;\n</code></pre> <ul> <li><code>JSX.Element</code> \u2013 Return type of JSX expressions.</li> <li><code>ReactNode</code> \u2013 Anything that can be rendered (<code>JSX.Element | string | number | null | undefined</code>).</li> <li><code>ReactElement</code> \u2013 More specific than <code>ReactNode</code>; has element metadata.</li> </ul> <pre><code>type ChildrenProps = {\n  children: React.ReactNode;\n};\n</code></pre>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#dom-element-types","title":"\ud83d\udd39 DOM Element Types","text":"<pre><code>const divRef = useRef&lt;HTMLDivElement | null&gt;(null);\nconst inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\nconst canvasRef = useRef&lt;HTMLCanvasElement | null&gt;(null);\n</code></pre> <p>Common DOM element types:</p> <ul> <li><code>HTMLInputElement</code></li> <li><code>HTMLDivElement</code></li> <li><code>HTMLButtonElement</code></li> <li><code>HTMLTextAreaElement</code></li> <li><code>HTMLImageElement</code></li> <li><code>HTMLFormElement</code></li> <li><code>HTMLAnchorElement</code></li> <li><code>HTMLCanvasElement</code></li> </ul>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#synthetic-event-types-react-events","title":"\ud83d\udd39 Synthetic Event Types (React Events)","text":"<pre><code>function handleChange(e: React.ChangeEvent&lt;HTMLInputElement&gt;) {\n  console.log(e.target.value);\n}\n\nfunction handleClick(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {\n  console.log(\"Clicked!\");\n}\n</code></pre> <p>Common React event types:</p> <ul> <li><code>React.ChangeEvent&lt;T&gt;</code></li> <li><code>React.MouseEvent&lt;T&gt;</code></li> <li><code>React.FormEvent&lt;T&gt;</code></li> <li><code>React.KeyboardEvent&lt;T&gt;</code></li> <li><code>React.FocusEvent&lt;T&gt;</code></li> <li><code>React.DragEvent&lt;T&gt;</code></li> <li><code>React.SubmitEvent&lt;T&gt;</code></li> </ul>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#usestate-useref-usereducer-hook-types","title":"\ud83d\udd39 useState, useRef, useReducer Hook Types","text":"<pre><code>const [count, setCount] = useState&lt;number&gt;(0);\n\nconst inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\n\ntype State = { count: number };\ntype Action = { type: \"inc\" } | { type: \"dec\" };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"inc\": return { count: state.count + 1 };\n    case \"dec\": return { count: state.count - 1 };\n    default: return state;\n  }\n}\nconst [state, dispatch] = useReducer(reducer, { count: 0 });\n</code></pre>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#useeffect-cleanup-type","title":"\ud83d\udd39 useEffect Cleanup Type","text":"<pre><code>useEffect(() =&gt; {\n  const id = setInterval(() =&gt; console.log(\"Running...\"), 1000);\n  return () =&gt; clearInterval(id); // () =&gt; void\n}, []);\n</code></pre>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#nextjs-specific-types","title":"\ud83d\udd39 Next.js Specific Types","text":"<pre><code>import { GetStaticProps, GetServerSideProps, NextPage } from \"next\";\n\n// Page component type\nconst HomePage: NextPage = () =&gt; &lt;div&gt;Welcome&lt;/div&gt;;\n\n// Static props\nexport const getStaticProps: GetStaticProps = async (context) =&gt; {\n  return {\n    props: { message: \"Hello from SSG\" },\n  };\n};\n\n// Server-side props\nexport const getServerSideProps: GetServerSideProps = async (context) =&gt; {\n  return {\n    props: { message: \"Hello from SSR\" },\n  };\n};\n</code></pre> <p>Other Next.js types:</p> <ul> <li><code>NextApiRequest</code> / <code>NextApiResponse</code> (for API routes)</li> <li><code>AppProps</code> (for custom <code>_app.tsx</code>)</li> <li><code>NextPageContext</code> (for SSR pages)</li> </ul>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#utility-types-youll-often-use","title":"\ud83d\udd39 Utility Types You\u2019ll Often Use","text":"<pre><code>Partial&lt;Type&gt;       // Make all properties optional\nRequired&lt;Type&gt;      // Make all properties required\nReadonly&lt;Type&gt;      // Make all properties readonly\nPick&lt;Type, Keys&gt;    // Pick a subset of properties\nOmit&lt;Type, Keys&gt;    // Remove specific keys from a type\nRecord&lt;K, T&gt;        // Object with keys K and values T\n\nReturnType&lt;typeof func&gt;  // Infer function return type\nParameters&lt;typeof func&gt;  // Infer function parameters\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/","title":"React + TypeScript","text":""},{"location":"ts/11.React%20%2B%20TypeScript/#typing-functional-components","title":"\u269b\ufe0f Typing Functional Components","text":"<pre><code>// Basic functional component with props\nimport type { JSX } from \"react\"\n\ntype GreetProps = {\n    name: string\n}\n\n// hard to use 1\nexport const Greet3: React.FC&lt;GreetProps&gt; = (props) =&gt; {\n    return (\n        &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;\n    )\n}\n\n// good use 2\nexport const Greet1 = ({name}: GreetProps) =&gt; {\n    return (\n        &lt;h1&gt;Hello, {name}&lt;/h1&gt;\n    )\n}\n\n// \u2705 best use 3\nexport const Greet2 = (props: GreetProps) =&gt; {\n    return (\n        &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;\n    )\n}\n\n// extra syntax 4\nexport const Greet4 = (props: GreetProps): JSX.Element =&gt; {\n    return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#typing-props-and-state","title":"\ud83c\udfaf Typing Props and State","text":"<pre><code>// \ud83c\udfaf Typing Props and State\n\nimport React, {useState, type JSX} from 'react';\n\ntype CounterProps = {\n    initialCount?: number\n}\n\n// hard to use 1\nexport const Counter1: React.FC&lt;CounterProps&gt; = ({initialCount = 0}) =&gt; {\n    const [count, setCount] = useState(initialCount)\n\n    return (\n        &lt;div className='m-4'&gt;\n            &lt;button \n            onClick={() =&gt; setCount(count =&gt; count + 1)}\n            &gt;\n                Count: {count}\n            &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n\n\n// good use 2 and JSX.Element type is extra Explicit Return\nexport const Counter2 = ({initialCount = 0}: CounterProps): JSX.Element =&gt; {\n    const [count, setCount] = useState(initialCount)\n\n    return (\n        &lt;div className='m-4'&gt;\n            &lt;button \n            onClick={() =&gt; setCount(count =&gt; count + 1)}\n            &gt;\n                Count: {count}\n            &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n\n// best use 3\nexport const Counter3 = (props: CounterProps) =&gt; {\n    const [count, setCount] = useState(props.initialCount ?? 0)\n\n    return (\n        &lt;div className='m-4'&gt;\n            &lt;button \n            onClick={() =&gt; setCount(count =&gt; count + 1)}\n            &gt;\n                Count: {count}\n            &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#react-hooks-with-typescript","title":"\ud83e\udde0 React Hooks with TypeScript","text":""},{"location":"ts/11.React%20%2B%20TypeScript/#useref-in-typescript","title":"\ud83e\uddf7 <code>useRef</code> in TypeScript","text":"<ul> <li><code>useRef</code> lets you persist values between renders without causing a re-render.</li> <li>Often used to reference DOM elements or store mutable variables.</li> </ul> <pre><code>import { useRef, useEffect } from 'react';\n\ntype InputRef = HTMLInputElement | null;\n\nconst UseRefExample = () =&gt; {\n  const inputRef = useRef&lt;InputRef&gt;(null);\n\n  useEffect(() =&gt; {\n    inputRef.current?.focus(); // Auto-focus on mount\n  }, []);\n\n  return &lt;input ref={inputRef} type=\"text\" placeholder=\"I will be focused\" /&gt;;\n};\n</code></pre> <ul> <li><code>useRef&lt;InputRef&gt;(null)</code> ensures proper typing: <code>inputRef.current</code> is of type <code>HTMLInputElement | null</code>.</li> </ul>"},{"location":"ts/11.React%20%2B%20TypeScript/#usereducer-in-typescript","title":"\ud83e\udde0 <code>useReducer</code> in TypeScript","text":"<ul> <li><code>useReducer</code> is useful for more complex state logic or state transitions.</li> <li>Works like a mini Redux reducer.</li> </ul> <pre><code>import { useReducer } from 'react';\n\ntype Action = {type: 'increase'} | {type: 'decrease'}\ntype State = {count: number}\n\nconst reducerFunction = (state: State, action: Action) =&gt; {\n    switch(action.type) {\n        case \"increase\": return {count: state.count + 1}\n        case \"decrease\": return {count: state.count - 1}\n        default: return state\n    }\n}\n\nexport const ReducerExample = () =&gt; {\n    const initialValue = {count: 0}\n    const [state, dispatch] = useReducer(reducerFunction, initialValue)\n    const handleIncrease = () =&gt; (dispatch({type: \"increase\"}))\n    const handleDecrease = () =&gt; (dispatch({type: \"decrease\"}))\n    return (\n        &lt;div&gt;\n            &lt;p&gt;Count: {state.count}&lt;/p&gt;\n            &lt;button onClick={handleIncrease}&gt;Increase&lt;/button&gt;\n            &lt;button onClick={handleDecrease}&gt;Decrease&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <ul> <li><code>useReducer(reducer, initialState)</code> returns <code>[state, dispatch]</code></li> <li>TypeScript infers types from <code>State</code> and <code>Action</code>, so you get full IntelliSense.</li> </ul>"},{"location":"ts/11.React%20%2B%20TypeScript/#custom-hooks-with-generics","title":"\ud83e\uddf5 Custom Hooks with Generics","text":"<pre><code>function useArray&lt;T&gt;(initial: T[]): [T[], (item: T) =&gt; void] {\n  const [array, setArray] = useState&lt;T[]&gt;(initial);\n  const add = (item: T) =&gt; setArray([...array, item]);\n  return [array, add];\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#context-api-with-typescript","title":"\ud83e\udde0 Context API with TypeScript","text":"<pre><code>type Theme = 'light' | 'dark';\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () =&gt; void;\n};\n\nconst ThemeContext = createContext&lt;ThemeContextType | undefined&gt;(undefined);\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#react-router-typescript","title":"\ud83d\udd0c React Router + TypeScript","text":"<pre><code>import { useParams } from 'react-router-dom';\n\ntype RouteParams = {\n  id: string;\n};\n\nconst DetailPage = () =&gt; {\n  const { id } = useParams&lt;RouteParams&gt;();\n  return &lt;div&gt;Item ID: {id}&lt;/div&gt;;\n};\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#forms-controlled-inputs","title":"\ud83e\uddfe Forms &amp; Controlled Inputs","text":"<pre><code>const FormExample = () =&gt; {\n  const [name, setName] = useState&lt;string&gt;(\"\");\n\n  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    setName(e.target.value);\n  };\n\n  return &lt;input value={name} onChange={handleChange} /&gt;;\n};\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#react-hook-form-typescript","title":"\ud83e\uddf0 React Hook Form + TypeScript","text":"<pre><code>import { useForm, SubmitHandler } from \"react-hook-form\";\n\ntype Inputs = {\n  email: string;\n  password: string;\n};\n\nconst MyForm = () =&gt; {\n  const { register, handleSubmit } = useForm&lt;Inputs&gt;();\n\n  const onSubmit: SubmitHandler&lt;Inputs&gt; = data =&gt; console.log(data);\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;input {...register(\"email\")} /&gt;\n      &lt;input type=\"password\" {...register(\"password\")} /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n};\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#typing-children-in-props","title":"\ud83e\uddf1 Typing <code>children</code> in Props","text":"<pre><code>type CardProps = {\n  children: React.ReactNode;\n};\n\nconst Card = ({ children }: CardProps) =&gt; &lt;div className=\"card\"&gt;{children}&lt;/div&gt;;\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#slot-pattern-component-composition","title":"\ud83e\uddf1 Slot Pattern &amp; Component Composition","text":"<pre><code>type LayoutProps = {\n  header: React.ReactNode;\n  content: React.ReactNode;\n};\n\nconst Layout = ({ header, content }: LayoutProps) =&gt; (\n  &lt;&gt;\n    &lt;header&gt;{header}&lt;/header&gt;\n    &lt;main&gt;{content}&lt;/main&gt;\n  &lt;/&gt;\n);\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#advanced-custom-hook","title":"\ud83e\ude9d Advanced Custom Hook","text":"<pre><code>function useDebounce&lt;T&gt;(value: T, delay: number): T {\n  const [debounced, setDebounced] = useState(value);\n\n  useEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; setDebounced(value), delay);\n    return () =&gt; clearTimeout(timer);\n  }, [value, delay]);\n\n  return debounced;\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#testing-react-components","title":"\ud83e\uddea Testing React Components","text":"<pre><code>import { render, screen } from '@testing-library/react';\nimport MyComponent from './MyComponent';\n\ntest(\"renders correctly\", () =&gt; {\n  render(&lt;MyComponent /&gt;);\n  expect(screen.getByText(\"Hello\")).toBeInTheDocument();\n});\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#higher-order-components-hocs","title":"\ud83d\ude80 Higher Order Components (HOCs)","text":"<pre><code>function withLogging&lt;P&gt;(Component: React.ComponentType&lt;P&gt;) {\n  return (props: P) =&gt; {\n    console.log(\"Rendering\", Component.name);\n    return &lt;Component {...props} /&gt;;\n  };\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#generic-context-factory","title":"\ud83d\udd01 Generic Context Factory","text":"<pre><code>type AuthContextType&lt;T&gt; = {\n  user: T | null;\n  login: (user: T) =&gt; void;\n};\n\nfunction createAuthContext&lt;T&gt;() {\n  const context = createContext&lt;AuthContextType&lt;T&gt; | undefined&gt;(undefined);\n  return context;\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#typing-event-handlers","title":"\ud83e\udde9 Typing Event Handlers","text":"<pre><code>const handleClick = (event: React.MouseEvent&lt;HTMLButtonElement&gt;) =&gt; {\n  console.log(\"Button clicked\", event);\n};\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#where-to-keep-types-interfaces-enums","title":"\ud83d\udcc1 Where to Keep Types, Interfaces, Enums","text":"<ul> <li>Create a <code>/types</code> or <code>/interfaces</code> folder at the root or in <code>src/</code></li> <li>For shared types: <code>src/types/global.d.ts</code> or <code>src/types/common.ts</code></li> <li>Group by domain (e.g. <code>auth/types.ts</code>, <code>user/interfaces.ts</code>, etc.)</li> <li>You can also colocate near components if types are very specific</li> </ul>"},{"location":"ts/11.React%20%2B%20TypeScript/#component-level-generics","title":"\ud83e\udde0 Component-Level Generics","text":"<pre><code>type ListProps&lt;T&gt; = {\n  items: T[];\n  renderItem: (item: T) =&gt; React.ReactNode;\n};\n\nfunction List&lt;T&gt;({ items, renderItem }: ListProps&lt;T&gt;) {\n  return &lt;ul&gt;{items.map(renderItem)}&lt;/ul&gt;;\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#summary","title":"\u2705 Summary","text":"<p>This section now covers:</p> <ul> <li>Functional components</li> <li>Props, State, Refs, Reducers</li> <li>Forms, Controlled inputs</li> <li>React Router</li> <li>Custom hooks with generics</li> <li>Context API</li> <li>Typing children</li> <li>Hook forms</li> <li>Testing</li> <li>HOCs</li> <li>Slot pattern &amp; composition</li> <li>Advanced generic contexts</li> <li>Event handler types</li> <li>Where to place types/interfaces/enums</li> <li>Generic React components</li> </ul>"},{"location":"ts/12.Node.js%20%2B%20TypeScript/","title":"Node.js + TypeScript","text":""},{"location":"ts/12.Node.js%20%2B%20TypeScript/#setting-up-nodejs-with-ts","title":"Setting up Node.js with TS","text":"<ul> <li>Install TypeScript and necessary tools:</li> </ul> <pre><code>npm install typescript ts-node @types/node --save-dev\n</code></pre> <ul> <li>Create a <code>tsconfig.json</code>:</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"CommonJS\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  }\n}\n</code></pre> <ul> <li>Entry file: <code>src/index.ts</code></li> </ul> <pre><code>console.log(\"\u2705 Node + TypeScript is working!\");\n</code></pre>"},{"location":"ts/12.Node.js%20%2B%20TypeScript/#typing-express-apps","title":"Typing Express Apps","text":"<ul> <li>Use <code>@types/express</code> for full type support.</li> </ul> <pre><code>npm install express\nnpm install --save-dev @types/express\n</code></pre> <pre><code>import express, { Request, Response } from \"express\";\n\nconst app = express();\nconst PORT = 3000;\n\napp.get(\"/\", (req: Request, res: Response) =&gt; {\n  res.send(\"Hello from TypeScript + Express!\");\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n</code></pre>"},{"location":"ts/12.Node.js%20%2B%20TypeScript/#typing-file-system-path-process-apis","title":"Typing File System, Path, Process APIs","text":"<ul> <li>Node\u2019s built-in modules have types via <code>@types/node</code>.</li> </ul> <pre><code>import fs from \"fs\";\nimport path from \"path\";\nimport process from \"process\";\n\n// \u2705 Reading a file\nconst data = fs.readFileSync(path.join(__dirname, \"data.txt\"), \"utf-8\");\nconsole.log(data);\n\n// \u2705 Environment Variables\nconsole.log(\"Running in:\", process.env.NODE_ENV);\n</code></pre>"},{"location":"ts/12.Node.js%20%2B%20TypeScript/#writing-cli-apps-with-ts","title":"Writing CLI Apps with TS","text":"<ul> <li>Use <code>process.argv</code>, <code>readline</code>, or third-party libs like <code>yargs</code>.</li> </ul> <pre><code>// cli.ts\nconst args = process.argv.slice(2);\nconsole.log(\"Arguments:\", args);\n\n// Using readline for input\nimport readline from \"readline\";\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nrl.question(\"What's your name? \", (name) =&gt; {\n  console.log(`Hello, ${name}!`);\n  rl.close();\n});\n</code></pre> <ul> <li>Run CLI tool using <code>ts-node</code>:</li> </ul> <pre><code>npx ts-node src/cli.ts\n</code></pre>"},{"location":"ts/13.Advanced%20Topics/","title":"Advanced Topics in TypeScript","text":""},{"location":"ts/13.Advanced%20Topics/#decorators-in-typescript","title":"Decorators in TypeScript","text":"<ul> <li>Decorators are special annotations (prefixed with <code>@</code>) used to modify classes, methods, properties, etc.</li> <li>Must enable in <code>tsconfig.json</code>:</li> </ul> <pre><code>{\n  \"experimentalDecorators\": true\n}\n</code></pre> <pre><code>function Log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.value;\n  descriptor.value = function (...args: any[]) {\n    console.log(`Calling ${propertyKey} with`, args);\n    return original.apply(this, args);\n  };\n}\n\nclass User {\n  @Log\n  sayHello(name: string) {\n    return `Hello, ${name}`;\n  }\n}\n</code></pre>"},{"location":"ts/13.Advanced%20Topics/#typescript-compiler-api","title":"TypeScript Compiler API","text":"<ul> <li>You can programmatically analyze, manipulate, or transform TypeScript code using the Compiler API.</li> </ul> <pre><code>import ts from \"typescript\";\n\nconst source = \"let x: number = 42;\";\nconst sourceFile = ts.createSourceFile(\"test.ts\", source, ts.ScriptTarget.ES2015);\n\nts.forEachChild(sourceFile, (node) =&gt; {\n  if (ts.isVariableStatement(node)) {\n    console.log(\"Variable statement found.\");\n  }\n});\n</code></pre> <ul> <li>Useful for tools like linters, code mods, or custom transpilers.</li> </ul>"},{"location":"ts/13.Advanced%20Topics/#ast-parsing-and-transformation","title":"AST Parsing and Transformation","text":"<ul> <li>TypeScript source code is converted into an AST (Abstract Syntax Tree).</li> <li>You can traverse and transform the AST to create custom compile-time tools.</li> </ul> <pre><code>const transformer: ts.TransformerFactory&lt;ts.SourceFile&gt; = (context) =&gt; {\n  return (rootNode) =&gt; {\n    function visit(node: ts.Node): ts.Node {\n      // Example: remove all `console.log` statements\n      if (ts.isExpressionStatement(node) &amp;&amp; ts.isCallExpression(node.expression)) {\n        if (ts.isPropertyAccessExpression(node.expression.expression) &amp;&amp;\n            node.expression.expression.expression.getText() === \"console\" &amp;&amp;\n            node.expression.expression.name.getText() === \"log\") {\n          return ts.factory.createEmptyStatement();\n        }\n      }\n      return ts.visitEachChild(node, visit, context);\n    }\n    return ts.visitNode(rootNode, visit);\n  };\n};\n</code></pre>"},{"location":"ts/13.Advanced%20Topics/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>TypeScript adds type safety but can slow down development if misconfigured.</li> </ul> <p>Tips to improve performance:</p> <ul> <li>Limit project scope with <code>include</code> and <code>exclude</code> in <code>tsconfig.json</code>.</li> <li>Avoid unnecessary re-checks using <code>incremental: true</code>.</li> <li>Use <code>skipLibCheck: true</code> to skip checking <code>node_modules</code>.</li> <li>Prefer <code>esnext</code> module targets for faster builds.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"module\": \"esnext\",\n    \"target\": \"esnext\"\n  }\n}\n</code></pre>"},{"location":"ts/14.Best%20Practices/","title":"Best Practices in TypeScript","text":""},{"location":"ts/14.Best%20Practices/#avoiding-any","title":"Avoiding <code>any</code>","text":"<ul> <li>Avoid using <code>any</code> as it disables type checking and defeats the purpose of TypeScript.</li> <li>Use <code>unknown</code> when you don't know the type yet \u2014 it's safer and forces type narrowing.</li> </ul> <pre><code>// \u274c Bad\nlet value: any = \"something\";\nvalue.doSomething(); // No error, but may fail at runtime\n\n// \u2705 Good\nlet value: unknown = \"something\";\nif (typeof value === \"string\") {\n  console.log(value.toUpperCase());\n}\n</code></pre>"},{"location":"ts/14.Best%20Practices/#favoring-unknown-and-never","title":"Favoring <code>unknown</code> and <code>never</code>","text":"<ul> <li>Use <code>unknown</code> over <code>any</code> to enforce type checking.</li> <li>Use <code>never</code> to represent unreachable or impossible states.</li> </ul> <pre><code>function fail(message: string): never {\n  throw new Error(message);\n}\n\nfunction exhaustiveCheck(value: \"a\" | \"b\") {\n  if (value === \"a\") return;\n  if (value === \"b\") return;\n\n  // value is of type never here\n  fail(\"Unhandled case\");\n}\n</code></pre>"},{"location":"ts/14.Best%20Practices/#structuring-typescript-projects","title":"Structuring TypeScript Projects","text":"<ul> <li>Use <code>src/</code> for source files, <code>types/</code> or <code>@types/</code> for global types.</li> <li>Keep interfaces and types close to the code or in shared folders.</li> </ul> <pre><code>project-root/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 types/\n\u2502   \u2514\u2500\u2500 global.d.ts\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 package.json\n</code></pre> <ul> <li>Prefer named exports over default exports for clarity and tooling benefits.</li> </ul>"},{"location":"ts/14.Best%20Practices/#consistent-naming-conventions","title":"Consistent Naming Conventions","text":"<ul> <li>Use PascalCase for types and interfaces:</li> </ul> <pre><code>interface UserProfile {\n  name: string;\n  age: number;\n}\n</code></pre> <ul> <li>Use camelCase for variables and functions:</li> </ul> <pre><code>const getUserName = (user: UserProfile): string =&gt; user.name;\n</code></pre> <ul> <li>Prefix boolean variables with <code>is</code>, <code>has</code>, <code>can</code>, etc.:</li> </ul> <pre><code>let isVisible: boolean = true;\n</code></pre>"},{"location":"ts/14.Best%20Practices/#linting-with-eslint-typescript","title":"Linting with ESLint + TypeScript","text":"<ul> <li>Install ESLint with TypeScript support:</li> </ul> <pre><code>npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n</code></pre> <ul> <li>Example <code>.eslintrc.js</code> config:</li> </ul> <pre><code>module.exports = {\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"@typescript-eslint\"],\n  extends: [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n  ],\n  rules: {\n    \"@typescript-eslint/no-explicit-any\": \"warn\",\n    \"@typescript-eslint/explicit-function-return-type\": \"off\",\n  },\n};\n</code></pre> <ul> <li>Run linting:</li> </ul> <pre><code>npx eslint . --ext .ts,.tsx\n</code></pre>"},{"location":"ts/15.Testing%20in%20TypeScript/","title":"Testing in TypeScript","text":""},{"location":"ts/15.Testing%20in%20TypeScript/#typescript-with-jest-vitest","title":"TypeScript with Jest / Vitest","text":"<ul> <li>Install Jest + TypeScript support:</li> </ul> <pre><code>npm install --save-dev jest ts-jest @types/jest\n</code></pre> <ul> <li>Initialize Jest config:</li> </ul> <pre><code>npx ts-jest config:init\n</code></pre> <ul> <li>Example test: <code>sum.test.ts</code></li> </ul> <pre><code>// \u2705 sum.ts\nexport const sum = (a: number, b: number): number =&gt; a + b;\n\n// \u2705 sum.test.ts\nimport { sum } from \"./sum\";\n\ntest(\"adds 1 + 2 = 3\", () =&gt; {\n  expect(sum(1, 2)).toBe(3);\n});\n</code></pre> <ul> <li>Add test script to <code>package.json</code>:</li> </ul> <pre><code>\"scripts\": {\n  \"test\": \"jest\"\n}\n</code></pre>"},{"location":"ts/15.Testing%20in%20TypeScript/#typing-mocks-and-stubs","title":"Typing Mocks and Stubs","text":"<ul> <li>Use <code>jest.mock</code> and <code>jest.fn()</code> for mocking dependencies.</li> <li>You can type your mocks explicitly to retain type safety.</li> </ul> <pre><code>// service.ts\nexport const fetchData = (): string =&gt; \"real data\";\n\n// service.test.ts\nimport * as service from \"./service\";\n\njest.mock(\"./service\");\n\nconst mockedService = service as jest.Mocked&lt;typeof service&gt;;\n\nmockedService.fetchData.mockReturnValue(\"mocked data\");\n\ntest(\"uses mocked service\", () =&gt; {\n  expect(mockedService.fetchData()).toBe(\"mocked data\");\n});\n</code></pre>"},{"location":"ts/15.Testing%20in%20TypeScript/#using-ts-jest-or-other-compilers","title":"Using <code>ts-jest</code> or Other Compilers","text":"<ul> <li><code>ts-jest</code> compiles TypeScript before running tests, without needing a separate build step.</li> <li>Alternatively, you can use <code>babel-jest</code> with a <code>babel.config.js</code> for custom transforms.</li> </ul> <pre><code>npm install --save-dev babel-jest @babel/preset-typescript\n</code></pre> <pre><code>// babel.config.js\nmodule.exports = {\n  presets: [\"@babel/preset-env\", \"@babel/preset-typescript\"],\n};\n</code></pre> <ul> <li>Then use <code>jest</code> as normal with <code>.ts</code> test files.</li> </ul>"},{"location":"ts/15.Testing%20in%20TypeScript/#vitest-alternative-to-jest","title":"Vitest (Alternative to Jest)","text":"<pre><code>npm install -D vitest\n</code></pre> <pre><code>// counter.ts\nexport const double = (x: number): number =&gt; x * 2;\n\n// counter.test.ts\nimport { describe, it, expect } from \"vitest\";\nimport { double } from \"./counter\";\n\ndescribe(\"double\", () =&gt; {\n  it(\"should double the number\", () =&gt; {\n    expect(double(2)).toBe(4);\n  });\n});\n</code></pre> <ul> <li>Add a script in <code>package.json</code>:</li> </ul> <pre><code>\"scripts\": {\n  \"test\": \"vitest\"\n}\n</code></pre>"},{"location":"ts/16.Troubleshooting%20and%20Debugging/","title":"Troubleshooting and Debugging in TypeScript","text":""},{"location":"ts/16.Troubleshooting%20and%20Debugging/#common-type-errors","title":"Common Type Errors","text":"<ul> <li>\"Type 'X' is not assignable to type 'Y'\"   Happens when a value is used in an incompatible context.</li> </ul> <pre><code>let age: number = \"25\"; // \u274c Error: Type 'string' is not assignable to type 'number'\n\n// \u2705 Fix:\nlet age: number = parseInt(\"25\");\n</code></pre> <ul> <li>\"Object is possibly 'undefined'\"   TypeScript warns if a variable may be <code>undefined</code>.</li> </ul> <pre><code>function getLength(str?: string): number {\n  return str.length; // \u274c Error\n\n  // \u2705 Fix:\n  return str ? str.length : 0;\n}\n</code></pre>"},{"location":"ts/16.Troubleshooting%20and%20Debugging/#debugging-with-source-maps","title":"Debugging with Source Maps","text":"<ul> <li>Source maps let you debug TypeScript in browser or Node.js using original <code>.ts</code> files. tsconfig.json</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"outDir\": \"dist\"\n  }\n}\n</code></pre> <ul> <li>Use browser DevTools or Node.js debuggers (like VSCode or Chrome DevTools).</li> </ul>"},{"location":"ts/16.Troubleshooting%20and%20Debugging/#using-vscode-intellisense","title":"Using VSCode IntelliSense","text":"<ul> <li>TypeScript powers VSCode IntelliSense: autocompletions, tooltips, and error hints.</li> <li>Best practices:</li> <li>Keep <code>tsconfig.json</code> properly configured.</li> <li>Use <code>.d.ts</code> files for global types.</li> <li>Avoid <code>any</code> to get accurate suggestions.</li> </ul> <p>Tip: Hover over symbols to see inferred types and quick fixes.</p>"},{"location":"ts/16.Troubleshooting%20and%20Debugging/#fixing-type-mismatches","title":"Fixing Type Mismatches","text":"<ul> <li>Use type assertions when you know the type:</li> </ul> <pre><code>const input = document.querySelector(\"input\") as HTMLInputElement;\nconsole.log(input.value);\n</code></pre> <ul> <li>Use <code>typeof</code>, <code>instanceof</code>, or custom type guards for runtime type checks:</li> </ul> <pre><code>function printLength(value: unknown) {\n  if (typeof value === \"string\") {\n    console.log(value.length); // \u2705 Safe\n  }\n}\n</code></pre> <ul> <li>Refactor complex types with interfaces, type aliases, and narrowing logic.</li> </ul> <pre><code>type ID = string | number;\n\nfunction normalizeId(id: ID): string {\n  return typeof id === \"number\" ? id.toString() : id;\n}\n</code></pre>"},{"location":"ts/17.Appendix/","title":"Appendix","text":""},{"location":"ts/17.Appendix/#glossary-of-typescript-terms","title":"Glossary of TypeScript Terms","text":"<ul> <li>Type Annotation \u2013 Explicitly declaring the type of a variable or parameter.</li> <li>Interface \u2013 A structure used to define the shape of an object.</li> <li>Type Alias \u2013 An alias for a type using <code>type</code>.</li> <li>Literal Type \u2013 A type that can be a specific string, number, or boolean.</li> <li>Union Type \u2013 A type composed of multiple types (<code>A | B</code>).</li> <li>Intersection Type \u2013 Combines multiple types into one (<code>A &amp; B</code>).</li> <li>Generic \u2013 A way to write code that works with many types.</li> <li>Enum \u2013 A named constant set (numeric or string values).</li> <li>Tuple \u2013 An array with fixed length and types per index.</li> </ul>"},{"location":"ts/17.Appendix/#cheatsheet-of-common-types","title":"Cheatsheet of Common Types","text":"<pre><code>// Primitive Types\nlet str: string;\nlet num: number;\nlet bool: boolean;\nlet undef: undefined;\nlet nul: null;\nlet sym: symbol;\n\n// Arrays and Tuples\nlet arr: number[] = [1, 2, 3];\nlet tuple: [string, number] = [\"Age\", 30];\n\n// Object and Function\nlet obj: { name: string; age: number };\nlet func: (x: number) =&gt; string;\n\n// Union and Intersection\nlet id: string | number;\ntype Admin = { role: string };\ntype User = { name: string };\ntype AdminUser = Admin &amp; User;\n\n// Literal and Enum\nlet direction: \"left\" | \"right\";\nenum Color { Red, Green, Blue }\n\n// Type Alias and Interface\ntype Point = { x: number; y: number };\ninterface Shape { area(): number; }\n\n// Generics\nfunction wrap&lt;T&gt;(value: T): T[] {\n  return [value];\n}\n</code></pre>"},{"location":"ts/17.Appendix/#useful-resources-docs","title":"Useful Resources &amp; Docs","text":"<ul> <li>TypeScript Official Docs</li> <li>TypeScript Handbook</li> <li>TS Playground</li> <li>DefinitelyTyped Repository</li> <li>Awesome TypeScript</li> </ul>"},{"location":"ts/17.Appendix/#community-and-support","title":"Community and Support","text":"<ul> <li>TypeScript Discord</li> <li>Stack Overflow (TypeScript)</li> <li>Reddit: r/typescript</li> <li>GitHub Discussions</li> </ul>"},{"location":"ts/2.Basic%20Types/","title":"Basic Types and Type Inference, Annotations &amp; Assertions","text":""},{"location":"ts/2.Basic%20Types/#basic-types","title":"Basic Types","text":"<pre><code>// \u2705 Primitive Types\nlet yourname: string = \"Alice\";\nlet age: number = 30;\nlet isActive: boolean = true;\nlet nothing: null = null;\nlet notDefined: undefined = undefined;\nlet normalNum = 9007199254740991; // Max safe integer in JS\nlet bigIntValue: bigint = 9007199254740992n; // Beyond safe limit\n// go to tsconfig.json and change \"target\" value to \"ES2020\"\nconsole.log(bigIntValue + 1n); // 9007199254740993n\nlet symbolValue: symbol = Symbol(\"id\");\n\n// \u2705 Special Types\n// variable should not be 'any' type like this\nlet anythingOne;\n// Even if we give 'any' to this it will auto detect and convert to string.\n// This is also known as Type Inference\nlet anythingTwo: any = \"can be anything\";\nanythingTwo = 20;\n\nlet uncertain: unknown = 42;\nif (typeof uncertain === \"number\")\n    uncertain.toFixed();\n\nfunction sayHi(): void {\n    console.log(\"Hi\");\n}\n\nfunction throwError(): never {\n    throw new Error(\"Crash!\");\n}\n// throwError()\n\n// \u2705 Arrays and Tuples\nlet numbers: number[] = [1, 2, 3];\nlet names: Array&lt;string&gt; = [\"Tom\", \"Jerry\"];\n// tuples are fixed means this [20, \"score\"] won't work\nlet tupleExample: [string, number] = [\"score\", 100];\n\n// \u2705 Enums 1\nenum Direction {\n    Up,\n    Down,\n    Left,\n    Right\n}\nlet move: Direction = Direction.Up;\n\n// \u2705 Enums 2\nenum UserRoles {\n    ADMIN = \"admin\",\n    GUEST = \"guest\",\n    SUPER_ADMIN = \"super_admin\"\n}\nlet UserRole: UserRoles = UserRoles.ADMIN\n\n// \u2705 Literal Types\nlet response: \"yes\" | \"no\" = \"yes\";\n\n// \u2705 Type Aliases\ntype User = {\n    username: string;\n    age: number;\n};\nconst user: User = { username: \"Bob\", age: 28 };\n\n// \u2705 Reference Types (Objects, Arrays, Functions)\nlet person: { username: string; isEmployed: boolean } = {\n    username: \"Eve\",\n    isEmployed: true\n};\n\nlet greet: (username: string) =&gt; string = (username) =&gt; `Hello, ${username}`;\n</code></pre>"},{"location":"ts/2.Basic%20Types/#type-inference-annotations-assertions","title":"Type Inference, Annotations &amp; Assertions","text":"<pre><code>// \u2705 Type Inference\n// TypeScript automatically infers the type based on the assigned value\nlet message = \"Hello TypeScript\";  // inferred as string\nlet count = 42;                    // inferred as number\n\n// \u2705 Type Annotations\n// You explicitly declare the type of a variable\nlet title: string = \"Typed Title\";\nlet isActive: boolean = true;\nlet total: number;\ntotal = 100;\n\n// \u2705 Type Assertions (Casting)\n// You tell TypeScript the exact type of a value (used with `unknown` or `any`)\nlet someValue: unknown = \"I am a string\";\n\n// Using `as` syntax (recommended)\n// Type Casting\nlet strLength: number = (someValue as string).length;\n\n// \u2705 Angle-bracket syntax (not allowed in `.tsx` files)\n// Equivalent to `as`, but can't be used in JSX (e.g., React projects)\nlet anotherValue: unknown = \"Another string\";\nlet anotherLength: number = (&lt;string&gt;anotherValue).length;\n\n// \u2705 Summary:\n// - Use type inference when possible (cleaner and safer).\n// - Use type annotations when type isn\u2019t obvious or needed for clarity.\n// - Use type assertions when you're sure of a value\u2019s type (e.g., after `unknown`).\n// - Prefer `as` syntax especially in JSX/React projects.\n</code></pre>"},{"location":"ts/2.Basic%20Types/#type-assertions-aka-type-casting","title":"\ud83d\udd01 Type Assertions (aka Type Casting)","text":"<p>TypeScript sometimes cannot infer the correct type. Type assertions let you tell the compiler \"trust me, I know what I\u2019m doing.\"</p> <p>They do not change the runtime type\u2014only instruct the compiler.</p> <pre><code>let someValue: any = \"Hello, world\";\nlet strLength: number = (someValue as string).length;\n</code></pre> <p>or (in non-JSX files):</p> <pre><code>let strLength: number = (&lt;string&gt;someValue).length;\n</code></pre>"},{"location":"ts/2.Basic%20Types/#as-vs-angle-bracket-syntax","title":"\u2694\ufe0f <code>as</code> vs Angle-Bracket Syntax","text":"Feature <code>as</code> Syntax Angle-Bracket Syntax Syntax <code>value as Type</code> <code>&lt;Type&gt;value</code> JSX Compatibility \u2705 Works in <code>.tsx</code> \u274c Not allowed in <code>.tsx</code> files Preferred Usage Always use <code>as</code> in React/JSX files Use angle-brackets in <code>.ts</code> files <pre><code>// \u2705 Preferred in all contexts\nlet input = someValue as string;\n\n// \u274c Will cause error in TSX files\nlet input = &lt;string&gt;someValue;\n</code></pre>"},{"location":"ts/2.Basic%20Types/#examples","title":"\ud83e\uddea Examples","text":""},{"location":"ts/2.Basic%20Types/#dom-casting","title":"DOM Casting","text":"<pre><code>const el = document.querySelector(\"#my-input\") as HTMLInputElement;\nel.value = \"Updated\";\n</code></pre>"},{"location":"ts/2.Basic%20Types/#using-unknown-with-assertions","title":"Using <code>unknown</code> with assertions","text":"<pre><code>function handle(data: unknown) {\n  const parsed = data as string; // Asserting unknown as string\n}\n</code></pre>"},{"location":"ts/2.Basic%20Types/#double-assertion-use-carefully","title":"\u26a0\ufe0f Double Assertion (use carefully)","text":"<pre><code>const crazy = (\"text\" as unknown) as number; // \u26a0\ufe0f Avoid unless absolutely necessary\n</code></pre> <p>This should only be used in edge cases, like dealing with very dynamic third-party data.</p>"},{"location":"ts/2.Basic%20Types/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Prefer inference when the type is clear.</li> <li>Use annotations when inference fails or for clarity.</li> <li>Use <code>as</code> syntax consistently, especially in React projects.</li> <li>Avoid unnecessary or unsafe assertions \u2014 trust the type system.</li> <li>Never use type assertions to suppress real type errors unless you are 100% confident.</li> </ul> <pre><code>// \u274c BAD\nconst user = getUser() as any;\nuser.nonExistentMethod();\n\n// \u2705 BETTER\nconst user = getUser() as { name: string; age: number };\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/","title":"Functions, Objects and Classes in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#1-functions-in-typescript","title":"1. Functions in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#function-types","title":"Function Types","text":"<ul> <li>Function types let you define the expected argument and return types. They help catch mismatches at compile time and improve readability.</li> </ul> <pre><code>// \u2705 Function Types\nfunction add(x: number, y: number): number {\n  return x + y;\n}\nconst multiply: (a: number, b: number) =&gt; number = (a, b) =&gt; a * b;\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#optional-default-parameters","title":"Optional &amp; Default Parameters","text":"<ul> <li>You can mark parameters as optional with ?, or assign default values. This provides flexibility in how functions are called.</li> </ul> <pre><code>// \u2705 Optional &amp; Default Parameters\nfunction greet(name: string = \"Guest\", title?: string): string {\n  return title ? `${title} ${name}` : `Hello, ${name}`;\n}\ngreet();                    // \"Hello, Guest\"\ngreet(\"Alice\", \"Ms.\");      // \"Ms. Alice\"\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#rest-parameters","title":"Rest Parameters","text":"<ul> <li>Rest parameters allow functions to accept multiple arguments as an array. They are useful for variable-length inputs like sumAll(...nums).</li> </ul> <pre><code>// \u2705 Rest Parameters\nfunction sumAll(...nums: number[]): number {\n  return nums.reduce((total, n) =&gt; total + n, 0);\n}\nsumAll(1, 2, 3, 4); // 10\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#function-overloads","title":"Function Overloads","text":"<ul> <li>Function overloading lets you define multiple signatures for a single function. It helps provide different behavior based on input types.</li> </ul> <pre><code>// \u2705 Function Overloads\nfunction formatValue(value: number): string;\nfunction formatValue(label: string): string;\nfunction formatValue(label: string, value: number | string): string;\nfunction formatValue(a: string | number, b?: string | number): string {\n  if (typeof b === \"undefined\") {\n    // Only one argument\n    if (typeof a === \"number\") return a.toLocaleString();\n    return a; // just a string label\n  }\n\n  // Two arguments\n  if (typeof b === \"number\") {\n    return `${a}: ${b.toLocaleString()}`;\n  }\n\n  return `${a}: ${b}`;\n}\n\nconsole.log(formatValue(1000));                 // \"1,000\"\nconsole.log(formatValue(\"price\", 9999));        // \"price: 9,999\"\nconsole.log(formatValue(\"Name\", \"Alice\"));      // \"Name: Alice\"\nconsole.log(formatValue(\"Score\", 42));          // \"Score: 42\"\nconsole.log(formatValue(\"Just a label\"));       // \"Just a label\"\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#this-in-functions","title":"<code>this</code> in Functions","text":"<ul> <li>In TypeScript, you can explicitly type the this context of a function. This prevents incorrect usage and makes method binding clearer.</li> </ul> <pre><code>// \u2705 `this` in Functions\nconst obj = {\n  count: 0,\n  increment(this: { count: number }) {\n    this.count++;\n  }\n};\nobj.increment();\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#arrow-functions","title":"Arrow Functions","text":"<ul> <li>Arrow functions are concise and do not have their own this context. They are useful for callbacks but should be used carefully inside objects.</li> </ul> <pre><code>// \u2705 Arrow Functions\nconst square = (n: number): number =&gt; n * n;\n\n// Arrow functions don\u2019t have their own `this`\nconst counter = {\n  count: 0,\n  inc: () =&gt; {\n    // `this` here refers to the enclosing scope, not `counter`\n    console.log(this.count); // likely undefined\n  }\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#function-return-types","title":"Function Return Types","text":"<ul> <li>You can explicitly define a function's return type for clarity and safety. TypeScript can infer return types, but explicit ones help with readability.</li> </ul> <pre><code>// \u2705 Function Return Types\nfunction log(msg: string): void {\n  console.log(msg); // no return value\n}\nfunction getUser(): { name: string; age: number } {\n  return { name: \"John\", age: 30 };\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#anonymous-callback-functions","title":"Anonymous &amp; Callback Functions","text":"<ul> <li>Anonymous functions are used inline, often as callbacks. You can type callbacks explicitly for safety and documentation.</li> </ul> <pre><code>// \u2705 Anonymous &amp; Callback Functions\nconst numbers = [1, 2, 3];\nconst doubled = numbers.map(function (num) {\n  return num * 2;\n});\n\nconst tripled = numbers.map((n: number): number =&gt; n * 3);\n\n// Callback with explicit type\nfunction processInput(callback: (input: string) =&gt; void) {\n  callback(\"Hello from callback\");\n}\nprocessInput((msg) =&gt; console.log(msg));\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#2-objects-interfaces-in-typescript","title":"2. Objects &amp; Interfaces in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#object-type-annotations","title":"Object Type Annotations","text":"<ul> <li>TypeScript lets you define object shapes using type annotations. This provides structure, validation, and IntelliSense during development.</li> </ul> <pre><code>// \u2705 Object Type Annotation\nconst user: { name: string; age: number } = {\n  name: \"Alice\",\n  age: 25\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#creating-and-using-interfaces","title":"Creating and Using Interfaces","text":"<ul> <li>Interfaces define the shape of an object and are reusable across your code. They're ideal for modeling structured data.</li> </ul> <pre><code>// \u2705 Interface Usage\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst newUser: User = {\n  name: \"Bob\",\n  age: 32\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#optional-and-readonly-properties","title":"Optional and Readonly Properties","text":"<ul> <li>Use <code>?</code> to make properties optional.</li> <li>Use <code>readonly</code> to prevent reassignment after initialization.</li> </ul> <pre><code>// \u2705 Optional and Readonly\ninterface Product {\n  name: string;\n  price?: number; // optional\n  readonly id: string; // cannot be changed\n}\n\nconst item: Product = {\n  name: \"Book\",\n  id: \"abc123\"\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#index-signatures","title":"Index Signatures","text":"<ul> <li>Index signatures allow dynamic keys with a consistent value type.</li> </ul> <pre><code>// \u2705 Index Signature\ninterface StringMap {\n  [key: string]: string;\n}\n\nconst colors: StringMap = {\n  primary: \"#fff\",\n  secondary: \"#000\"\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#interface-vs-type-alias","title":"Interface vs Type Alias","text":"<ul> <li>Both <code>interface</code> and <code>type</code> can define object shapes.</li> <li><code>interface</code> supports declaration merging and is preferred for objects.</li> <li><code>type</code> can alias any type (including primitives, unions, etc.).</li> </ul> <pre><code>// \u2705 Interface\ninterface Person {\n  name: string;\n}\n\n// \u2705 Type Alias\ntype Animal = {\n  species: string;\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#extending-interfaces","title":"Extending Interfaces","text":"<ul> <li>Interfaces can extend one or more other interfaces to build on top of them.</li> </ul> <pre><code>// \u2705 Extending Interfaces\ninterface Shape {\n  color: string;\n}\ninterface Circle extends Shape {\n  radius: number;\n}\n\nconst circle: Circle = {\n  color: \"blue\",\n  radius: 10\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#union-intersection-types","title":"Union &amp; Intersection Types","text":"<ul> <li>Use union (<code>|</code>) to allow multiple types.</li> <li>Use intersection (<code>&amp;</code>) to combine multiple types into one.</li> </ul> <pre><code>// \u2705 Union Type\n\nlet value: string | number;\nvalue = \"hello\"; // \u2705\nvalue = 42;      // \u2705\nvalue = true;    // \u274c Error: boolean not allowed\n\ntype Status = \"success\" | \"error\" | \"loading\";\nlet apiStatus: Status;\napiStatus = \"loading\"; // \u2705\napiStatus = \"fail\";    // \u274c\n\n// Union with Interfaces\ninterface Dog {\n    bark: () =&gt; void;\n}\ninterface Cat {\n    meow: () =&gt; void;\n}\ntype Pet = Dog | Cat;\nfunction makeSound(pet: Pet) {\n    if ('bark' in pet) pet.bark();\n    else pet.meow();\n}\n\n\n\n// \u2705 Intersection Types (&amp;)\n\n// Intersection with Types\ntype A = { a: number };\ntype B = { b: string };\n\ntype AB = A &amp; B;\n\nconst obj: AB = {\n    a: 10,\n    b: \"hello\"\n};\n\n\n// Intersection with Interfaces\ninterface Position {\n    x: number;\n    y: number;\n}\ninterface Size {\n    width: number;\n    height: number;\n}\ntype Rectangle = Position &amp; Size;\n\nconst box: Rectangle = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 50\n};\n\n\n// Mixed Use of Union and Intersection\ninterface AdminTwo { role: \"admin\"; accessLevel: number };\ninterface UserTwo { role: \"user\"; email: string };\ntype Profile = { name: string };\n\ntype Person = (AdminTwo &amp; Profile) | (UserTwo &amp; Profile);\n\nconst p1: Person = {\n    role: \"admin\",\n    accessLevel: 10,\n    name: \"John\"\n};\n\nconst p2: Person = {\n    role: \"user\",\n    email: \"john@example.com\",\n    name: \"John\"\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#nested-interfaces-types","title":"Nested Interfaces &amp; Types","text":"<ul> <li>Interfaces and types can be nested to reflect complex data structures.</li> </ul> <pre><code>// \u2705 Nested Types\ninterface Address {\n  street: string;\n  city: string;\n}\ninterface Employee {\n  name: string;\n  address: Address;\n}\n\nconst emp: Employee = {\n  name: \"John\",\n  address: {\n    street: \"123 Main St\",\n    city: \"New York\"\n  }\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#interface-merging","title":"Interface Merging","text":"<ul> <li>Interfaces with the same name automatically merge their declarations.</li> </ul> <pre><code>// \u2705 Interface Merging\ninterface Config {\n  theme: string;\n}\ninterface Config {\n  layout: \"grid\" | \"list\";\n}\n\nconst settings: Config = {\n  theme: \"dark\",\n  layout: \"grid\"\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#type-aliases-for-functions-objects","title":"Type Aliases for Functions &amp; Objects","text":"<ul> <li>You can define reusable object/function types using <code>type</code>.</li> </ul> <pre><code>// \u2705 Function Type Alias\ntype Logger = (message: string) =&gt; void;\n\nconst log: Logger = (msg) =&gt; console.log(msg);\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#discriminated-unions","title":"Discriminated Unions","text":"<ul> <li>Combine union types with a <code>discriminator</code> field to create safer type checks.</li> </ul> <pre><code>// \u2705 Discriminated Unions\ninterface Dog {\n  kind: \"dog\";\n  bark: () =&gt; void;\n}\ninterface Cat {\n  kind: \"cat\";\n  meow: () =&gt; void;\n}\ntype Pet = Dog | Cat;\n\nfunction speak(pet: Pet) {\n  if (pet.kind === \"dog\") {\n    pet.bark();\n  } else {\n    pet.meow();\n  }\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#3-classes-in-typescript","title":"3. Classes in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#class-syntax","title":"Class Syntax","text":"<ul> <li>Classes in TypeScript are similar to those in other OOP languages. They encapsulate data and behavior in reusable blueprints.</li> </ul> <pre><code>// \u2705 Basic Class Syntax\nclass Person {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst p = new Person(\"Alice\");\np.greet(); // Hello, my name is Alice\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#constructors-access-modifiers-public-private-protected","title":"Constructors &amp; Access Modifiers (<code>public</code>, <code>private</code>, <code>protected</code>)","text":"<ul> <li><code>public</code>: accessible from anywhere (default)</li> <li><code>private</code>: accessible only within the class</li> <li><code>protected</code>: accessible in the class and subclasses</li> </ul> <pre><code>// \u2705 Access Modifiers\nclass User {\n  public username: string;\n  private password: string;\n  protected email: string;\n\n  constructor(username: string, password: string, email: string) {\n    this.username = username;\n    this.password = password;\n    this.email = email;\n  }\n\n  public checkPassword(input: string): boolean {\n    return this.password === input;\n  }\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#readonly-static-members","title":"Readonly &amp; Static Members","text":"<ul> <li><code>readonly</code>: can only be assigned once (at declaration or in constructor)</li> <li><code>static</code>: belongs to the class, not instances</li> </ul> <pre><code>// \u2705 Readonly &amp; Static\nclass AppConfig {\n  readonly version: string = \"1.0.0\";\n  static appName: string = \"MyApp\";\n\n  printVersion() {\n    console.log(`Version: ${this.version}`);\n  }\n}\n\nconsole.log(AppConfig.appName); // \"MyApp\"\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#getters-and-setters","title":"Getters and Setters","text":"<ul> <li>Use <code>get</code> and <code>set</code> for controlled access to properties.</li> </ul> <pre><code>// \u2705 Getters and Setters\nclass Temperature {\n  private _celsius: number;\n\n  constructor(celsius: number) {\n    this._celsius = celsius;\n  }\n\n  get fahrenheit(): number {\n    return this._celsius * 1.8 + 32;\n  }\n\n  set fahrenheit(f: number) {\n    this._celsius = (f - 32) / 1.8;\n  }\n}\n\nconst temp = new Temperature(25);\nconsole.log(temp.fahrenheit); // 77\ntemp.fahrenheit = 86;\nconsole.log(temp); // Celsius: ~30\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#implementing-interfaces","title":"Implementing Interfaces","text":"<ul> <li>Classes can implement one or more interfaces to enforce structure.</li> </ul> <pre><code>// \u2705 Implementing Interfaces\ninterface Printable {\n  print(): void;\n}\n\nclass Document implements Printable {\n  print() {\n    console.log(\"Printing document...\");\n  }\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#inheritance-and-super","title":"Inheritance and <code>super()</code>","text":"<ul> <li>Use <code>extends</code> to inherit from another class.</li> <li>Call <code>super()</code> to invoke the parent\u2019s constructor.</li> </ul> <pre><code>// \u2705 Inheritance &amp; super()\nclass Animal {\n  constructor(public name: string) {}\n\n  move() {\n    console.log(`${this.name} moves.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name: string, public breed: string) {\n    super(name);\n  }\n\n  bark() {\n    console.log(\"Woof!\");\n  }\n}\n\nconst d = new Dog(\"Buddy\", \"Beagle\");\nd.move(); // Buddy moves.\nd.bark(); // Woof!\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#abstract-classes","title":"Abstract Classes","text":"<ul> <li>Abstract classes define common structure but cannot be instantiated directly.</li> <li>Subclasses must implement abstract methods.</li> </ul> <pre><code>// \u2705 Abstract Classes\nabstract class Shape {\n  constructor(public color: string) {}\n  abstract area(): number;\n}\n\nclass Circle extends Shape {\n  constructor(color: string, public radius: number) {\n    super(color);\n  }\n\n  area(): number {\n    return Math.PI * this.radius ** 2;\n  }\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#generics-in-classes","title":"Generics in Classes","text":"<ul> <li>Use generics to create reusable and type-safe class structures.</li> </ul> <pre><code>// \u2705 Generic Class\nclass Box&lt;T&gt; {\n  contents: T;\n  constructor(value: T) {\n    this.contents = value;\n  }\n  get(): T {\n    return this.contents;\n  }\n}\n\nconst stringBox = new Box&lt;string&gt;(\"Hello\");\nconst numberBox = new Box&lt;number&gt;(123);\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#parameter-properties","title":"Parameter Properties","text":"<ul> <li>TypeScript lets you declare and initialize class properties directly in the constructor.</li> </ul> <pre><code>// \u2705 Parameter Properties\nclass Car {\n  constructor(public make: string, private year: number) {}\n\n  getAge(): number {\n    return new Date().getFullYear() - this.year;\n  }\n}\n\nconst myCar = new Car(\"Toyota\", 2020);\nconsole.log(myCar.make); // Toyota\n// console.log(myCar.year); \u274c Error: year is private\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#mixins-in-typescript","title":"\ud83e\uddec Mixins in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#what-are-mixins","title":"\ud83e\udde9 What are Mixins?","text":"<p>Mixins are a way to compose multiple classes or behaviors into a single class. Instead of using inheritance from one base class, mixins allow you to combine functionality from multiple sources.</p> <p>They are a powerful pattern to achieve code reuse without deep class hierarchies.</p>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#why-use-mixins","title":"\ud83d\udea6 Why Use Mixins?","text":"<ul> <li>To avoid tight coupling of class hierarchies.</li> <li>To compose reusable logic (e.g., logging, timestamping, serialization).</li> <li>When you want to simulate multiple inheritance in TypeScript (since JS/TS only supports single inheritance).</li> </ul>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#basic-mixin-pattern","title":"\ud83d\udd27 Basic Mixin Pattern","text":"<pre><code>type Constructor&lt;T = {}&gt; = new (...args: any[]) =&gt; T;\n\nfunction Timestamped&lt;TBase extends Constructor&gt;(Base: TBase) {\n  return class extends Base {\n    timestamp = new Date();\n  };\n}\n\nfunction Activatable&lt;TBase extends Constructor&gt;(Base: TBase) {\n  return class extends Base {\n    isActive = false;\n    activate() {\n      this.isActive = true;\n    }\n    deactivate() {\n      this.isActive = false;\n    }\n  };\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#using-the-mixins","title":"\ud83c\udfd7\ufe0f Using the Mixins","text":"<pre><code>class User {\n  constructor(public name: string) {}\n}\n\nconst Mixed = Timestamped(Activatable(User));\n\nconst user = new Mixed(\"Alice\");\n\nconsole.log(user.timestamp);  // Current Date\nconsole.log(user.isActive);   // false\n\nuser.activate();\nconsole.log(user.isActive);   // true\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#how-it-works","title":"\ud83e\udde0 How it Works","text":"<ul> <li><code>Constructor&lt;T&gt;</code> defines a generic class constructor type.</li> <li>Each mixin is a higher-order class function that takes a base class and returns an extended version of it.</li> <li>You can chain mixins together to apply multiple behaviors.</li> </ul>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#things-to-know","title":"\u26a0\ufe0f Things to Know","text":"<ul> <li>TypeScript does not support multiple inheritance, so mixins are a workaround.</li> <li>Mixing in properties and methods may require type assertions or interfaces to keep TypeScript happy.</li> <li>If you're using <code>strictPropertyInitialization</code>, you might need to override that with definite assignment (<code>!</code>) or set values in constructor.</li> </ul>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Keep mixins modular and reusable.</li> <li>Use mixins only when simple composition/inheritance won\u2019t suffice.</li> <li>Document clearly what each mixin adds to avoid confusion.</li> </ul>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#example-with-interface-support","title":"\ud83e\uddea Example with Interface Support","text":"<pre><code>interface Timestamped {\n  timestamp: Date;\n}\ninterface Activatable {\n  isActive: boolean;\n  activate(): void;\n  deactivate(): void;\n}\n\nconst mixedUser = new Mixed(\"Bob\") as User &amp; Timestamped &amp; Activatable;\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#when-to-use-mixins","title":"\ud83e\uddf0 When to Use Mixins","text":"<ul> <li>When you want to compose multiple traits into a class.</li> <li>In libraries or frameworks to build pluggable behavior.</li> <li>For large codebases where inheritance trees become too complex.</li> </ul>"},{"location":"ts/4.Advanced%20Types/","title":"Advanced Types in TypeScript","text":""},{"location":"ts/4.Advanced%20Types/#union-and-intersection-types","title":"Union and Intersection Types","text":"<ul> <li>Union (<code>|</code>): A variable can be one of multiple types.</li> <li>Intersection (<code>&amp;</code>): Combines multiple types into one.</li> </ul> <pre><code>// \u2705 Union Type\ntype Status = \"success\" | \"error\" | \"loading\";\nlet state: Status = \"success\";\n\n// \u2705 Intersection Type\ninterface A { a: string }\ninterface B { b: number }\n\ntype AB = A &amp; B;\n\nconst example: AB = {\n  a: \"hello\",\n  b: 123\n};\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#discriminated-unions","title":"Discriminated Unions","text":"<ul> <li>Use a common literal field (<code>kind</code>) to distinguish between types in a union.</li> <li>Helps TypeScript narrow types automatically.</li> </ul> <pre><code>// \u2705 Discriminated Unions\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\ninterface Square {\n  kind: \"square\";\n  side: number;\n}\ntype Shape = Circle | Square;\n\nfunction area(shape: Shape): number {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    case \"square\":\n      return shape.side ** 2;\n  }\n}\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#type-guards","title":"Type Guards","text":"<ul> <li>Narrow down types using runtime checks like <code>typeof</code>, <code>instanceof</code>, or custom type predicates.</li> </ul> <pre><code>// \u2705 typeof Guard\nfunction print(value: string | number) {\n  if (typeof value === \"string\") {\n    console.log(\"String:\", value.toUpperCase());\n  } else {\n    console.log(\"Number:\", value.toFixed(2));\n  }\n}\n\n// \u2705 Custom Type Guard\ninterface Cat {\n  meow(): void;\n}\ninterface Dog {\n  bark(): void;\n}\n\nfunction isDog(animal: Dog | Cat): animal is Dog {\n  return (animal as Dog).bark !== undefined;\n}\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#keyof-typeof-in-operators","title":"<code>keyof</code>, <code>typeof</code>, <code>in</code> Operators","text":"<ul> <li><code>keyof</code> gets all property keys of a type.</li> <li><code>typeof</code> refers to the type of a variable or value.</li> <li><code>in</code> checks if a property exists in a type.</li> </ul> <pre><code>// \u2705 keyof\ntype Person = { name: string; age: number };\ntype PersonKeys = keyof Person; // \"name\" | \"age\"\n\n// \u2705 typeof\nconst point = { x: 1, y: 2 };\ntype Point = typeof point;\n\n// \u2705 in Operator\ntype ReadonlyPerson = {\n  [K in keyof Person]: Readonly&lt;Person[K]&gt;\n};\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#mapped-types","title":"Mapped Types","text":"<ul> <li>Create new types by transforming existing ones using <code>keyof</code> and <code>in</code>.</li> </ul> <pre><code>// \u2705 Mapped Type\ntype Optional&lt;T&gt; = {\n  [K in keyof T]?: T[K];\n};\n\ntype User = { id: number; name: string };\ntype OptionalUser = Optional&lt;User&gt;; // All properties optional\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#conditional-types","title":"Conditional Types","text":"<ul> <li>Define types based on a condition using <code>extends</code>.</li> </ul> <pre><code>// \u2705 Conditional Types\ntype IsString&lt;T&gt; = T extends string ? \"Yes\" : \"No\";\n\ntype A = IsString&lt;string&gt;;  // \"Yes\"\ntype B = IsString&lt;number&gt;;  // \"No\"\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#template-literal-types","title":"Template Literal Types","text":"<ul> <li>Construct string literal types using template syntax.</li> </ul> <pre><code>// \u2705 Template Literal Types\ntype Lang = \"en\" | \"fr\" | \"de\";\ntype FileName = `index.${Lang}.html`;\n\nconst file: FileName = \"index.en.html\"; // valid\n</code></pre>"},{"location":"ts/5.Generics/","title":"Generics in TypeScript","text":""},{"location":"ts/5.Generics/#generic-functions","title":"Generic Functions","text":"<ul> <li>Generics allow you to write functions that work with any data type while preserving type safety.</li> </ul> <pre><code>// \u2705 Generic Function\nfunction identity&lt;T&gt;(arg: T): T {\n  return arg;\n}\n\nconst output1 = identity&lt;string&gt;(\"hello\");\nconst output2 = identity&lt;number&gt;(42);\n</code></pre>"},{"location":"ts/5.Generics/#generic-interfaces-types","title":"Generic Interfaces &amp; Types","text":"<ul> <li>You can use generics in interfaces and type aliases to define reusable structures.</li> </ul> <pre><code>// \u2705 Generic Interface\ninterface Box&lt;T&gt; {\n  value: T;\n}\n\nconst stringBox: Box&lt;string&gt; = { value: \"TypeScript\" };\nconst numberBox: Box&lt;number&gt; = { value: 123 };\n</code></pre>"},{"location":"ts/5.Generics/#constraints-with-generics-extends","title":"Constraints with Generics (<code>extends</code>)","text":"<ul> <li>You can limit what types can be passed to a generic by using <code>extends</code>.</li> </ul> <pre><code>// \u2705 Generic Constraints\ninterface HasLength {\n  length: number;\n}\n\nfunction logLength&lt;T extends HasLength&gt;(input: T): void {\n  console.log(input.length);\n}\n\nlogLength(\"hello\");\nlogLength([1, 2, 3]);\n// logLength(123); \u274c Error: number has no `length`\n</code></pre>"},{"location":"ts/5.Generics/#default-type-parameters","title":"Default Type Parameters","text":"<ul> <li>Provide a default type if none is specified when the generic is used.</li> </ul> <pre><code>// \u2705 Default Type Parameters\ntype ApiResponse&lt;T = string&gt; = {\n  data: T;\n  success: boolean;\n};\n\nconst res1: ApiResponse = { data: \"ok\", success: true };\nconst res2: ApiResponse&lt;number&gt; = { data: 200, success: true };\n</code></pre>"},{"location":"ts/5.Generics/#utility-types-partial-required-readonly-record-etc","title":"Utility Types (<code>Partial</code>, <code>Required</code>, <code>Readonly</code>, <code>Record</code>, etc.)","text":"<ul> <li>TypeScript provides built-in generic utility types to transform other types.</li> </ul> <pre><code>interface User {\n  id: number;\n  name: string;\n  email?: string;\n}\n\n// \u2705 Partial: All properties optional\ntype PartialUser = Partial&lt;User&gt;;\n\n// \u2705 Required: All properties required\ntype RequiredUser = Required&lt;User&gt;;\n\n// \u2705 Readonly: Properties cannot be reassigned\ntype ReadonlyUser = Readonly&lt;User&gt;;\n\n// \u2705 Record: Construct an object type with specific keys and value type\ntype Role = \"admin\" | \"editor\" | \"viewer\";\ntype RoleMap = Record&lt;Role, string&gt;;\n\nconst roles: RoleMap = {\n  admin: \"Alice\",\n  editor: \"Bob\",\n  viewer: \"Charlie\"\n};\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/","title":"Modules and Namespaces in TypeScript","text":""},{"location":"ts/6.Modules%20and%20Namespaces/#es-modules-in-typescript","title":"ES Modules in TypeScript","text":"<ul> <li>TypeScript supports standard ES Modules (<code>import</code> / <code>export</code>) to organize code into separate files.</li> <li>Each file is treated as a module if it contains at least one <code>import</code> or <code>export</code>.</li> </ul> <pre><code>// file: math.ts\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n</code></pre> <pre><code>// file: main.ts\nimport { add } from \"./math\";\nconsole.log(add(2, 3)); // 5\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#import-export-syntax","title":"Import / Export Syntax","text":"<ul> <li>You can export declarations individually or as a default.</li> <li>Imports can be named, aliased, or default imports.</li> </ul> <pre><code>// \u2705 Named Export\nexport const PI = 3.14;\n\n// \u2705 Default Export\nexport default function greet(name: string) {\n  return `Hello, ${name}`;\n}\n</code></pre> <pre><code>// \u2705 Import Variants\nimport greet from \"./greet\";         // default import\nimport { PI } from \"./constants\";    // named import\nimport * as MathUtils from \"./math\"; // namespace import\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#module-resolution","title":"Module Resolution","text":"<ul> <li>TypeScript uses module resolution strategies to locate imported modules:</li> <li><code>\"node\"</code> (for Node.js projects)</li> <li><code>\"classic\"</code> (for older TypeScript projects)</li> <li>Controlled via <code>tsconfig.json</code> under <code>moduleResolution</code>.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"baseUrl\": \"./src\",\n    \"paths\": {\n      \"@utils/*\": [\"utils/*\"]\n    }\n  }\n}\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#using-typescript-with-nodejs-deno","title":"Using TypeScript with Node.js / Deno","text":"<ul> <li>TypeScript works with Node.js and Deno through built-in support or configuration.</li> </ul>"},{"location":"ts/6.Modules%20and%20Namespaces/#nodejs","title":"Node.js","text":"<ul> <li>Use <code>ts-node</code> or compile to JavaScript using <code>tsc</code>.</li> <li>Enable ES module support via <code>type: \"module\"</code> in <code>package.json</code>.</li> </ul> <pre><code>{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"ts-node src/main.ts\"\n  }\n}\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#deno","title":"Deno","text":"<ul> <li>Deno supports TypeScript natively. Just run <code>.ts</code> files directly.</li> </ul> <pre><code>deno run --allow-read main.ts\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#legacy-namespaces","title":"Legacy Namespaces","text":"<ul> <li>Namespaces were used in pre-ESModule TypeScript for organizing code.</li> <li>Now considered legacy in favor of ES Modules.</li> <li>Still useful in global script-based projects.</li> <li>Use namespace in older codebases without bundlers or module systems.</li> <li>\u274c Don\u2019t mix <code>namespace</code> with <code>import/export</code> in the same file.</li> </ul> <pre><code>// \u2705 Legacy Namespace\nnamespace MathUtils {\n    export function add(a: number, b: number): number {\n        return a + b\n    }\n    export function sub(a: number, b: number): number {\n        return a - b \n    }\n}\nconsole.log(MathUtils.add(23,27))\nconsole.log(MathUtils.sub(23,8))\n</code></pre>"},{"location":"ts/7.Declaration%20Files/","title":"Declaration Files in TypeScript","text":""},{"location":"ts/7.Declaration%20Files/#what-are-dts-files","title":"What are <code>.d.ts</code> Files?","text":"<ul> <li>Declaration files (<code>.d.ts</code>) contain type definitions for JavaScript code.</li> <li>They allow TypeScript to understand the shape of external libraries or modules without their source code.</li> <li>Think of them as type-only headers.</li> </ul> <pre><code>// math.d.ts\ndeclare function add(a: number, b: number): number;\n</code></pre> <pre><code>// main.ts\n/// &lt;reference path=\"./math.d.ts\" /&gt;\nadd(2, 3); // TypeScript understands the type\n</code></pre>"},{"location":"ts/7.Declaration%20Files/#writing-custom-type-declarations","title":"Writing Custom Type Declarations","text":"<ul> <li>Create your own <code>.d.ts</code> files when using plain JavaScript or third-party libraries without types.</li> </ul> <pre><code>// myLib.d.ts\ndeclare module \"my-lib\" {\n  export function greet(name: string): string;\n}\n</code></pre> <pre><code>// usage.ts\nimport { greet } from \"my-lib\";\ngreet(\"TypeScript\");\n</code></pre> <ul> <li>You can also define types globally by omitting <code>declare module</code>.</li> </ul> <pre><code>// global.d.ts\ninterface Window {\n  myApp: {\n    version: string;\n  };\n}\n</code></pre>"},{"location":"ts/7.Declaration%20Files/#using-definitelytyped-types","title":"Using DefinitelyTyped (<code>@types</code>)","text":"<ul> <li>The DefinitelyTyped project provides type definitions for thousands of libraries.</li> <li>Install types using npm:</li> </ul> <pre><code>npm install --save-dev @types/lodash\n</code></pre> <pre><code>import _ from \"lodash\";\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2); // Fully typed!\n</code></pre> <ul> <li>Type packages follow the naming convention: <code>@types/&lt;package-name&gt;</code></li> </ul>"},{"location":"ts/7.Declaration%20Files/#ambient-declarations","title":"Ambient Declarations","text":"<ul> <li>Use <code>declare</code> to tell TypeScript about types that exist elsewhere (e.g., globally provided by a script or environment).</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Declare Demo&lt;/title&gt;\n  &lt;script&gt;\n    // This defines a global variable, available at runtime\n    window.APP_VERSION = \"3.5.1\";\n  &lt;/script&gt;\n  &lt;script src=\"dist/app.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Check console for output&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>// TypeScript doesn't know this global exists.\n// We must use `declare` to inform the compiler:\ndeclare const APP_VERSION: string;\nconsole.log(\"App Version is:\", APP_VERSION);\n</code></pre> <pre><code>// Likewise\n// Global function\ndeclare function showToast(msg: string): void;\n// It's assumed this function is defined somewhere else\nshowToast(\"Hello!\"); \n\n// Class From External Script\ndeclare class Logger {\n    log(msg: string): void;\n}\nconst logger = new Logger();\nlogger.log(\"Logging!\");\n\n// Module Declaration\ndeclare module \"my-legacy-lib\" {\n    export function doSomething(): void;\n}\n</code></pre> <pre><code>// ambient.d.ts\ndeclare const API_URL: string;\ndeclare function fetchData(endpoint: string): Promise&lt;any&gt;;\n</code></pre> <ul> <li>Ambient declarations are useful when working with global variables or external JS.</li> </ul> <pre><code>// usage.ts\nconsole.log(API_URL);\nfetchData(\"/users\").then(console.log);\n</code></pre>"},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/","title":"TypeScript and JavaScript Interoperability","text":""},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#type-checking-javascript-files","title":"Type Checking JavaScript Files","text":"<ul> <li>TypeScript can perform type checking on <code>.js</code> files.</li> <li>Useful for gradually migrating JavaScript projects to TypeScript.</li> </ul> <pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"checkJs\": true\n  },\n  \"include\": [\"src/**/*.js\"]\n}\n</code></pre> <pre><code>// example.js\nfunction add(a, b) {\n  return a + b;\n}\n\nadd(\"1\", 2); // \u274c TypeScript will warn about type mismatch\n</code></pre>"},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#allowjs-and-checkjs","title":"<code>allowJs</code> and <code>checkJs</code>","text":"<ul> <li><code>allowJs</code>: lets the compiler include <code>.js</code> files in compilation.</li> <li><code>checkJs</code>: enables type-checking on <code>.js</code> files.</li> </ul> <pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"checkJs\": true\n  }\n}\n</code></pre> <ul> <li>This allows mixed JS and TS projects.</li> </ul>"},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#using-jsdoc-for-typing-js","title":"Using JSDoc for Typing JS","text":"<ul> <li>You can use JSDoc comments to annotate types in <code>.js</code> files.</li> </ul> <pre><code>// \u2705 JSDoc Typing\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction multiply(a, b) {\n  return a * b;\n}\n</code></pre> <ul> <li>Works great with IDEs and <code>checkJs</code> enabled.</li> </ul> <pre><code>/**\n * @typedef {Object} User\n * @property {string} name\n * @property {number} age\n */\n\n/** @type {User} */\nconst user = { name: \"Alice\", age: 30 };\n</code></pre>"},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#migrating-from-js-to-ts","title":"Migrating from JS to TS","text":"<ul> <li>Migrate step-by-step with minimal disruption:</li> </ul> <pre><code># 1. Enable JS support\ntsc --init --allowJs --checkJs\n\n# 2. Rename .js \u2192 .ts/.tsx one file at a time\n\n# 3. Replace JSDoc with native TypeScript types\n\n# 4. Fix type errors gradually and configure strict options\n</code></pre> <pre><code>// JS\nfunction greet(name) {\n  return \"Hello, \" + name;\n}\n\n// TS\nfunction greet(name: string): string {\n  return `Hello, ${name}`;\n}\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/","title":"Tooling &amp; Configuration in TypeScript","text":""},{"location":"ts/9.Tooling%20%26%20Configuration/#tsconfigjson-explained","title":"<code>tsconfig.json</code> Explained","text":"<ul> <li><code>tsconfig.json</code> configures how TypeScript compiles your project.</li> <li>Common fields:</li> <li><code>compilerOptions</code>: compiler behavior</li> <li><code>include</code>: files to include</li> <li><code>exclude</code>: files to ignore</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"esnext\",\n    \"strict\": true,\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\"\n  },\n  \"include\": [\"src\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#strict-mode-options","title":"Strict Mode Options","text":"<ul> <li>Enabling <code>strict</code> turns on all strict type-checking options:</li> <li><code>strictNullChecks</code></li> <li><code>noImplicitAny</code></li> <li><code>strictFunctionTypes</code></li> <li><code>alwaysStrict</code>, etc.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n</code></pre> <ul> <li>These catch subtle bugs and make your code safer.</li> </ul>"},{"location":"ts/9.Tooling%20%26%20Configuration/#useful-compiler-options","title":"Useful Compiler Options","text":"<ul> <li><code>noImplicitAny</code>: Warns when TypeScript infers <code>any</code>.</li> <li><code>strictNullChecks</code>: Disallows <code>null</code> and <code>undefined</code> where not explicitly allowed.</li> <li><code>esModuleInterop</code>: Enables compatibility with CommonJS modules.</li> <li><code>resolveJsonModule</code>: Allows importing <code>.json</code> files.</li> <li><code>baseUrl</code> &amp; <code>paths</code>: Configure absolute import paths.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"esModuleInterop\": true,\n    \"baseUrl\": \"./src\",\n    \"paths\": {\n      \"@utils/*\": [\"utils/*\"]\n    }\n  }\n}\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#source-maps-output-targets","title":"Source Maps &amp; Output Targets","text":"<ul> <li><code>sourceMap: true</code> generates <code>.map</code> files for debugging in devtools.</li> <li><code>outDir</code> and <code>rootDir</code> control output and input folder structure.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"outDir\": \"./build\",\n    \"rootDir\": \"./src\"\n  }\n}\n</code></pre> <ul> <li>Run the compiler:</li> </ul> <pre><code>tsc --project tsconfig.json\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#integrating-with-babel-webpack-vite","title":"Integrating with Babel, Webpack, Vite","text":""},{"location":"ts/9.Tooling%20%26%20Configuration/#with-babel","title":"With Babel","text":"<ul> <li>Use <code>@babel/preset-typescript</code> to strip types while using Babel.</li> </ul> <pre><code>npm install --save-dev @babel/preset-typescript\n</code></pre> <pre><code>// babel.config.json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"]\n}\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#with-webpack","title":"With Webpack","text":"<ul> <li>Use <code>ts-loader</code> or <code>babel-loader</code> with <code>webpack.config.js</code>.</li> </ul> <pre><code>module.exports = {\n  entry: \"./src/index.ts\",\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        use: \"ts-loader\",\n        exclude: /node_modules/\n      }\n    ]\n  },\n  resolve: {\n    extensions: [\".ts\", \".js\"]\n  },\n  output: {\n    filename: \"bundle.js\",\n    path: __dirname + \"/dist\"\n  }\n};\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#with-vite","title":"With Vite","text":"<ul> <li>Vite has built-in TypeScript support; just use <code>.ts</code> files.</li> </ul> <pre><code>npm create vite@latest\n# Choose framework, then select TypeScript template\n</code></pre> <pre><code>// vite.config.ts (optional enhancements)\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  build: {\n    sourcemap: true\n  }\n});\n</code></pre>"},{"location":"ts/ts-list/","title":"TypeScript Comprehensive Guide \u2013 Table of Contents","text":""},{"location":"ts/ts-list/#1-introduction-to-typescript","title":"1. Introduction to TypeScript","text":"<ul> <li>What is TypeScript?</li> <li>Why TypeScript? Benefits over JavaScript</li> <li>TypeScript vs JavaScript</li> <li>Setting Up a TypeScript Project</li> <li>Running &amp; Compiling TypeScript (<code>tsc</code>)</li> </ul>"},{"location":"ts/ts-list/#2-basic-types-and-type-inference-annotations-assertions","title":"2. Basic Types and Type Inference, Annotations &amp; Assertions","text":""},{"location":"ts/ts-list/#basic-types","title":"Basic Types","text":"<ul> <li><code>string</code>, <code>number</code>, <code>boolean</code></li> <li><code>any</code>, <code>unknown</code>, <code>void</code>, <code>never</code></li> <li>Arrays and Tuples</li> <li>Enums</li> <li>Literal Types</li> <li>Type Aliases</li> </ul>"},{"location":"ts/ts-list/#type-inference-type-assertions","title":"Type Inference &amp; Type Assertions","text":"<ul> <li>Type Inference</li> <li>Type Annotations</li> <li>Type Assertions (Casting)</li> <li>Type Casting <code>as</code> vs angle-bracket syntax</li> </ul>"},{"location":"ts/ts-list/#3-functions-objects-and-classes-in-typescript","title":"3. Functions, Objects and Classes in TypeScript","text":""},{"location":"ts/ts-list/#functions-in-typescript","title":"Functions in TypeScript","text":"<ul> <li>Function Types</li> <li>Optional &amp; Default Parameters</li> <li>Rest Parameters</li> <li>Function Overloads</li> <li><code>this</code> in Functions</li> <li>Arrow Functions</li> <li>Function Return Types</li> <li>Anonymous &amp; Callback Functions</li> </ul>"},{"location":"ts/ts-list/#objects-interfaces","title":"Objects &amp; Interfaces","text":"<ul> <li>Object Type Annotations</li> <li>Creating and Using Interfaces</li> <li>Optional and Readonly Properties</li> <li>Index Signatures</li> <li>Interface vs Type Alias</li> <li>Extending Interfaces</li> <li>Union &amp; Intersection Types</li> <li>Nested Interfaces &amp; Types</li> <li>Interface Merging</li> <li>Type Aliases for Functions &amp; Objects</li> <li>Discriminated Unions</li> </ul>"},{"location":"ts/ts-list/#classes-in-typescript","title":"Classes in TypeScript","text":"<ul> <li>Class Syntax</li> <li>Constructors &amp; Access Modifiers (<code>public</code>, <code>private</code>, <code>protected</code>)</li> <li>Readonly &amp; Static Members</li> <li>Getters and Setters</li> <li>Implementing Interfaces</li> <li>Inheritance and <code>super()</code></li> <li>Abstract Classes</li> <li>Generics in Classes</li> <li>Parameter Properties</li> <li>Mixin in TypeScript</li> </ul>"},{"location":"ts/ts-list/#4-advanced-types","title":"4. Advanced Types","text":"<ul> <li>Union and Intersection Types</li> <li>Discriminated Unions</li> <li>Type Guards</li> <li><code>keyof</code>, <code>typeof</code>, <code>in</code> Operators</li> <li>Mapped Types</li> <li>Conditional Types</li> <li>Template Literal Types</li> </ul>"},{"location":"ts/ts-list/#5-generics","title":"5. Generics","text":"<ul> <li>Generic Functions</li> <li>Generic Interfaces &amp; Types</li> <li>Constraints with Generics (<code>extends</code>)</li> <li>Default Type Parameters</li> <li>Utility Types (<code>Partial</code>, <code>Required</code>, <code>Readonly</code>, <code>Record</code>, etc.)</li> </ul>"},{"location":"ts/ts-list/#6-modules-and-namespaces","title":"6. Modules and Namespaces","text":"<ul> <li>ES Modules in TypeScript</li> <li>Import / Export Syntax</li> <li>Module Resolution</li> <li>Using TypeScript with Node.js / Deno</li> <li>Legacy Namespaces</li> </ul>"},{"location":"ts/ts-list/#7-declaration-files","title":"7. Declaration Files","text":"<ul> <li>What are <code>.d.ts</code> files?</li> <li>Writing Custom Type Declarations</li> <li>Using DefinitelyTyped (<code>@types</code>)</li> <li>Ambient Declarations</li> </ul>"},{"location":"ts/ts-list/#8-typescript-and-javascript-interop","title":"8. TypeScript and JavaScript Interop","text":"<ul> <li>Type Checking JavaScript Files</li> <li><code>allowJs</code> and <code>checkJs</code></li> <li>Using JSDoc for Typing JS</li> <li>Migrating from JS to TS</li> </ul>"},{"location":"ts/ts-list/#9-tooling-configuration","title":"9. Tooling &amp; Configuration","text":"<ul> <li><code>tsconfig.json</code> Explained</li> <li>Strict Mode Options</li> <li>Useful Compiler Options</li> <li>Source Maps &amp; Output Targets</li> <li>Integrating with Babel, Webpack, Vite</li> </ul>"},{"location":"ts/ts-list/#10-working-with-third-party-libraries","title":"10. Working with Third-Party Libraries","text":"<ul> <li>Typing External Libraries</li> <li>Using <code>@types</code> Packages</li> <li>Handling Untyped Modules</li> <li>Type Safety in APIs (like <code>axios</code>, <code>fetch</code>, etc.)</li> </ul>"},{"location":"ts/ts-list/#11-react-typescript","title":"11. React + TypeScript","text":"<ul> <li>Typing Functional Components</li> <li>Typing Props and State</li> <li>React Hooks with TypeScript</li> <li>Custom Hooks with Generics</li> <li>Context API with TypeScript</li> </ul>"},{"location":"ts/ts-list/#12-nodejs-typescript","title":"12. Node.js + TypeScript","text":"<ul> <li>Setting up Node.js with TS</li> <li>Typing Express Apps</li> <li>Typing File System, Path, Process APIs</li> <li>Writing CLI Apps with TS</li> </ul>"},{"location":"ts/ts-list/#13-advanced-topics","title":"13. Advanced Topics","text":"<ul> <li>Decorators in TypeScript</li> <li>TypeScript Compiler API</li> <li>AST Parsing and Transformation</li> <li>Performance Considerations</li> </ul>"},{"location":"ts/ts-list/#14-best-practices","title":"14. Best Practices","text":"<ul> <li>Avoiding <code>any</code></li> <li>Favoring <code>unknown</code> and <code>never</code></li> <li>Structuring TypeScript Projects</li> <li>Consistent Naming Conventions</li> <li>Linting with ESLint + TypeScript</li> </ul>"},{"location":"ts/ts-list/#15-testing-in-typescript","title":"15. Testing in TypeScript","text":"<ul> <li>TypeScript with Jest / Vitest</li> <li>Typing Mocks and Stubs</li> <li>Using <code>ts-jest</code> or other compilers</li> </ul>"},{"location":"ts/ts-list/#16-troubleshooting-and-debugging","title":"16. Troubleshooting and Debugging","text":"<ul> <li>Common Type Errors</li> <li>Debugging with Source Maps</li> <li>Using VSCode IntelliSense</li> <li>Fixing Type Mismatches</li> </ul>"},{"location":"ts/ts-list/#17-appendix","title":"17. Appendix","text":"<ul> <li>Glossary of TypeScript Terms</li> <li>Cheatsheet of Common Types</li> <li>Useful Resources &amp; Docs</li> <li>Community and Support</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/documentation/","title":"Documentation","text":""}]}